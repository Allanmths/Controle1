import React from 'react';
import { FaEdit, FaTrash, FaExclamationTriangle, FaInfo } from 'react-icons/fa';

const ActionConfirmationModal = ({ 
  isOpen, 
  onClose, 
  onConfirm, 
  action, 
  productName, 
  title,
  description,
  confirmText = "Confirmar",
  cancelText = "Cancelar",
  confirmButtonClass = "bg-blue-600 hover:bg-blue-700",
  icon
}) => {
  if (!isOpen) return null;

  const getActionIcon = () => {
    if (icon) return icon;
    
    switch (action) {
      case 'edit':
        return <FaEdit className="w-6 h-6 text-blue-500" />;
      case 'delete':
        return <FaTrash className="w-6 h-6 text-red-500" />;
      default:
        return <FaInfo className="w-6 h-6 text-gray-500" />;
    }
  };

  const getDefaultTitle = () => {
    if (title) return title;
    
    switch (action) {
      case 'edit':
        return 'Confirmar EdiÁ„o';
      case 'delete':
        return 'Confirmar Exclus„o';
      default:
        return 'Confirmar AÁ„o';
    }
  };

  const getDefaultDescription = () => {
    if (description) return description;
    
    switch (action) {
      case 'edit':
        return `VocÍ est√° prestes a editar o produto "${productName}". Deseja continuar?`;
      case 'delete':
        return `VocÍ est√° prestes a excluir o produto "${productName}". Esta AÁ„o n„o pode ser desfeita.`;
      default:
        return `VocÍ est√° prestes a realizar uma AÁ„o no produto "${productName}". Deseja continuar?`;
    }
  };

  const getConfirmButtonClass = () => {
    if (confirmButtonClass !== "bg-blue-600 hover:bg-blue-700") return confirmButtonClass;
    
    switch (action) {
      case 'edit':
        return "bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600";
      case 'delete':
        return "bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-600";
      default:
        return "bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-600";
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white dark:bg-gray-800 rounded-lg p-6 w-full max-w-md mx-4 shadow-xl">
        {/* Header */}
        <div className="flex items-center mb-4">
          <div className="flex-shrink-0 mr-3">
            {getActionIcon()}
          </div>
          <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100">
            {getDefaultTitle()}
          </h3>
        </div>

        {/* Content */}
        <div className="mb-6">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            {getDefaultDescription()}
          </p>
          
          {action === 'delete' && (
            <div className="mt-4 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md">
              <div className="flex items-center">
                <FaExclamationTriangle className="w-4 h-4 text-red-500 mr-2" />
                <span className="text-sm text-red-700 dark:text-red-400 font-medium">
                  Aten√ß√£o: Esta AÁ„o √© irrevers√≠vel!
                </span>
              </div>
            </div>
          )}

          {productName && (
            <div className="mt-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-md">
              <div className="text-sm">
                <span className="font-medium text-gray-700 dark:text-gray-300">Produto: </span>
                <span className="text-gray-900 dark:text-gray-100">{productName}</span>
              </div>
            </div>
          )}
        </div>

        {/* Actions */}
        <div className="flex justify-end space-x-3">
          <button
            onClick={onClose}
            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 hover:bg-gray-200 dark:hover:bg-gray-500 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-gray-500"
          >
            {cancelText}
          </button>
          <button
            onClick={onConfirm}
            className={`px-4 py-2 text-sm font-medium text-white rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 ${getConfirmButtonClass()}`}
          >
            {confirmText}
          </button>
        </div>
      </div>
    </div>
  );
};

export default ActionConfirmationModal;
import React, { useMemo } from 'react';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
} from 'chart.js';
import { Line, Bar, Doughnut } from 'react-chartjs-2';

// Registrar componentes do Chart.js
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Title,
  Tooltip,
  Legend,
  Filler
);

const AdvancedCharts = ({ products = [], categories = [] }) => {
  // ConfiguraÁıes de tema para os gr√°ficos
  const isDark = document.documentElement.classList.contains('dark');
  
  const chartColors = {
    primary: isDark ? '#3B82F6' : '#2563EB',
    secondary: isDark ? '#10B981' : '#059669',
    warning: isDark ? '#F59E0B' : '#D97706',
    danger: isDark ? '#EF4444' : '#DC2626',
    info: isDark ? '#8B5CF6' : '#7C3AED',
    success: isDark ? '#06D6A0' : '#10B981',
    text: isDark ? '#F3F4F6' : '#374151',
    grid: isDark ? '#374151' : '#E5E7EB'
  };

  // Dados para gr√°fico de valor por categoria
  const categoryValueData = useMemo(() => {
    const categoryValues = categories.map(category => {
      const categoryProducts = products.filter(p => p.categoryId === category.id);
      const totalValue = categoryProducts.reduce((sum, product) => {
        const productValue = Object.values(product.locations || {})
          .reduce((pSum, quantity) => pSum + (quantity * (product.price || 0)), 0);
        return sum + productValue;
      }, 0);
      
      return {
        name: category.name,
        value: totalValue
      };
    }).sort((a, b) => b.value - a.value);

    return {
      labels: categoryValues.map(cat => cat.name),
      datasets: [{
        label: 'Valor em Estoque (R$)',
        data: categoryValues.map(cat => cat.value),
        backgroundColor: [
          chartColors.primary,
          chartColors.secondary,
          chartColors.warning,
          chartColors.danger,
          chartColors.info,
          chartColors.success,
          '#FF6384',
          '#36A2EB',
          '#FFCE56',
          '#4BC0C0'
        ],
        borderColor: chartColors.text,
        borderWidth: 2,
        hoverBackgroundColor: chartColors.primary,
        hoverBorderColor: chartColors.text,
      }]
    };
  }, [products, categories, chartColors]);

  // Dados para gr√°fico de quantidade por categoria
  const categoryQuantityData = useMemo(() => {
    const categoryQuantities = categories.map(category => {
      const categoryProducts = products.filter(p => p.categoryId === category.id);
      const totalQuantity = categoryProducts.reduce((sum, product) => {
        const productQuantity = Object.values(product.locations || {})
          .reduce((pSum, quantity) => pSum + quantity, 0);
        return sum + productQuantity;
      }, 0);
      
      return {
        name: category.name,
        quantity: totalQuantity,
        productCount: categoryProducts.length
      };
    }).sort((a, b) => b.quantity - a.quantity);

    return {
      labels: categoryQuantities.map(cat => cat.name),
      datasets: [
        {
          label: 'quantidade em Estoque',
          data: categoryQuantities.map(cat => cat.quantity),
          backgroundColor: chartColors.primary,
          borderColor: chartColors.primary,
          borderWidth: 2,
          borderRadius: 6,
          borderSkipped: false,
        },
        {
          label: 'N√∫mero de Produtos',
          data: categoryQuantities.map(cat => cat.productCount),
          backgroundColor: chartColors.secondary,
          borderColor: chartColors.secondary,
          borderWidth: 2,
          borderRadius: 6,
          borderSkipped: false,
        }
      ]
    };
  }, [products, categories, chartColors]);

  // Top 10 produtos por valor
  const topProductsData = useMemo(() => {
    const productsWithValue = products.map(product => {
      const totalValue = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + (quantity * (product.price || 0)), 0);
      
      return {
        ...product,
        totalValue
      };
    }).sort((a, b) => b.totalValue - a.totalValue).slice(0, 10);

    return {
      labels: productsWithValue.map(p => p.name.length > 20 ? p.name.substring(0, 20) + '...' : p.name),
      datasets: [{
        label: 'Valor Total (R$)',
        data: productsWithValue.map(p => p.totalValue),
        backgroundColor: chartColors.info,
        borderColor: chartColors.info,
        borderWidth: 2,
        borderRadius: 8,
        borderSkipped: false,
      }]
    };
  }, [products, chartColors]);

  // An√°lise ABC para gr√°fico de rosca
  const abcAnalysisData = useMemo(() => {
    if (!products.length) return null;

    const productsWithValue = products.map(product => {
      const totalValue = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + (quantity * (product.price || 0)), 0);
      return { ...product, totalValue };
    }).sort((a, b) => b.totalValue - a.totalValue);

    const totalValue = productsWithValue.reduce((sum, p) => sum + p.totalValue, 0);
    let cumulativeValue = 0;
    
    const abcCounts = { A: 0, B: 0, C: 0 };
    
    productsWithValue.forEach(product => {
      cumulativeValue += product.totalValue;
      const cumulativePercent = (cumulativeValue / totalValue) * 100;
      
      if (cumulativePercent <= 80) abcCounts.A++;
      else if (cumulativePercent <= 95) abcCounts.B++;
      else abcCounts.C++;
    });

    return {
      labels: ['Classe A (80%)', 'Classe B (15%)', 'Classe C (5%)'],
      datasets: [{
        data: [abcCounts.A, abcCounts.B, abcCounts.C],
        backgroundColor: [chartColors.success, chartColors.warning, chartColors.danger],
        borderColor: [chartColors.success, chartColors.warning, chartColors.danger],
        borderWidth: 3,
        hoverBackgroundColor: [chartColors.success, chartColors.warning, chartColors.danger],
        hoverBorderColor: chartColors.text,
      }]
    };
  }, [products, chartColors]);

  // Op√ß√µes padr√£o para os gr√°ficos
  const defaultOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: chartColors.text,
          font: {
            size: 12
          }
        }
      },
      tooltip: {
        backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
        titleColor: chartColors.text,
        bodyColor: chartColors.text,
        borderColor: chartColors.grid,
        borderWidth: 1,
      }
    },
    scales: {
      x: {
        ticks: {
          color: chartColors.text,
          font: {
            size: 11
          }
        },
        grid: {
          color: chartColors.grid,
          borderColor: chartColors.grid,
        }
      },
      y: {
        ticks: {
          color: chartColors.text,
          font: {
            size: 11
          }
        },
        grid: {
          color: chartColors.grid,
          borderColor: chartColors.grid,
        }
      }
    }
  };

  const doughnutOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: 'bottom',
        labels: {
          color: chartColors.text,
          font: {
            size: 12
          },
          padding: 20
        }
      },
      tooltip: {
        backgroundColor: isDark ? '#1F2937' : '#FFFFFF',
        titleColor: chartColors.text,
        bodyColor: chartColors.text,
        borderColor: chartColors.grid,
        borderWidth: 1,
        callbacks: {
          label: (context) => {
            const label = context.label || '';
            const value = context.parsed || 0;
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentage = ((value / total) * 100).toFixed(1);
            return `${label}: ${value} produtos (${percentage}%)`;
          }
        }
      }
    }
  };

  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
      {/* Gr√°fico de Valor por Categoria */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Valor em Estoque por Categoria
        </h3>
        <div className="h-80">
          <Bar data={categoryValueData} options={defaultOptions} />
        </div>
      </div>

      {/* An√°lise ABC */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          An√°lise ABC - Distribui√ß√£o de Produtos
        </h3>
        <div className="h-80">
          {abcAnalysisData && <Doughnut data={abcAnalysisData} options={doughnutOptions} />}
        </div>
      </div>

      {/* Top 10 Produtos por Valor */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg lg:col-span-2">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          Top 10 Produtos por Valor Total
        </h3>
        <div className="h-96">
          <Bar data={topProductsData} options={{
            ...defaultOptions,
            indexAxis: 'y',
            plugins: {
              ...defaultOptions.plugins,
              tooltip: {
                ...defaultOptions.plugins.tooltip,
                callbacks: {
                  label: (context) => {
                    const value = context.parsed.x;
                    return `Valor: R$ ${value.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`;
                  }
                }
              }
            },
            scales: {
              x: {
                ...defaultOptions.scales.x,
                ticks: {
                  ...defaultOptions.scales.x.ticks,
                  callback: (value) => `R$ ${value.toLocaleString('pt-BR')}`
                }
              },
              y: {
                ...defaultOptions.scales.y,
                ticks: {
                  ...defaultOptions.scales.y.ticks,
                  maxTicksLimit: 10
                }
              }
            }
          }} />
        </div>
      </div>

      {/* Comparativo quantidade vs Produtos por Categoria */}
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg lg:col-span-2">
        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
          quantidade vs N√∫mero de Produtos por Categoria
        </h3>
        <div className="h-80">
          <Bar data={categoryQuantityData} options={{
            ...defaultOptions,
            plugins: {
              ...defaultOptions.plugins,
              tooltip: {
                ...defaultOptions.plugins.tooltip,
                callbacks: {
                  label: (context) => {
                    const label = context.dataset.label;
                    const value = context.parsed.y;
                    if (label === 'quantidade em Estoque') {
                      return `${label}: ${value.toLocaleString('pt-BR')} unidades`;
                    }
                    return `${label}: ${value} produtos`;
                  }
                }
              }
            }
          }} />
        </div>
      </div>
    </div>
  );
};

export default AdvancedCharts;
import React, { useState, useMemo } from 'react';
import { 
  FaChartLine, 
  FaChartBar, 
  FaChartPie, 
  FaArrowUp, 
  FaArrowDown,
  FaExclamationTriangle,
  FaEye,
  FaCalendarAlt,
  FaBell
} from 'react-icons/fa';
import AdvancedCharts from './AdvancedCharts';
import PredictiveAlerts from './PredictiveAlerts';

const AnalyticsDashboard = ({ products = [], movements = [], categories = [] }) => {
  const [selectedPeriod, setSelectedPeriod] = useState('30');
  const [selectedCategory, setSelectedCategory] = useState('all');

  // An√°lise de dados em tempo real
  const analytics = useMemo(() => {
    if (!products.length) return null;

    // 1. An√°lise ABC - ClassificAÁ„o de produtos por valor
    const productsWithValue = products.map(product => {
      const totalValue = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + (quantity * (product.price || 0)), 0);
      
      return {
        ...product,
        totalValue,
        totalQuantity: Object.values(product.locations || {})
          .reduce((sum, quantity) => sum + quantity, 0)
      };
    }).sort((a, b) => b.totalValue - a.totalValue);

    const totalValue = productsWithValue.reduce((sum, p) => sum + p.totalValue, 0);
    let cumulativeValue = 0;
    
    const abcAnalysis = productsWithValue.map(product => {
      cumulativeValue += product.totalValue;
      const cumulativePercent = (cumulativeValue / totalValue) * 100;
      
      let classification = 'C';
      if (cumulativePercent <= 80) classification = 'A';
      else if (cumulativePercent <= 95) classification = 'B';
      
      return { ...product, classification, cumulativePercent };
    });

    // 2. Produtos em baixo estoque (cr√≠ticos)
    const lowStockProducts = products.filter(product => {
      const totalQuantity = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + quantity, 0);
      return totalQuantity <= (product.minStock || 5);
    });

    // 3. Produtos sem movimento (parados)
    const zeroStockProducts = products.filter(product => {
      const totalQuantity = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + quantity, 0);
      return totalQuantity === 0;
    });

    // 4. Top 10 produtos por valor
    const top10Products = abcAnalysis.slice(0, 10);

    // 5. An√°lise por categoria
    const categoryAnalysis = categories.map(category => {
      const categoryProducts = products.filter(p => p.categoryId === category.id);
      const totalValue = categoryProducts.reduce((sum, product) => {
        const productValue = Object.values(product.locations || {})
          .reduce((pSum, quantity) => pSum + (quantity * (product.price || 0)), 0);
        return sum + productValue;
      }, 0);
      
      const totalQuantity = categoryProducts.reduce((sum, product) => {
        const productQuantity = Object.values(product.locations || {})
          .reduce((pSum, quantity) => pSum + quantity, 0);
        return sum + productQuantity;
      }, 0);

      return {
        ...category,
        totalValue,
        totalQuantity,
        productCount: categoryProducts.length
      };
    }).sort((a, b) => b.totalValue - a.totalValue);

    // 6. KPIs principais
    const kpis = {
      totalProducts: products.length,
      totalValue: totalValue,
      avgProductValue: totalValue / products.length || 0,
      lowStockCount: lowStockProducts.length,
      zeroStockCount: zeroStockProducts.length,
      categoriesCount: categories.length
    };

    return {
      abcAnalysis,
      lowStockProducts,
      zeroStockProducts,
      top10Products,
      categoryAnalysis,
      kpis
    };
  }, [products, categories, selectedPeriod]);

  if (!analytics) {
    return (
      <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-lg">
        <div className="text-center text-gray-500 dark:text-gray-400">
          <FaChartLine className="mx-auto mb-4 text-4xl" />
          <p>Carregando dados anal√≠ticos...</p>
        </div>
      </div>
    );
  }

  const { abcAnalysis, lowStockProducts, top10Products, categoryAnalysis, kpis } = analytics;

  return (
    <div className="space-y-6">
      {/* Header com filtros */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <FaChartLine className="text-blue-600" />
            Analytics Dashboard
          </h2>
          <p className="text-gray-600 dark:text-gray-400">An√°lise avanÁada do seu estoque</p>
        </div>
        
        <div className="flex gap-3">
          <select 
            value={selectedCategory} 
            onChange={(e) => setSelectedCategory(e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          >
            <option value="all">Todas as Categorias</option>
            {categories.map(category => (
              <option key={category.id} value={category.id}>{category.name}</option>
            ))}
          </select>
          
          <select 
            value={selectedPeriod} 
            onChange={(e) => setSelectedPeriod(e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
          >
            <option value="7">⁄ltimos 7 dias</option>
            <option value="30">⁄ltimos 30 dias</option>
            <option value="90">⁄ltimos 90 dias</option>
            <option value="365">√öltimo ano</option>
          </select>
        </div>
      </div>

      {/* KPIs Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4">
        <div className="bg-gradient-to-r from-blue-500 to-blue-600 text-white p-4 rounded-lg shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-blue-100 text-sm">Total de Produtos</p>
              <p className="text-2xl font-bold">{kpis.totalProducts}</p>
            </div>
            <FaChartBar className="text-3xl text-blue-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-green-500 to-green-600 text-white p-4 rounded-lg shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-green-100 text-sm">Valor Total</p>
              <p className="text-2xl font-bold">R$ {kpis.totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <FaArrowUp className="text-3xl text-green-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-purple-500 to-purple-600 text-white p-4 rounded-lg shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-purple-100 text-sm">Valor M√©dio</p>
              <p className="text-2xl font-bold">R$ {kpis.avgProductValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</p>
            </div>
            <FaChartPie className="text-3xl text-purple-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-orange-500 to-orange-600 text-white p-4 rounded-lg shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-orange-100 text-sm">Estoque Baixo</p>
              <p className="text-2xl font-bold">{kpis.lowStockCount}</p>
            </div>
            <FaExclamationTriangle className="text-3xl text-orange-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-red-500 to-red-600 text-white p-4 rounded-lg shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-red-100 text-sm">Sem Estoque</p>
              <p className="text-2xl font-bold">{kpis.zeroStockCount}</p>
            </div>
            <FaArrowDown className="text-3xl text-red-200" />
          </div>
        </div>

        <div className="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white p-4 rounded-lg shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-indigo-100 text-sm">Categorias</p>
              <p className="text-2xl font-bold">{kpis.categoriesCount}</p>
            </div>
            <FaCalendarAlt className="text-3xl text-indigo-200" />
          </div>
        </div>
      </div>

      {/* An√°lise ABC e Top 10 */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* An√°lise ABC */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
            <FaChartPie className="text-blue-600" />
            An√°lise ABC (Top 10)
          </h3>
          <div className="space-y-3">
            {abcAnalysis.slice(0, 10).map((product, index) => (
              <div key={product.id} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div className="flex items-center gap-3">
                  <span className="w-8 h-8 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded-full flex items-center justify-center text-sm font-medium">
                    {index + 1}
                  </span>
                  <div>
                    <p className="font-medium text-gray-900 dark:text-white">{product.name}</p>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      Classe {product.classification}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="font-semibold text-gray-900 dark:text-white">
                    R$ {product.totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {product.totalQuantity} unid.
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* An√°lise por Categoria */}
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
            <FaChartBar className="text-green-600" />
            Performance por Categoria
          </h3>
          <div className="space-y-3">
            {categoryAnalysis.slice(0, 8).map((category) => (
              <div key={category.id} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div>
                  <p className="font-medium text-gray-900 dark:text-white">{category.name}</p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {category.productCount} produtos
                  </p>
                </div>
                <div className="text-right">
                  <p className="font-semibold text-gray-900 dark:text-white">
                    R$ {category.totalValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {category.totalQuantity} unid.
                  </p>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Alertas de Estoque */}
      {(lowStockProducts.length > 0 || analytics.zeroStockProducts.length > 0) && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Produtos com Estoque Baixo */}
          {lowStockProducts.length > 0 && (
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg border-l-4 border-orange-500">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                <FaExclamationTriangle className="text-orange-600" />
                Estoque Baixo ({lowStockProducts.length})
              </h3>
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {lowStockProducts.map((product) => {
                  const totalQuantity = Object.values(product.locations || {})
                    .reduce((sum, quantity) => sum + quantity, 0);
                  return (
                    <div key={product.id} className="flex items-center justify-between p-3 bg-orange-50 dark:bg-orange-900/20 rounded-lg">
                      <div>
                        <p className="font-medium text-gray-900 dark:text-white">{product.name}</p>
                        <p className="text-sm text-gray-500 dark:text-gray-400">
                          M√≠n: {product.minStock || 5} unid.
                        </p>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold text-orange-600 dark:text-orange-400">
                          {totalQuantity} unid.
                        </p>
                        <FaArrowDown className="text-orange-600 ml-auto" />
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Produtos Sem Estoque */}
          {analytics.zeroStockProducts.length > 0 && (
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg border-l-4 border-red-500">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
                <FaArrowDown className="text-red-600" />
                Sem Estoque ({analytics.zeroStockProducts.length})
              </h3>
              <div className="space-y-3 max-h-64 overflow-y-auto">
                {analytics.zeroStockProducts.map((product) => (
                  <div key={product.id} className="flex items-center justify-between p-3 bg-red-50 dark:bg-red-900/20 rounded-lg">
                    <div>
                      <p className="font-medium text-gray-900 dark:text-white">{product.name}</p>
                      <p className="text-sm text-gray-500 dark:text-gray-400">
                        ReposiÁ„o urgente
                      </p>
                    </div>
                    <div className="text-right">
                      <p className="font-semibold text-red-600 dark:text-red-400">
                        0 unid.
                      </p>
                      <FaExclamationTriangle className="text-red-600 ml-auto" />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Alertas Preditivos */}
      <div className="mt-8">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
          <FaBell className="text-yellow-600" />
          Alertas Inteligentes & Previsıes
        </h3>
        <PredictiveAlerts products={products} movements={movements} />
      </div>

      {/* Gr√°ficos AvanÁados */}
      <div className="mt-8">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-6 flex items-center gap-2">
          <FaChartLine className="text-blue-600" />
          An√°lise Visual avanÁada
        </h3>
        <AdvancedCharts products={products} categories={categories} />
      </div>
    </div>
  );
};

export default AnalyticsDashboard;
import React, { useState, useEffect } from 'react';
import { 
  FaClock, 
  FaExclamationTriangle, 
  FaUser,
  FaCalendarAlt,
  FaBoxes,
  FaCheck,
  FaTimes,
  FaFilter,
  FaSearch
} from 'react-icons/fa';
import { useReplenishmentManagement } from '../hooks/useReplenishmentManagement';
import { useAuth } from '../context/AuthContext';
import { hasPermission } from '../utils/permissions';
import { PERMISSIONS } from '../utils/permissions';
import { 
  REPLENISHMENT_STATUS, 
  REPLENISHMENT_PRIORITY,
  STATUS_DESCRIPTIONS 
} from '../utils/replenishmentPermissions';
import ReplenishmentApprovalModal from './ReplenishmentApprovalModal';

const ApprovalDashboard = () => {
  const { userData } = useAuth();
  const { 
    requests, 
    loading, 
    fetchReplenishmentRequests,
    approveRequest,
    rejectRequest 
  } = useReplenishmentManagement();
  
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [showApprovalModal, setShowApprovalModal] = useState(false);
  const [filters, setFilters] = useState({
    priority: '',
    search: '',
    dateRange: 'all'
  });

  // Verificar se usu√°rio pode aprovar
  const canApprove = hasPermission(userData?.role, PERMISSIONS.APPROVE_REPLENISHMENT);

  useEffect(() => {
    if (canApprove) {
      fetchReplenishmentRequests({ status: REPLENISHMENT_STATUS.PENDING });
    }
  }, [canApprove, fetchReplenishmentRequests]);

  // Filtrar apenas solicitaÁıes pendentes
  const pendingRequests = requests.filter(request => 
    request.status === REPLENISHMENT_STATUS.PENDING
  );

  // Aplicar filtros
  const filteredRequests = pendingRequests.filter(request => {
    let matches = true;

    // Filtro por prioridade
    if (filters.priority && request.priority !== filters.priority) {
      matches = false;
    }

    // Filtro por busca
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      matches = matches && (
        request.title?.toLowerCase().includes(searchLower) ||
        request.requestedByName?.toLowerCase().includes(searchLower) ||
        request.description?.toLowerCase().includes(searchLower)
      );
    }

    // Filtro por data
    if (filters.dateRange !== 'all' && request.requestDate) {
      const requestDate = request.requestDate.toDate();
      const now = new Date();
      const daysDiff = Math.floor((now - requestDate) / (1000 * 60 * 60 * 24));

      switch (filters.dateRange) {
        case 'today':
          matches = matches && daysDiff === 0;
          break;
        case 'week':
          matches = matches && daysDiff <= 7;
          break;
        case 'month':
          matches = matches && daysDiff <= 30;
          break;
        default:
          break;
      }
    }

    return matches;
  });

  // Estat√≠sticas r√°pidas
  const stats = {
    total: pendingRequests.length,
    critical: pendingRequests.filter(r => r.priority === REPLENISHMENT_PRIORITY.CRITICAL).length,
    high: pendingRequests.filter(r => r.priority === REPLENISHMENT_PRIORITY.HIGH).length,
    oldRequests: pendingRequests.filter(r => {
      if (!r.requestDate) return false;
      const daysDiff = Math.floor((new Date() - r.requestDate.toDate()) / (1000 * 60 * 60 * 24));
      return daysDiff > 3;
    }).length
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case REPLENISHMENT_PRIORITY.CRITICAL:
        return 'bg-red-100 text-red-800 border-red-200';
      case REPLENISHMENT_PRIORITY.HIGH:
        return 'bg-orange-100 text-orange-800 border-orange-200';
      case REPLENISHMENT_PRIORITY.MEDIUM:
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case REPLENISHMENT_PRIORITY.LOW:
        return 'bg-green-100 text-green-800 border-green-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    return timestamp.toDate ? timestamp.toDate().toLocaleDateString('pt-BR') : 'N/A';
  };

  const formatDateWithTime = (timestamp) => {
    if (!timestamp) return 'N/A';
    const date = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    return date.toLocaleString('pt-BR');
  };

  const getDaysAgo = (timestamp) => {
    if (!timestamp) return 0;
    const requestDate = timestamp.toDate ? timestamp.toDate() : new Date(timestamp);
    const now = new Date();
    return Math.floor((now - requestDate) / (1000 * 60 * 60 * 24));
  };

  const handleViewRequest = (request) => {
    setSelectedRequest(request);
    setShowApprovalModal(true);
  };

  const handleApprovalSuccess = () => {
    fetchReplenishmentRequests();
    setShowApprovalModal(false);
    setSelectedRequest(null);
  };

  // AÁ„o r√°pida de aprovAÁ„o
  const handleQuickApprove = async (request, e) => {
    e.stopPropagation();
    try {
      await approveRequest(request.id, {
        notes: 'AprovAÁ„o r√°pida via dashboard'
      });
      await fetchReplenishmentRequests();
    } catch (error) {
      console.error('Erro na aprovAÁ„o r√°pida:', error);
    }
  };

  if (!canApprove) {
    return (
      <div className="text-center py-12">
        <FaClock size={48} className="mx-auto text-gray-400 mb-4" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">
          Acesso Restrito
        </h3>
        <p className="text-gray-500">
          VocÍ n„o tem permiss„o para aprovar solicitaÁıes
        </p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Cards de Estat√≠sticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white p-4 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Pendentes</p>
              <p className="text-2xl font-bold text-yellow-600">{stats.total}</p>
            </div>
            <FaClock className="text-yellow-500" size={20} />
          </div>
        </div>
        
        <div className="bg-white p-4 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Cr√≠ticas</p>
              <p className="text-2xl font-bold text-red-600">{stats.critical}</p>
            </div>
            <FaExclamationTriangle className="text-red-500" size={20} />
          </div>
        </div>
        
        <div className="bg-white p-4 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Alta Prioridade</p>
              <p className="text-2xl font-bold text-orange-600">{stats.high}</p>
            </div>
            <FaExclamationTriangle className="text-orange-500" size={20} />
          </div>
        </div>
        
        <div className="bg-white p-4 rounded-lg shadow-sm border">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Antigas (+3 dias)</p>
              <p className="text-2xl font-bold text-gray-600">{stats.oldRequests}</p>
            </div>
            <FaCalendarAlt className="text-gray-500" size={20} />
          </div>
        </div>
      </div>

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm border">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              <FaSearch className="inline mr-1" size={12} />
              Buscar
            </label>
            <input
              type="text"
              value={filters.search}
              onChange={(e) => setFilters(prev => ({ ...prev, search: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="T√≠tulo, solicitante..."
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Prioridade
            </label>
            <select
              value={filters.priority}
              onChange={(e) => setFilters(prev => ({ ...prev, priority: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">Todas as prioridades</option>
              <option value={REPLENISHMENT_PRIORITY.CRITICAL}>Cr√≠tica</option>
              <option value={REPLENISHMENT_PRIORITY.HIGH}>Alta</option>
              <option value={REPLENISHMENT_PRIORITY.MEDIUM}>M√©dia</option>
              <option value={REPLENISHMENT_PRIORITY.LOW}>Baixa</option>
            </select>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Per√≠odo
            </label>
            <select
              value={filters.dateRange}
              onChange={(e) => setFilters(prev => ({ ...prev, dateRange: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Todos os per√≠odos</option>
              <option value="today">Hoje</option>
              <option value="week">√öltima semana</option>
              <option value="month">√öltimo m√™s</option>
            </select>
          </div>
        </div>
      </div>

      {/* Lista de solicitaÁıes Pendentes */}
      <div className="bg-white rounded-lg shadow-sm border">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">
            solicitaÁıes Aguardando AprovAÁ„o ({filteredRequests.length})
          </h3>
        </div>
        
        <div className="divide-y divide-gray-200">
          {filteredRequests.map((request) => {
            const daysAgo = getDaysAgo(request.requestDate);
            const isOld = daysAgo > 3;
            
            return (
              <div
                key={request.id}
                className="p-4 hover:bg-gray-50 cursor-pointer transition-colors"
                onClick={() => handleViewRequest(request)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-3 mb-2">
                      <h4 className="text-lg font-medium text-gray-900 truncate">
                        {request.title}
                      </h4>
                      
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border ${getPriorityColor(request.priority)}`}>
                        {request.priority === REPLENISHMENT_PRIORITY.CRITICAL && <FaExclamationTriangle className="mr-1" />}
                        {request.priority?.charAt(0).toUpperCase() + request.priority?.slice(1)}
                      </span>
                      
                      {isOld && (
                        <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 border border-red-200">
                          <FaClock className="mr-1" />
                          {daysAgo} dias
                        </span>
                      )}
                    </div>
                    
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600 mb-2">
                      <div className="flex items-center space-x-2">
                        <FaUser className="text-gray-400" size={14} />
                        <span>{request.requestedByName}</span>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <FaCalendarAlt className="text-gray-400" size={14} />
                        <span>{formatDate(request.requestDate)}</span>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        <FaBoxes className="text-gray-400" size={14} />
                        <span>{request.items?.length || 0} produtos</span>
                      </div>
                    </div>
                    
                    {request.description && (
                      <p className="text-gray-700 text-sm line-clamp-2 mb-2">
                        {request.description}
                      </p>
                    )}
                    
                    {/* Preview dos itens */}
                    <div className="flex flex-wrap gap-1">
                      {request.items?.slice(0, 3).map((item, index) => (
                        <span
                          key={index}
                          className="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-100 text-gray-700"
                        >
                          {item.productName} ({item.requestedQuantity})
                        </span>
                      ))}
                      {request.items?.length > 3 && (
                        <span className="inline-flex items-center px-2 py-1 rounded text-xs bg-gray-200 text-gray-600">
                          +{request.items.length - 3} mais
                        </span>
                      )}
                    </div>
                  </div>
                  
                  {/* AÁıes */}
                  <div className="flex items-center space-x-2 ml-4">
                    <button
                      onClick={(e) => handleQuickApprove(request, e)}
                      className="p-2 text-green-600 hover:bg-green-100 rounded-lg transition-colors"
                      title="AprovAÁ„o r√°pida"
                    >
                      <FaCheck size={16} />
                    </button>
                    
                    <button
                      onClick={() => handleViewRequest(request)}
                      className="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors"
                    >
                      Analisar
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
          
          {filteredRequests.length === 0 && (
            <div className="text-center py-12">
              <FaCheck size={48} className="mx-auto text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                Nenhuma solicitAÁ„o pendente
              </h3>
              <p className="text-gray-500">
                {pendingRequests.length === 0 
                  ? "n„o h√° solicitaÁıes aguardando aprovAÁ„o" 
                  : "Nenhuma solicitAÁ„o corresponde aos filtros aplicados"
                }
              </p>
            </div>
          )}
        </div>
      </div>

      {/* Modal de AprovAÁ„o */}
      <ReplenishmentApprovalModal
        isOpen={showApprovalModal}
        onClose={() => {
          setShowApprovalModal(false);
          setSelectedRequest(null);
        }}
        request={selectedRequest}
        onSuccess={handleApprovalSuccess}
      />
    </div>
  );
};

export default ApprovalDashboard;
import React from 'react';
import { useLocation, Link } from 'react-router-dom';
import { FaHome, FaChevronRight } from 'react-icons/fa';

const Breadcrumbs = () => {
    const location = useLocation();
    const pathnames = location.pathname.split('/').filter(x => x);

    const routeNames = {
        'dashboard': 'Dashboard',
        'stock': 'Estoque',
        'registers': 'Cadastros',
        'movements': 'MovimentaÁıes',
        'reports': 'RelatÛrios',
        'settings': 'ConfiguraÁıes',
        'counting': 'Contagem',
        'audit': 'Auditoria'
    };

    if (pathnames.length === 0) return null;

    return (
        <nav className="flex items-center space-x-2 text-sm text-gray-600 mb-4">
            <Link to="/" className="flex items-center hover:text-blue-600 transition-colors">
                <FaHome className="w-4 h-4" />
            </Link>
            
            {pathnames.map((pathname, index) => {
                const routeTo = `/${pathnames.slice(0, index + 1).join('/')}`;
                const isLast = index === pathnames.length - 1;
                const displayName = routeNames[pathname] || pathname;

                return (
                    <React.Fragment key={pathname}>
                        <FaChevronRight className="w-3 h-3 text-gray-400" />
                        {isLast ? (
                            <span className="text-gray-900 font-medium">{displayName}</span>
                        ) : (
                            <Link to={routeTo} className="hover:text-blue-600 transition-colors">
                                {displayName}
                            </Link>
                        )}
                    </React.Fragment>
                );
            })}
        </nav>
    );
};

export default Breadcrumbs;
import React, { useState } from 'react';
import toast from 'react-hot-toast';
import { useAuth } from '../context/AuthContext';
import { db } from '../services/firebase';
import { doc, deleteDoc } from 'firebase/firestore';
import useFirestore from '../hooks/useFirestore';
import CategoryFormModal from './CategoryFormModal';
import SkeletonLoader from './SkeletonLoader';
import { FaEdit, FaTrash, FaPlus } from 'react-icons/fa';

export default function CategoriesManager() {
    const { currentUser, userData } = useAuth();
    const { docs: categories, loading } = useFirestore('categories', { field: 'name', direction: 'asc' });
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [categoryToEdit, setCategoryToEdit] = useState(null);

    // Permite ediÁ„o para usu·rios autenticados (pode ser ajustado conforme necess·rio)
    const canEdit = currentUser && (userData?.role === 'admin' || userData?.role === 'editor' || !userData?.role);

    const handleOpenModal = (category = null) => {
        setCategoryToEdit(category);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setCategoryToEdit(null);
        setIsModalOpen(false);
    };

    const handleDeleteCategory = async (categoryId) => {
        if (window.confirm('Tem certeza que deseja excluir esta categoria?')) {
            const promise = deleteDoc(doc(db, 'categories', categoryId));
            toast.promise(promise, {
                loading: 'Excluindo categoria...',
                success: 'Categoria excluÌda com sucesso!',
                error: 'Falha ao excluir a categoria.',
            });
        }
    };

    return (
        <>
            <div className="bg-white p-6 rounded-lg shadow-md">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-4">
                    <h3 className="text-xl font-bold text-gray-800">Cadastro de Categorias</h3>
                    {canEdit && (
                        <button 
                            onClick={() => handleOpenModal()} 
                            className="flex items-center justify-center bg-blue-500 text-white font-semibold py-3 px-6 sm:py-4 sm:px-8 rounded-lg hover:bg-blue-600 transition duration-300 min-h-[44px] sm:min-h-[48px] text-sm sm:text-base w-full sm:w-auto"
                        >
                            <FaPlus className="mr-2 w-4 h-4 sm:w-5 sm:h-5" />
                            Nova Categoria
                        </button>
                    )}
                </div>
                
                <div className="mt-4">
                    {loading ? (
                        <SkeletonLoader count={3} />
                    ) : (
                        <ul className="space-y-3">
                            {categories && categories.length > 0 ? (
                                categories.map((cat) => (
                                    <li key={cat.id} className="flex items-center justify-between p-3 even:bg-gray-50 rounded-md">
                                        <span className="text-gray-800 font-medium">{cat.name}</span>
                                        {canEdit && (
                                            <div className="flex gap-3">
                                                <button onClick={() => handleOpenModal(cat)} className="text-blue-500 hover:text-blue-700 transition-colors">
                                                    <FaEdit size={16} />
                                                </button>
                                                <button onClick={() => handleDeleteCategory(cat.id)} className="text-red-500 hover:text-red-700 transition-colors">
                                                    <FaTrash size={16} />
                                                </button>
                                            </div>
                                        )}
                                    </li>
                                ))
                            ) : (
                                <p className="text-gray-500 text-center py-4">Nenhuma categoria encontrada.</p>
                            )}
                        </ul>
                    )}
                </div>
            </div>

            {canEdit && (
                <CategoryFormModal 
                    isOpen={isModalOpen} 
                    onClose={handleCloseModal} 
                    categoryToEdit={categoryToEdit} 
                />
            )}
        </>
    );
}
import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, addDoc, doc, updateDoc } from 'firebase/firestore';
import toast from 'react-hot-toast';


export default function CategoryFormModal({ isOpen, onClose, categoryToEdit }) {
    const [name, setName] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const isEditing = !!categoryToEdit;

    useEffect(() => {
        if (isEditing) {
            setName(categoryToEdit.name || '');
        } else {
            setName('');
        }
        // Limpa erros quando o modal abre/fecha
        setError('');
    }, [categoryToEdit, isOpen]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!name.trim()) {
            setError('O nome da categoria n„o pode estar vazio.');
            return;
        }
        setLoading(true);
        setError('');

        const toastId = toast.loading(isEditing ? 'Atualizando categoria...' : 'Criando categoria...');

        try {
            if (isEditing) {
                const categoryRef = doc(db, 'categories', categoryToEdit.id);
                await updateDoc(categoryRef, { name: name.trim() });
                toast.success('Categoria atualizada com sucesso!', { id: toastId });
            } else {
                await addDoc(collection(db, 'categories'), { 
                    name: name.trim(),
                    createdAt: new Date()
                });
                toast.success('Categoria criada com sucesso!', { id: toastId });
            }
            setName(''); // Limpa o formul√°rio
            onClose();
        } catch (err) {
            console.error('Error saving category:', err);
            console.error('Error details:', {
                code: err.code,
                message: err.message,
                stack: err.stack
            });
            
            let errorMessage = 'Falha ao salvar a categoria.';
            
            // Mensagens de erro mais espec√≠ficas
            if (err.code === 'permission-denied') {
                errorMessage = 'VocÍ n„o tem permiss„o para salvar categorias. Verifique se est√° autenticado.';
            } else if (err.code === 'unavailable') {
                errorMessage = 'Servi√ßo temporariamente indispon√≠vel. Tente novamente.';
            } else if (err.code === 'invalid-argument') {
                errorMessage = 'Dados inv√°lidos fornecidos.';
            }
            
            setError(errorMessage);
            toast.error(errorMessage, { id: toastId });
        }
        setLoading(false);
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
                <h2 className="text-2xl font-bold mb-6">{isEditing ? 'Editar Categoria' : 'Adicionar Nova Categoria'}</h2>
                <form onSubmit={handleSubmit} className="space-y-4">
                    {error && <p className="bg-red-100 text-red-700 p-3 rounded-lg">{error}</p>}
                    
                    <div>
                        <label htmlFor="category-name" className="block text-sm font-medium text-gray-700">Nome da Categoria</label>
                        <input 
                            type="text" 
                            id="category-name" 
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            required 
                            className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Eletr√¥nicos"
                            autoFocus
                        />
                    </div>

                    <div className="flex justify-end pt-4 space-x-4">
                        <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300">Cancelar</button>
                        <button type="submit" disabled={loading} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300 transition duration-300">
                            {loading ? 'Salvando...' : 'Salvar'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}
import React, { useState } from 'react';

const DeleteConfirmationModal = ({ isOpen, onClose, onConfirm, productName }) => {
    const [isDeleting, setIsDeleting] = useState(false);

    const handleConfirm = async () => {
        setIsDeleting(true);
        try {
            await onConfirm();
        } finally {
            setIsDeleting(false);
            onClose(); // Close modal after action
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
                <h2 className="text-2xl font-bold mb-4">Confirmar Exclus„o</h2>
                <p className="text-gray-700 mb-6">
                    Tem certeza que deseja excluir o produto <span className="font-bold">{productName}</span>? Esta AÁ„o n„o pode ser desfeita.
                </p>
                <div className="flex justify-end space-x-4">
                    <button
                        type="button"
                        onClick={onClose}
                        className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300"
                    >
                        Cancelar
                    </button>
                    <button
                        type="button"
                        onClick={handleConfirm}
                        disabled={isDeleting}
                        className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300 disabled:bg-red-300"
                    >
                        {isDeleting ? 'Excluindo...' : 'Excluir'}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default DeleteConfirmationModal;
import React from 'react';
import { FaExclamationTriangle, FaTimes, FaTrash } from 'react-icons/fa';

const DeleteUserModal = ({ isOpen, onClose, user, onConfirm, isDeleting }) => {
  if (!isOpen || !user) return null;

  const handleConfirm = () => {
    onConfirm(user.id);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div className="flex items-center space-x-3">
            <div className="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
              <FaExclamationTriangle className="text-red-600" />
            </div>
            <div>
              <h3 className="text-lg font-medium text-gray-900">Confirmar Exclus„o</h3>
              <p className="text-sm text-gray-500">Esta AÁ„o n„o pode ser desfeita</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
            disabled={isDeleting}
          >
            <FaTimes />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          <div className="mb-4">
            <p className="text-gray-700 mb-4">
              Tem certeza que deseja excluir o usu√°rio:
            </p>
            
            <div className="bg-gray-50 p-4 rounded-lg border">
              <div className="flex items-center space-x-3">
                <div className="flex-shrink-0 w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                  <span className="text-sm font-medium text-gray-600">
                    {user.displayName?.charAt(0) || user.email?.charAt(0) || '?'}
                  </span>
                </div>
                <div>
                  <p className="font-medium text-gray-900">
                    {user.displayName || 'Nome n„o definido'}
                  </p>
                  <p className="text-sm text-gray-500">{user.email}</p>
                  <p className="text-xs text-gray-400">
                    Role: {user.role?.charAt(0).toUpperCase() + user.role?.slice(1)}
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div className="flex items-start space-x-2">
              <FaExclamationTriangle className="text-red-500 mt-0.5 flex-shrink-0" />
              <div className="text-sm text-red-700">
                <p className="font-medium mb-1">Aten√ß√£o:</p>
                <ul className="list-disc list-inside space-y-1">
                  <li>O usu√°rio ser√° permanentemente removido do sistema</li>
                  <li>Todos os dados associados ser√£o perdidos</li>
                  <li>Esta AÁ„o n„o pode ser desfeita</li>
                </ul>
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200">
          <button
            onClick={onClose}
            disabled={isDeleting}
            className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 transition-colors"
          >
            Cancelar
          </button>
          <button
            onClick={handleConfirm}
            disabled={isDeleting}
            className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50 transition-colors flex items-center space-x-2"
          >
            <FaTrash className="text-sm" />
            <span>{isDeleting ? 'Excluindo...' : 'Excluir Usu√°rio'}</span>
          </button>
        </div>
      </div>
    </div>
  );
};

export default DeleteUserModal;
import React from 'react';
import { useAuth } from '../context/AuthContext';
import { db } from '../services/firebase';
import { collection, addDoc } from 'firebase/firestore';
import toast from 'react-hot-toast';

const DiagnosticPanel = () => {
    const { currentUser, userData } = useAuth();

    const testFirestoreConnection = async () => {
        const toastId = toast.loading('Testando conex√£o com Firestore...');
        try {
            const testDoc = await addDoc(collection(db, 'test'), {
                message: 'Teste de conex√£o',
                timestamp: new Date(),
                user: currentUser?.uid || 'anonymous'
            });
            toast.success(`Conex√£o OK! Doc ID: ${testDoc.id}`, { id: toastId });
            console.log('Teste bem-sucedido:', testDoc.id);
        } catch (error) {
            toast.error(`Erro: ${error.message}`, { id: toastId });
            console.error('Erro no teste:', error);
        }
    };

    return (
        <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
            <div className="flex">
                <div className="ml-3">
                    <h3 className="text-sm font-medium text-yellow-800">
                        Painel de Diagn√≥stico
                    </h3>
                    <div className="mt-2 text-sm text-yellow-700 space-y-1">
                        <p><strong>Status de AutenticAÁ„o:</strong> {currentUser ? '‚úÖ Autenticado' : '‚ùå n„o autenticado'}</p>
                        {currentUser && (
                            <>
                                <p><strong>UID:</strong> {currentUser.uid}</p>
                                <p><strong>Email:</strong> {currentUser.email}</p>
                                <p><strong>Role:</strong> {userData?.role || 'n„o definido'}</p>
                            </>
                        )}
                        <button 
                            onClick={testFirestoreConnection}
                            className="mt-2 bg-yellow-600 text-white px-3 py-1 rounded text-xs hover:bg-yellow-700"
                        >
                            Testar Conex√£o Firestore
                        </button>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default DiagnosticPanel;
import React, { useState, useEffect } from 'react';
import { 
  FaSearch, 
  FaBox, 
  FaMapMarkerAlt, 
  FaCalendarAlt, 
  FaUser, 
  FaCheckCircle, 
  FaClock, 
  FaExclamationTriangle, 
  FaPlay, 
  FaEye, 
  FaFileAlt 
} from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';
import { useReplenishmentManagement } from '../hooks/useReplenishmentManagement';
import { hasPermission } from '../utils/permissions';
import { REPLENISHMENT_PERMISSIONS, REPLENISHMENT_STATUS, STATUS_DESCRIPTIONS, STATUS_COLORS } from '../utils/replenishmentPermissions';
import ReplenishmentExecutionModal from './ReplenishmentExecutionModal';
import SkeletonLoader from './SkeletonLoader';

const ExecutionDashboard = () => {
  const { user } = useAuth();
  const { requests, loading } = useReplenishmentManagement();
  
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [selectedRequest, setSelectedRequest] = useState(null);
  const [executionModalOpen, setExecutionModalOpen] = useState(false);
  const [viewModalOpen, setViewModalOpen] = useState(false);

  // Filtrar apenas reposi√ß√µes aprovadas ou em execuÁ„o
  const executableRequests = requests.filter(request => 
    [REPLENISHMENT_STATUS.APPROVED, REPLENISHMENT_STATUS.IN_PROGRESS].includes(request.status)
  );

  // Aplicar filtros
  const filteredRequests = executableRequests.filter(request => {
    const matchesSearch = 
      request.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.requestedBy.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.items.some(item => 
        item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.sku.toLowerCase().includes(searchTerm.toLowerCase())
      );

    const matchesStatus = statusFilter === 'all' || request.status === statusFilter;

    return matchesSearch && matchesStatus;
  });

  // Estat√≠sticas
  const stats = {
    total: executableRequests.length,
    approved: executableRequests.filter(r => r.status === REPLENISHMENT_STATUS.APPROVED).length,
    inProgress: executableRequests.filter(r => r.status === REPLENISHMENT_STATUS.IN_PROGRESS).length,
    totalValue: executableRequests.reduce((sum, request) => 
      sum + request.items.reduce((itemSum, item) => 
        itemSum + (item.quantity * (item.unitCost || 0)), 0
      ), 0
    )
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case REPLENISHMENT_STATUS.APPROVED:
        return <FaCheckCircle className="w-4 h-4" />;
      case REPLENISHMENT_STATUS.IN_PROGRESS:
        return <FaClock className="w-4 h-4" />;
      default:
        return <FaExclamationTriangle className="w-4 h-4" />;
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      [REPLENISHMENT_STATUS.APPROVED]: 'bg-green-100 text-green-800',
      [REPLENISHMENT_STATUS.IN_PROGRESS]: 'bg-blue-100 text-blue-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  const handleExecute = (request) => {
    setSelectedRequest(request);
    setExecutionModalOpen(true);
  };

  const handleView = (request) => {
    setSelectedRequest(request);
    setViewModalOpen(true);
  };

  const canExecute = hasPermission(user, REPLENISHMENT_PERMISSIONS.EXECUTE_REPLENISHMENT);

  if (loading) {
    return <SkeletonLoader />;
  }

  return (
    <div className="p-6">
      {/* CabeÁalho */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          execuÁ„o de Reposi√ß√µes
        </h2>
        <p className="text-gray-600">
          Execute reposi√ß√µes aprovadas selecionando itens e destinos
        </p>
      </div>

      {/* Estat√≠sticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center">
            <FaBox className="w-8 h-8 text-blue-600 mr-3" />
            <div>
              <p className="text-sm text-gray-600">Total para execuÁ„o</p>
              <p className="text-2xl font-bold text-blue-600">{stats.total}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center">
            <FaCheckCircle className="w-8 h-8 text-green-600 mr-3" />
            <div>
              <p className="text-sm text-gray-600">Aprovadas</p>
              <p className="text-2xl font-bold text-green-600">{stats.approved}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center">
            <FaClock className="w-8 h-8 text-blue-600 mr-3" />
            <div>
              <p className="text-sm text-gray-600">Em execuÁ„o</p>
              <p className="text-2xl font-bold text-blue-600">{stats.inProgress}</p>
            </div>
          </div>
        </div>

        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="flex items-center">
            <FaFileAlt className="w-8 h-8 text-purple-600 mr-3" />
            <div>
              <p className="text-sm text-gray-600">Valor Total</p>
              <p className="text-2xl font-bold text-purple-600">
                R$ {stats.totalValue.toFixed(2)}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm border mb-6">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Buscar por ID, solicitante ou produto..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          
          <div className="md:w-48">
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Todos os Status</option>
              <option value={REPLENISHMENT_STATUS.APPROVED}>Aprovadas</option>
              <option value={REPLENISHMENT_STATUS.IN_PROGRESS}>Em execuÁ„o</option>
            </select>
          </div>
        </div>
      </div>

      {/* Lista de Reposi√ß√µes */}
      <div className="bg-white rounded-lg shadow-sm border">
        {filteredRequests.length === 0 ? (
          <div className="p-8 text-center">
            <FaBox className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Nenhuma ReposiÁ„o para execuÁ„o
            </h3>
            <p className="text-gray-600">
              {executableRequests.length === 0 
                ? 'n„o h√° reposi√ß√µes aprovadas no momento.'
                : 'Nenhuma ReposiÁ„o corresponde aos filtros aplicados.'
              }
            </p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    SolicitAÁ„o
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Itens
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Valor
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Data
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    AÁıes
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredRequests.map((request) => {
                  const totalValue = request.items.reduce((sum, item) => 
                    sum + (item.quantity * (item.unitCost || 0)), 0
                  );

                  return (
                    <tr key={request.id} className="hover:bg-gray-50">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div className="text-sm font-medium text-gray-900">
                            #{request.id.slice(-8)}
                          </div>
                          <div className="text-sm text-gray-500 flex items-center">
                            <FaUser className="w-3 h-3 mr-1" />
                            {request.requestedBy}
                          </div>
                        </div>
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900">
                          {request.items.length} {request.items.length === 1 ? 'item' : 'itens'}
                        </div>
                        <div className="text-sm text-gray-500">
                          {request.items.slice(0, 2).map(item => item.name).join(', ')}
                          {request.items.length > 2 && ` +${request.items.length - 2}`}
                        </div>
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(request.status)}`}>
                          {getStatusIcon(request.status)}
                          <span className="ml-1">{STATUS_DESCRIPTIONS[request.status]}</span>
                        </span>
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        R$ {totalValue.toFixed(2)}
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="text-sm text-gray-900 flex items-center">
                          <FaCalendarAlt className="w-3 h-3 mr-1" />
                          {new Date(request.createdAt).toLocaleDateString()}
                        </div>
                      </td>
                      
                      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <div className="flex items-center justify-end space-x-2">
                          <button
                            onClick={() => handleView(request)}
                            className="text-blue-600 hover:text-blue-900 p-1"
                            title="Ver detalhes"
                          >
                            <FaEye className="w-4 h-4" />
                          </button>
                          
                          {canExecute && request.status === REPLENISHMENT_STATUS.APPROVED && (
                            <button
                              onClick={() => handleExecute(request)}
                              className="bg-green-600 text-white px-3 py-1 rounded text-xs hover:bg-green-700 flex items-center"
                            >
                              <FaPlay className="w-3 h-3 mr-1" />
                              Executar
                            </button>
                          )}
                          
                          {canExecute && request.status === REPLENISHMENT_STATUS.IN_PROGRESS && (
                            <button
                              onClick={() => handleExecute(request)}
                              className="bg-blue-600 text-white px-3 py-1 rounded text-xs hover:bg-blue-700 flex items-center"
                            >
                              <FaClock className="w-3 h-3 mr-1" />
                              Continuar
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modais */}
      {executionModalOpen && (
        <ReplenishmentExecutionModal
          isOpen={executionModalOpen}
          onClose={() => {
            setExecutionModalOpen(false);
            setSelectedRequest(null);
          }}
          request={selectedRequest}
        />
      )}
    </div>
  );
};

export default ExecutionDashboard;
import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaSearch, FaTimes, FaBox, FaTags, FaMapMarkerAlt } from 'react-icons/fa';
import useFirestore from '../hooks/useFirestore';

const GlobalSearch = () => {
    const [query, setQuery] = useState('');
    const [isOpen, setIsOpen] = useState(false);
    const [results, setResults] = useState([]);
    const [selectedIndex, setSelectedIndex] = useState(-1);
    const inputRef = useRef(null);
    const navigate = useNavigate();

    const { docs: products } = useFirestore('products');
    const { docs: categories } = useFirestore('categories');
    const { docs: locations } = useFirestore('locations');

    useEffect(() => {
        const handleKeyDown = (event) => {
            if (event.ctrlKey && event.key === 'k') {
                event.preventDefault();
                setIsOpen(true);
                setTimeout(() => inputRef.current?.focus(), 100);
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, []);

    useEffect(() => {
        if (!query.trim()) {
            setResults([]);
            return;
        }

        const searchResults = [];
        const lowerQuery = query.toLowerCase();

        // Buscar produtos
        products?.forEach(product => {
            if (product.name.toLowerCase().includes(lowerQuery)) {
                searchResults.push({
                    type: 'product',
                    title: product.name,
                    subtitle: `Produto ‚Ä¢ Estoque: ${product.totalQuantity || 0}`,
                    icon: FaBox,
                    action: () => navigate('/stock'),
                    data: product
                });
            }
        });

        // Buscar categorias
        categories?.forEach(category => {
            if (category.name.toLowerCase().includes(lowerQuery)) {
                searchResults.push({
                    type: 'category',
                    title: category.name,
                    subtitle: 'Categoria',
                    icon: FaTags,
                    action: () => navigate('/registers'),
                    data: category
                });
            }
        });

        // Buscar locais
        locations?.forEach(location => {
            if (location.name.toLowerCase().includes(lowerQuery)) {
                searchResults.push({
                    type: 'location',
                    title: location.name,
                    subtitle: 'Local',
                    icon: FaMapMarkerAlt,
                    action: () => navigate('/registers'),
                    data: location
                });
            }
        });

        setResults(searchResults.slice(0, 8)); // Limitar a 8 resultados
        setSelectedIndex(-1);
    }, [query, products, categories, locations, navigate]);

    const handleKeyDown = (event) => {
        switch (event.key) {
            case 'ArrowDown':
                event.preventDefault();
                setSelectedIndex(prev => (prev < results.length - 1 ? prev + 1 : prev));
                break;
            case 'ArrowUp':
                event.preventDefault();
                setSelectedIndex(prev => (prev > 0 ? prev - 1 : -1));
                break;
            case 'Enter':
                event.preventDefault();
                if (selectedIndex >= 0 && results[selectedIndex]) {
                    results[selectedIndex].action();
                    handleClose();
                }
                break;
            case 'Escape':
                handleClose();
                break;
        }
    };

    const handleClose = () => {
        setIsOpen(false);
        setQuery('');
        setResults([]);
        setSelectedIndex(-1);
    };

    const handleResultClick = (result) => {
        result.action();
        handleClose();
    };

    if (!isOpen) {
        return (
            <button
                onClick={() => setIsOpen(true)}
                className="flex items-center space-x-2 text-gray-500 hover:text-gray-700 transition-colors"
            >
                <FaSearch className="w-4 h-4" />
                <span className="hidden md:inline text-sm">Buscar... (Ctrl+K)</span>
            </button>
        );
    }

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-20 z-50">
            <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl mx-4">
                <div className="flex items-center p-4 border-b">
                    <FaSearch className="w-5 h-5 text-gray-400 mr-3" />
                    <input
                        ref={inputRef}
                        type="text"
                        placeholder="Buscar produtos, categorias, locais..."
                        value={query}
                        onChange={(e) => setQuery(e.target.value)}
                        onKeyDown={handleKeyDown}
                        className="flex-1 outline-none text-lg"
                    />
                    <button
                        onClick={handleClose}
                        className="ml-3 text-gray-400 hover:text-gray-600"
                    >
                        <FaTimes />
                    </button>
                </div>

                {results.length > 0 && (
                    <div className="max-h-96 overflow-y-auto">
                        {results.map((result, index) => {
                            const Icon = result.icon;
                            return (
                                <button
                                    key={`${result.type}-${index}`}
                                    onClick={() => handleResultClick(result)}
                                    className={`w-full px-4 py-3 text-left hover:bg-gray-50 flex items-center space-x-3 transition-colors ${
                                        index === selectedIndex ? 'bg-blue-50' : ''
                                    }`}
                                >
                                    <Icon className="w-5 h-5 text-gray-400" />
                                    <div>
                                        <div className="font-medium text-gray-900">{result.title}</div>
                                        <div className="text-sm text-gray-500">{result.subtitle}</div>
                                    </div>
                                </button>
                            );
                        })}
                    </div>
                )}

                {query && results.length === 0 && (
                    <div className="p-8 text-center text-gray-500">
                        <FaSearch className="w-8 h-8 mx-auto mb-3 text-gray-300" />
                        <p>Nenhum resultado encontrado para "{query}"</p>
                    </div>
                )}

                <div className="p-3 bg-gray-50 border-t text-xs text-gray-500 flex justify-between">
                    <span>Use ‚Üë‚Üì para navegar, Enter para selecionar</span>
                    <span>Esc para fechar</span>
                </div>
            </div>
        </div>
    );
};

export default GlobalSearch;
import React from 'react';
import { useAuth } from '../context/AuthContext';
import { FaBars, FaWineBottle } from 'react-icons/fa';
import GlobalSearch from './GlobalSearch';
import NotificationCenter from './NotificationCenter';


export default function Header({ onMenuClick }) {
    const { currentUser } = useAuth();

    const userRole = currentUser?.role || 'Administrador';

    return (
        <header className="bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-30">
            <div className="container mx-auto px-4 h-20 flex items-center justify-between">
                {/* Left Side - Hamburger Menu */}
                <div className="flex items-center">
                    <button 
                        onClick={onMenuClick} 
                        className="p-2 rounded-md text-slate-600 dark:text-slate-300 hover:bg-slate-100 dark:hover:bg-slate-700 lg:hidden"
                        aria-label="Abrir menu"
                    >
                        <FaBars className="h-6 w-6" />
                    </button>
                </div>

                {/* Center - Logo and Title */}
                <div className="flex flex-col items-center">
                    <div className="flex items-center">
                        <FaWineBottle className="h-8 w-8 text-blue-600 dark:text-blue-400 mr-3" />
                        <h1 className="text-2xl lg:text-3xl font-bold text-slate-800 dark:text-slate-200">Estoque HCM</h1>
                    </div>
                    <p className="text-xs lg:text-sm text-slate-500 dark:text-slate-400 mt-1">
                        Bem-vindo! VocÍ est√° logado como {userRole}.
                    </p>
                </div>

                {/* Right Side - Search and Notifications */}
                <div className="flex items-center space-x-3">
                    <GlobalSearch />
                    <NotificationCenter />
                </div>
            </div>
        </header>
    );
}
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaKeyboard, FaTimes } from 'react-icons/fa';

const KeyboardShortcuts = () => {
    const [showHelp, setShowHelp] = useState(false);
    const navigate = useNavigate();

    const shortcuts = [
        { key: 'Ctrl + D', action: 'Ir para In√≠cio', path: '/' },
        { key: 'Ctrl + E', action: 'Ir para Estoque', path: '/stock' },
        { key: 'Ctrl + R', action: 'Ir para Cadastros', path: '/registers' },
        { key: 'Ctrl + M', action: 'Ir para MovimentaÁıes', path: '/movements' },
        { key: 'Ctrl + N', action: 'Novo Produto', path: '/registers' },
        { key: '?', action: 'Mostrar atalhos', path: null },
        { key: 'Esc', action: 'Fechar modais', path: null }
    ];

    useEffect(() => {
        const handleKeyDown = (event) => {
            // Evita atalhos em inputs
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
                return;
            }

            if (event.ctrlKey) {
                switch (event.key.toLowerCase()) {
                    case 'd':
                        event.preventDefault();
                        navigate('/');
                        break;
                    case 'e':
                        event.preventDefault();
                        navigate('/stock');
                        break;
                    case 'r':
                        event.preventDefault();
                        navigate('/registers');
                        break;
                    case 'm':
                        event.preventDefault();
                        navigate('/movements');
                        break;
                }
            } else if (event.key === '?') {
                setShowHelp(true);
            } else if (event.key === 'Escape') {
                setShowHelp(false);
            }
        };

        document.addEventListener('keydown', handleKeyDown);
        return () => document.removeEventListener('keydown', handleKeyDown);
    }, [navigate]);

    if (!showHelp) {
        return (
            <button
                onClick={() => setShowHelp(true)}
                className="fixed bottom-4 right-4 bg-gray-800 text-white p-3 rounded-full shadow-lg hover:bg-gray-700 transition-colors z-40"
                title="Atalhos do teclado (?)"
            >
                <FaKeyboard className="w-5 h-5" />
            </button>
        );
    }

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full m-4">
                <div className="flex items-center justify-between p-4 border-b">
                    <h3 className="text-lg font-semibold">Atalhos do Teclado</h3>
                    <button
                        onClick={() => setShowHelp(false)}
                        className="text-gray-400 hover:text-gray-600"
                    >
                        <FaTimes />
                    </button>
                </div>
                <div className="p-4">
                    <div className="space-y-3">
                        {shortcuts.map((shortcut, index) => (
                            <div key={index} className="flex justify-between items-center">
                                <span className="text-gray-700">{shortcut.action}</span>
                                <kbd className="px-2 py-1 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded">
                                    {shortcut.key}
                                </kbd>
                            </div>
                        ))}
                    </div>
                </div>
                <div className="p-4 bg-gray-50 rounded-b-lg">
                    <p className="text-xs text-gray-600">
                        Pressione <kbd className="px-1 py-0.5 text-xs bg-gray-200 rounded">?</kbd> para mostrar/ocultar esta ajuda
                    </p>
                </div>
            </div>
        </div>
    );
};

export default KeyboardShortcuts;
import React, { useState, useRef, useEffect } from 'react';

const LazyImage = ({ src, alt, className, placeholder = '/placeholder.jpg' }) => {
    const [imageSrc, setImageSrc] = useState(placeholder);
    const [imageRef, setImageRef] = useState();
    const [isLoaded, setIsLoaded] = useState(false);

    useEffect(() => {
        let observer;
        
        if (imageRef && imageSrc === placeholder) {
            observer = new IntersectionObserver(
                entries => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            setImageSrc(src);
                            observer.unobserve(imageRef);
                        }
                    });
                },
                { threshold: 0.1 }
            );
            
            observer.observe(imageRef);
        }
        
        return () => {
            if (observer && observer.unobserve) {
                observer.unobserve(imageRef);
            }
        };
    }, [imageRef, imageSrc, placeholder, src]);

    return (
        <div className={`relative ${className}`}>
            <img
                ref={setImageRef}
                src={imageSrc}
                alt={alt}
                className={`transition-opacity duration-300 ${
                    isLoaded ? 'opacity-100' : 'opacity-0'
                } ${className}`}
                onLoad={() => setIsLoaded(true)}
            />
            {!isLoaded && (
                <div className="absolute inset-0 bg-gray-200 animate-pulse rounded" />
            )}
        </div>
    );
};

const VirtualizedList = ({ items, renderItem, itemHeight = 60, containerHeight = 400 }) => {
    const [scrollTop, setScrollTop] = useState(0);
    const containerRef = useRef();

    const startIndex = Math.floor(scrollTop / itemHeight);
    const endIndex = Math.min(
        startIndex + Math.ceil(containerHeight / itemHeight) + 1,
        items.length
    );

    const visibleItems = items.slice(startIndex, endIndex);
    const offsetY = startIndex * itemHeight;

    const handleScroll = (e) => {
        setScrollTop(e.target.scrollTop);
    };

    return (
        <div
            ref={containerRef}
            className="overflow-auto"
            style={{ height: containerHeight }}
            onScroll={handleScroll}
        >
            <div style={{ height: items.length * itemHeight, position: 'relative' }}>
                <div style={{ transform: `translateY(${offsetY}px)` }}>
                    {visibleItems.map((item, index) =>
                        renderItem(item, startIndex + index)
                    )}
                </div>
            </div>
        </div>
    );
};

export { LazyImage, VirtualizedList };
import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, addDoc, doc, updateDoc } from 'firebase/firestore';
import toast from 'react-hot-toast';

export default function LocationFormModal({ isOpen, onClose, locationToEdit }) {
    const [name, setName] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const isEditing = !!locationToEdit;

    useEffect(() => {
        if (isOpen) {
            if (isEditing) {
                setName(locationToEdit.name || '');
            } else {
                setName('');
            }
            setError('');
        }
    }, [locationToEdit, isOpen, isEditing]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!name.trim()) {
            setError('O nome da localidade n„o pode estar vazio.');
            return;
        }
        setLoading(true);
        setError('');

        try {
            if (isEditing) {
                const locationRef = doc(db, 'locations', locationToEdit.id);
                await updateDoc(locationRef, { name });
                toast.success('Localidade atualizada com sucesso!');
            } else {
                await addDoc(collection(db, 'locations'), { name });
                toast.success('Localidade adicionada com sucesso!');
            }
            onClose();
        } catch (err) {
            console.error('Error saving location:', err);
            const errorMessage = `Falha ao salvar: ${err.message}`;
            setError(errorMessage);
            toast.error(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-xl w-full max-w-md">
                <h2 className="text-2xl font-bold mb-6">{isEditing ? 'Editar Localidade' : 'Adicionar Nova Localidade'}</h2>
                <form onSubmit={handleSubmit} className="space-y-4">
                    {error && <p className="bg-red-100 text-red-700 p-3 rounded-lg">{error}</p>}
                    
                    <div>
                        <label htmlFor="location-name" className="block text-sm font-medium text-gray-700">Nome da Localidade</label>
                        <input 
                            type="text" 
                            id="location-name" 
                            value={name}
                            onChange={(e) => setName(e.target.value)}
                            required 
                            className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Armaz√©m Principal"
                            autoFocus
                        />
                    </div>

                    <div className="flex justify-end pt-4 space-x-4">
                        <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition duration-300">Cancelar</button>
                        <button type="submit" disabled={loading} className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-blue-300 transition duration-300">
                            {loading ? 'Salvando...' : 'Salvar'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}
import React, { useState } from 'react';
import useFirestore from '../hooks/useFirestore';
import SkeletonLoader from './SkeletonLoader';
import { db } from '../services/firebase';
import { doc, deleteDoc } from 'firebase/firestore';
import { FaPlus, FaEdit, FaTrash } from 'react-icons/fa';
import toast from 'react-hot-toast';
import LocationFormModal from './LocationFormModal';

const LocationManager = () => {
    const { docs: locations, loading } = useFirestore('locations', { field: 'name', direction: 'asc' });
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [locationToEdit, setLocationToEdit] = useState(null);

    const handleOpenModal = (location = null) => {
        setLocationToEdit(location);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setLocationToEdit(null);
        setIsModalOpen(false);
    };

    const handleDeleteLocation = async (locationId) => {
        if (!window.confirm('Tem certeza que deseja excluir esta localidade? Esta aÁ„o n„o pode ser desfeita.')) return;

        const locationRef = doc(db, 'locations', locationId);
        const promise = deleteDoc(locationRef);
        
        toast.promise(promise, {
            loading: 'Excluindo localidade...',
            success: 'Localidade excluÌda com sucesso!',
            error: (err) => `Falha ao excluir: ${err.message}`,
        });
    };

    return (
        <>
            <div className="bg-white p-6 rounded-lg shadow-md">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-4">
                    <h3 className="text-xl font-bold text-gray-800">Cadastro de Localidades</h3>
                    <button 
                        onClick={() => handleOpenModal()} 
                        className="flex items-center justify-center bg-blue-500 text-white font-semibold py-3 px-6 sm:py-4 sm:px-8 rounded-lg hover:bg-blue-600 transition duration-300 min-h-[44px] sm:min-h-[48px] text-sm sm:text-base w-full sm:w-auto"
                    >
                        <FaPlus className="mr-2 w-4 h-4 sm:w-5 sm:h-5" />
                        Nova Localidade
                    </button>
                </div>

                <div className="mt-4">
                    {loading ? (
                        <SkeletonLoader count={3} />
                    ) : (
                        <ul className="space-y-3">
                            {locations && locations.length > 0 ? (
                                locations.map((location) => (
                                    <li key={location.id} className="flex items-center justify-between p-3 even:bg-gray-50 rounded-md">
                                        <span className="text-gray-800 font-medium">{location.name}</span>
                                        <div className="flex gap-3">
                                            <button onClick={() => handleOpenModal(location)} className="text-blue-500 hover:text-blue-700 transition-colors">
                                                <FaEdit size={16} />
                                            </button>
                                            <button onClick={() => handleDeleteLocation(location.id)} className="text-red-500 hover:text-red-700 transition-colors">
                                                <FaTrash size={16} />
                                            </button>
                                        </div>
                                    </li>
                                ))
                            ) : (
                                <p className="text-gray-500 text-center py-4">Nenhuma localidade encontrada.</p>
                            )}
                        </ul>
                    )}
                </div>
            </div>

            <LocationFormModal 
                isOpen={isModalOpen} 
                onClose={handleCloseModal} 
                locationToEdit={locationToEdit} 
            />
        </>
    );
};

export default LocationManager;
import React from 'react';

export default function Modal({ isOpen, onClose, title, children }) {
    if (!isOpen) return null;

    // Handle Escape key to close modal
    React.useEffect(() => {
        const handleEsc = (event) => {
            if (event.keyCode === 27) {
                onClose();
            }
        };
        window.addEventListener('keydown', handleEsc);

        return () => {
            window.removeEventListener('keydown', handleEsc);
        };
    }, [onClose]);

    return (
        <div 
            className="fixed inset-0 bg-black bg-opacity-60 z-50 flex justify-center items-center p-4 transition-opacity duration-300"
            onClick={onClose} // Close modal on overlay click
        >
            <div 
                className="bg-white rounded-lg shadow-xl w-full max-w-2xl transform transition-all duration-300 scale-95 opacity-0 animate-fade-in-scale"
                onClick={e => e.stopPropagation()} // Prevent closing when clicking inside modal
            >
                <div className="flex justify-between items-center p-5 border-b border-gray-200">
                    <h3 className="text-xl font-semibold text-gray-800">{title}</h3>
                    <button onClick={onClose} className="text-gray-400 hover:text-gray-600 p-2 rounded-full">
                        <i className="fas fa-times fa-lg"></i>
                    </button>
                </div>
                <div className="p-6 max-h-[70vh] overflow-y-auto">
                    {children}
                </div>
            </div>
        </div>
    );
}
import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, doc, runTransaction } from 'firebase/firestore';
import Modal from './Modal';
import ProductSelector from './ProductSelector';
import useFirestore from '../hooks/useFirestore';
import { useAuth } from '../context/AuthContext';

const INITIAL_STATE = {
    selectedProduct: null,
    type: 'entrada',
    quantity: 1,
    motive: '',
};

export default function MovementFormModal({ isOpen, onClose }) {
    const { currentUser } = useAuth();
    const [formData, setFormData] = useState(INITIAL_STATE);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    useEffect(() => {
        if (isOpen) {
            setFormData(INITIAL_STATE);
            setError('');
        }
    }, [isOpen]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        const { selectedProduct, type, quantity, motive } = formData;
        const numQuantity = Number(quantity);

        if (!selectedProduct || numQuantity <= 0) {
            setError('Por favor, preencha todos os campos corretamente.');
            return;
        }

        setLoading(true);
        setError('');

        try {
            const productRef = doc(db, 'products', selectedProduct.id);
            const movementRef = doc(collection(db, 'movements'));

            await runTransaction(db, async (transaction) => {
                const productDoc = await transaction.get(productRef);
                if (!productDoc.exists()) {
                    throw new Error('Produto n„o encontrado!');
                }

                const currentQuantity = productDoc.data().totalQuantity || 0;
                let newQuantity;

                if (type === 'entrada') {
                    newQuantity = currentQuantity + numQuantity;
                } else { // saida
                    if (currentQuantity < numQuantity) {
                        throw new Error('Estoque insuficiente para realizar a sa√≠da.');
                    }
                    newQuantity = currentQuantity - numQuantity;
                }

                transaction.update(productRef, { totalQuantity: newQuantity });
                transaction.set(movementRef, {
                    productId: selectedProduct.id,
                    type,
                    quantity: numQuantity,
                    motive,
                    date: new Date(),
                    userEmail: currentUser?.email || 'N/A',
                });
            });

            onClose();
        } catch (err) {
            console.error('Transaction failed: ', err);
            setError(err.message || 'Falha ao registrar a movimentAÁ„o.');
        }
        setLoading(false);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Registrar Nova MovimentAÁ„o">
            <form onSubmit={handleSubmit} className="space-y-4">
                {error && <p className="bg-red-100 dark:bg-red-900/20 text-red-700 dark:text-red-400 p-3 rounded-lg">{error}</p>}
                
                <ProductSelector 
                    onProductSelect={(product) => setFormData(prev => ({ ...prev, selectedProduct: product }))}
                    selectedProductId={formData.selectedProduct?.id}
                    placeholder="Buscar produto para movimentAÁ„o..."
                />

                <div>
                    <label htmlFor="type" className="block text-sm font-medium text-gray-700">Tipo de MovimentAÁ„o</label>
                    <select name="type" id="type" value={formData.type} onChange={handleChange} required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm bg-white">
                        <option value="entrada">Entrada</option>
                        <option value="saida">Sa√≠da</option>
                    </select>
                </div>

                <div>
                    <label htmlFor="quantity" className="block text-sm font-medium text-gray-700">quantidade</label>
                    <input type="number" name="quantity" id="quantity" value={formData.quantity} onChange={handleChange} required min="1" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="motive" className="block text-sm font-medium text-gray-700">Motivo (Opcional)</label>
                    <input type="text" name="motive" id="motive" value={formData.motive} onChange={handleChange} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" placeholder="Ex: Compra de fornecedor" />
                </div>

                <div className="flex justify-end pt-4 space-x-2">
                    <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancelar</button>
                    <button type="submit" disabled={loading} className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:bg-green-300">
                        {loading ? 'Registrando...' : 'Registrar'}
                    </button>
                </div>
            </form>
        </Modal>
    );
}
import React, { useState, useEffect } from 'react';
import { NotificationStorage } from '../utils/notificationStorage';
import { FaDownload, FaUpload, FaTrash, FaChartLine, FaEye } from 'react-icons/fa';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';

const NotificationAdmin = () => {
  const [stats, setStats] = useState(null);
  const [notifications, setNotifications] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = () => {
    setLoading(true);
    try {
      const allNotifications = NotificationStorage.getAll();
      const statsData = NotificationStorage.getStats();
      
      setNotifications(allNotifications);
      setStats(statsData);
    } catch (error) {
      console.error('Erro ao carregar dados:', error);
    } finally {
      setLoading(false);
    }
  };

  const exportData = () => {
    const data = NotificationStorage.export();
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `notificacoes-completo-${format(new Date(), 'yyyy-MM-dd-HHmm')}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const importData = (event) => {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
      try {
        const data = JSON.parse(e.target.result);
        const result = NotificationStorage.import(data);
        
        if (result.success) {
          alert(`‚úÖ ImportAÁ„o conclu√≠da! ${result.imported} notificAÁıes importadas.`);
          loadData();
        } else {
          alert(`‚ùå Erro na importAÁ„o: ${result.error}`);
        }
      } catch (error) {
        alert(`‚ùå Erro ao processar arquivo: ${error.message}`);
      }
    };
    reader.readAsText(file);
  };

  const clearOldNotifications = () => {
    if (confirm('Deseja remover notificAÁıes com mais de 30 dias?')) {
      const result = NotificationStorage.cleanOldNotifications(30);
      alert(`‚úÖ Limpeza conclu√≠da! ${result.removedCount} notificAÁıes removidas. ${result.remaining} restantes.`);
      loadData();
    }
  };

  const clearAllNotifications = () => {
    if (confirm('‚ö†Ô∏è ATEN√á√ÉO: Isso ir√° remover TODAS as notificAÁıes permanentemente. Confirma?')) {
      NotificationStorage.clear();
      alert('‚úÖ Todas as notificAÁıes foram removidas.');
      loadData();
    }
  };

  if (loading) {
    return (
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-8">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-400">Carregando dados...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md">
      {/* Header */}
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-xl font-bold text-gray-900 dark:text-white flex items-center">
            <FaChartLine className="mr-3 text-blue-500" />
            AdministrAÁ„o de NotificAÁıes
          </h3>
          <div className="flex gap-2">
            <button
              onClick={exportData}
              className="flex items-center gap-2 px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
            >
              <FaDownload className="w-4 h-4" />
              Exportar
            </button>
            <label className="flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors cursor-pointer">
              <FaUpload className="w-4 h-4" />
              Importar
              <input
                type="file"
                accept=".json"
                onChange={importData}
                className="hidden"
              />
            </label>
          </div>
        </div>
      </div>

      {/* Estat√≠sticas Detalhadas */}
      {stats && (
        <div className="p-6">
          <h4 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">üìä Estat√≠sticas Detalhadas</h4>
          
          {/* Resumo Geral */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg">
              <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Total de NotificAÁıes</div>
            </div>
            <div className="bg-yellow-50 dark:bg-yellow-900/20 p-4 rounded-lg">
              <div className="text-2xl font-bold text-yellow-600">{stats.unread}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">n„o Lidas</div>
            </div>
            <div className="bg-green-50 dark:bg-green-900/20 p-4 rounded-lg">
              <div className="text-2xl font-bold text-green-600">{stats.read}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Lidas</div>
            </div>
            <div className="bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg">
              <div className="text-2xl font-bold text-purple-600">{Object.keys(stats.byCategory).length}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Categorias</div>
            </div>
          </div>

          {/* Por Tipo */}
          <div className="mb-6">
            <h5 className="font-semibold text-gray-900 dark:text-white mb-3">Por Tipo:</h5>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
              {Object.entries(stats.byType).map(([type, count]) => (
                <div key={type} className="bg-gray-50 dark:bg-gray-700 p-3 rounded text-center">
                  <div className="font-bold text-gray-900 dark:text-white">{count}</div>
                  <div className="text-sm capitalize text-gray-600 dark:text-gray-400">{type}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Por Categoria */}
          <div className="mb-6">
            <h5 className="font-semibold text-gray-900 dark:text-white mb-3">Por Categoria:</h5>
            <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
              {Object.entries(stats.byCategory).map(([category, count]) => (
                <div key={category} className="bg-gray-50 dark:bg-gray-700 p-3 rounded text-center">
                  <div className="font-bold text-gray-900 dark:text-white">{count}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">{category}</div>
                </div>
              ))}
            </div>
          </div>

          {/* informaÁıes de Datas */}
          {stats.oldestNotification && stats.newestNotification && (
            <div className="mb-6">
              <h5 className="font-semibold text-gray-900 dark:text-white mb-3">Per√≠odo:</h5>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                  <div className="text-sm text-gray-600 dark:text-gray-400">Mais Antiga:</div>
                  <div className="font-medium text-gray-900 dark:text-white">
                    {format(new Date(stats.oldestNotification), 'dd/MM/yyyy HH:mm', { locale: ptBR })}
                  </div>
                </div>
                <div className="bg-gray-50 dark:bg-gray-700 p-3 rounded">
                  <div className="text-sm text-gray-600 dark:text-gray-400">Mais Recente:</div>
                  <div className="font-medium text-gray-900 dark:text-white">
                    {format(new Date(stats.newestNotification), 'dd/MM/yyyy HH:mm', { locale: ptBR })}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* ⁄ltimos 7 dias */}
          <div className="mb-6">
            <h5 className="font-semibold text-gray-900 dark:text-white mb-3">⁄ltimos 7 dias:</h5>
            <div className="grid grid-cols-7 gap-1">
              {Object.entries(stats.last7Days).reverse().map(([date, count]) => (
                <div key={date} className="bg-gray-50 dark:bg-gray-700 p-2 rounded text-center">
                  <div className="text-xs text-gray-600 dark:text-gray-400">
                    {format(new Date(date), 'dd/MM')}
                  </div>
                  <div className="font-bold text-gray-900 dark:text-white">{count}</div>
                </div>
              ))}
            </div>
          </div>

          {/* AÁıes de AdministrAÁ„o */}
          <div className="border-t border-gray-200 dark:border-gray-700 pt-6">
            <h5 className="font-semibold text-gray-900 dark:text-white mb-3">üîß AÁıes de AdministrAÁ„o:</h5>
            <div className="flex flex-wrap gap-3">
              <button
                onClick={clearOldNotifications}
                className="flex items-center gap-2 px-4 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors"
              >
                <FaTrash className="w-4 h-4" />
                Limpar Antigas (30+ dias)
              </button>
              <button
                onClick={clearAllNotifications}
                className="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                <FaTrash className="w-4 h-4" />
                Limpar Todas (CUIDADO!)
              </button>
              <button
                onClick={loadData}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <FaEye className="w-4 h-4" />
                Recarregar Dados
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationAdmin;
import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { FaBell, FaTimes, FaCheck, FaTrash, FaEye } from 'react-icons/fa';
import { useNotifications } from '../context/NotificationContext';
import { formatDistanceToNow } from 'date-fns';
import { ptBR } from 'date-fns/locale';

const NotificationCenter = () => {
  const navigate = useNavigate();
  const [isOpen, setIsOpen] = useState(false);
  const { notifications, unreadCount, markAsRead, markAllAsRead, removeNotification, clearAll } = useNotifications();
  const dropdownRef = useRef(null);

  // Fechar dropdown ao clicar fora
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  const getNotificationIcon = (type) => {
    const baseClasses = "w-4 h-4";
    switch (type) {
      case 'success':
        return <FaCheck className={`${baseClasses} text-green-500`} />;
      case 'warning':
        return <FaBell className={`${baseClasses} text-yellow-500`} />;
      case 'error':
        return <FaBell className={`${baseClasses} text-red-500`} />;
      default:
        return <FaBell className={`${baseClasses} text-blue-500`} />;
    }
  };

  const handleNotificationClick = (notification) => {
    // Marcar como lida se n„o foi lida ainda
    if (!notification.read) {
      markAsRead(notification.id);
    }
    
    // Fechar o dropdown
    setIsOpen(false);
    
    // L√≥gica de redirecionamento baseada no tipo e categoria
    if (notification.action?.href) {
      // Se tem URL espec√≠fica definida
      if (notification.action.href.startsWith('http')) {
        // URL externa
        window.open(notification.action.href, '_blank');
      } else {
        // Rota interna
        navigate(notification.action.href);
      }
    } else if (notification.category === 'stock' && notification.productId) {
      // NotificAÁıes de estoque - ir para p√°gina de estoque com busca do produto
      navigate(`/stock?search=${encodeURIComponent(notification.title.replace('Produto ', '').replace(' est√°', ''))}`);
    } else if (notification.category === 'movement' && notification.productId) {
      // NotificAÁıes de movimento - ir para p√°gina de MovimentaÁıes
      navigate('/movements');
    } else if (notification.category === 'system') {
      // NotificAÁıes de sistema - ir para ConfiguraÁıes
      navigate('/settings');
    } else {
      // Default - ir para dashboard
      navigate('/');
    }
  };

  return (
    <div className="relative" ref={dropdownRef}>
      {/* Bot√£o de NotificAÁıes */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-2 text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors duration-200 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700"
      >
        <FaBell className="w-5 h-5" />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center font-medium">
            {unreadCount > 99 ? '99+' : unreadCount}
          </span>
        )}
      </button>

      {/* Dropdown de NotificAÁıes */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-96 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-xl z-50 max-h-96 overflow-hidden">
          {/* Header */}
          <div className="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              NotificAÁıes
            </h3>
            <div className="flex items-center gap-2">
              {unreadCount > 0 && (
                <button
                  onClick={markAllAsRead}
                  className="text-sm text-blue-600 dark:text-blue-400 hover:underline"
                >
                  Marcar todas como lidas
                </button>
              )}
              <button
                onClick={() => setIsOpen(false)}
                className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                <FaTimes className="w-4 h-4" />
              </button>
            </div>
          </div>

          {/* Lista de NotificAÁıes */}
          <div className="max-h-80 overflow-y-auto">
            {notifications.length === 0 ? (
              <div className="p-8 text-center text-gray-500 dark:text-gray-400">
                <FaBell className="mx-auto mb-3 text-3xl opacity-50" />
                <p>Nenhuma notificAÁ„o</p>
                <p className="text-sm">VocÍ est√° em dia!</p>
              </div>
            ) : (
              notifications.map((notification) => (
                <div
                  key={notification.id}
                  className={`p-4 border-b border-gray-100 dark:border-gray-700 last:border-b-0 cursor-pointer transition-all duration-200 hover:bg-gray-50 dark:hover:bg-gray-700 ${
                    !notification.read ? 'bg-blue-50 dark:bg-blue-900/10' : ''
                  } ${notification.action ? 'hover:shadow-sm' : ''}`}
                  onClick={() => handleNotificationClick(notification)}
                  title={notification.action ? `Clique para: ${notification.action.label}` : 'Clique para marcar como lida'}
                >
                  <div className="flex items-start gap-3">
                    {/* √çcone */}
                    <div className="flex-shrink-0 mt-1">
                      {getNotificationIcon(notification.type)}
                    </div>

                    {/* Conte√∫do */}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-start justify-between">
                        <div className="flex-1">
                          <h4 className={`text-sm font-medium ${
                            notification.read 
                              ? 'text-gray-700 dark:text-gray-300' 
                              : 'text-gray-900 dark:text-white'
                          }`}>
                            {notification.title}
                          </h4>
                          <p className={`text-sm mt-1 ${
                            notification.read 
                              ? 'text-gray-500 dark:text-gray-400' 
                              : 'text-gray-600 dark:text-gray-300'
                          }`}>
                            {notification.message}
                          </p>
                          
                          {/* AÁ„o */}
                          {notification.action && (
                            <div className="flex items-center gap-2 mt-2">
                              <button className="text-xs text-blue-600 dark:text-blue-400 hover:underline bg-blue-50 dark:bg-blue-900/20 px-2 py-1 rounded">
                                {notification.action.label}
                              </button>
                              <span className="text-xs text-gray-400">‚Ä¢ Clique para navegar</span>
                            </div>
                          )}
                        </div>

                        {/* AÁıes */}
                        <div className="flex items-center gap-1 ml-2">
                          {!notification.read && (
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                markAsRead(notification.id);
                              }}
                              className="p-1 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
                              title="Marcar como lida"
                            >
                              <FaEye className="w-3 h-3" />
                            </button>
                          )}
                          <button
                            onClick={(e) => {
                              e.stopPropagation();
                              removeNotification(notification.id);
                            }}
                            className="p-1 text-gray-400 hover:text-red-600 dark:hover:text-red-400"
                            title="Remover"
                          >
                            <FaTimes className="w-3 h-3" />
                          </button>
                        </div>
                      </div>

                      {/* Timestamp */}
                      <p className="text-xs text-gray-400 dark:text-gray-500 mt-2">
                        {formatDistanceToNow(new Date(notification.timestamp), {
                          addSuffix: true,
                          locale: ptBR
                        })}
                      </p>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>

          {/* Footer */}
          {notifications.length > 0 && (
            <div className="p-3 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-700">
              <button
                onClick={clearAll}
                className="w-full text-sm text-red-600 dark:text-red-400 hover:underline flex items-center justify-center gap-2"
              >
                <FaTrash className="w-3 h-3" />
                Limpar todas
              </button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default NotificationCenter;
import React, { useState, useEffect } from 'react';
import { useNotifications } from '../context/NotificationContext';
import { FaBug, FaPlay, FaPause, FaTrash, FaEye } from 'react-icons/fa';

const NotificationDebugger = () => {
  const { notifications } = useNotifications();
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [debugLog, setDebugLog] = useState([]);
  const [stats, setStats] = useState({});
  const [filters, setFilters] = useState({
    showDuplicates: true,
    showFrequent: true,
    timeWindow: 60 // segundos
  });

  useEffect(() => {
    if (!isMonitoring) return;

    const interval = setInterval(() => {
      analyzeNotifications();
    }, 5000); // An√°lise a cada 5 segundos

    return () => clearInterval(interval);
  }, [isMonitoring, notifications, filters]);

  const analyzeNotifications = () => {
    const now = Date.now();
    const timeWindow = filters.timeWindow * 1000; // converter para ms
    const recentNotifications = notifications.filter(n => 
      now - new Date(n.timestamp).getTime() < timeWindow
    );

    // Detectar duplicatas
    const duplicates = findDuplicates(recentNotifications);
    
    // Detectar notificAÁıes muito frequentes
    const frequent = findFrequentNotifications(recentNotifications);
    
    // Atualizar estat√≠sticas
    const newStats = {
      total: notifications.length,
      recent: recentNotifications.length,
      duplicates: duplicates.length,
      frequent: frequent.length,
      timestamp: new Date().toISOString()
    };

    setStats(newStats);

    // Adicionar ao log se encontrou problemas
    if (duplicates.length > 0 || frequent.length > 0) {
      const logEntry = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        type: 'warning',
        duplicates,
        frequent,
        stats: newStats
      };
      
      setDebugLog(prev => [logEntry, ...prev.slice(0, 19)]); // Manter √∫ltimas 20 entradas
    }
  };

  const findDuplicates = (notifications) => {
    const seen = new Map();
    const duplicates = [];

    notifications.forEach(notification => {
      const key = `${notification.type}_${notification.title}_${notification.productId || 'no-product'}`;
      
      if (seen.has(key)) {
        const existing = seen.get(key);
        const timeDiff = new Date(notification.timestamp).getTime() - new Date(existing.timestamp).getTime();
        
        if (timeDiff < 60000) { // Menos de 1 minuto
          duplicates.push({
            original: existing,
            duplicate: notification,
            timeDiff: timeDiff / 1000 // em segundos
          });
        }
      } else {
        seen.set(key, notification);
      }
    });

    return duplicates;
  };

  const findFrequentNotifications = (notifications) => {
    const frequency = new Map();
    
    notifications.forEach(notification => {
      const key = `${notification.type}_${notification.productId || 'system'}`;
      frequency.set(key, (frequency.get(key) || 0) + 1);
    });

    return Array.from(frequency.entries())
      .filter(([key, count]) => count > 5) // Mais de 5 notificAÁıes no per√≠odo
      .map(([key, count]) => ({ key, count }));
  };

  const clearDebugLog = () => {
    setDebugLog([]);
  };

  const exportDebugData = () => {
    const debugData = {
      exportTime: new Date().toISOString(),
      stats,
      debugLog,
      recentNotifications: notifications.slice(0, 20),
      filters
    };

    const blob = new Blob([JSON.stringify(debugData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `notification-debug-${Date.now()}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white flex items-center">
          <FaBug className="mr-3 text-red-500" />
          Debugger de NotificAÁıes
        </h3>
        <div className="flex gap-2">
          <button
            onClick={() => setIsMonitoring(!isMonitoring)}
            className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-colors ${
              isMonitoring 
                ? 'bg-red-600 hover:bg-red-700 text-white' 
                : 'bg-green-600 hover:bg-green-700 text-white'
            }`}
          >
            {isMonitoring ? <FaPause className="w-4 h-4" /> : <FaPlay className="w-4 h-4" />}
            {isMonitoring ? 'Parar' : 'Monitorar'}
          </button>
          <button
            onClick={exportDebugData}
            className="flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <FaEye className="w-4 h-4" />
            Exportar
          </button>
        </div>
      </div>

      {/* ConfiguraÁıes */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
        <div>
          <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Janela de Tempo (segundos)
          </label>
          <input
            type="number"
            value={filters.timeWindow}
            onChange={(e) => setFilters(prev => ({ ...prev, timeWindow: parseInt(e.target.value) }))}
            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white"
            min="30"
            max="3600"
          />
        </div>
        <div className="flex items-center">
          <input
            type="checkbox"
            checked={filters.showDuplicates}
            onChange={(e) => setFilters(prev => ({ ...prev, showDuplicates: e.target.checked }))}
            className="mr-2"
          />
          <label className="text-sm text-gray-700 dark:text-gray-300">Detectar Duplicatas</label>
        </div>
        <div className="flex items-center">
          <input
            type="checkbox"
            checked={filters.showFrequent}
            onChange={(e) => setFilters(prev => ({ ...prev, showFrequent: e.target.checked }))}
            className="mr-2"
          />
          <label className="text-sm text-gray-700 dark:text-gray-300">Detectar Frequentes</label>
        </div>
      </div>

      {/* Estat√≠sticas */}
      {stats.timestamp && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Total</div>
          </div>
          <div className="bg-green-50 dark:bg-green-900/20 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">{stats.recent}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Recentes</div>
          </div>
          <div className="bg-yellow-50 dark:bg-yellow-900/20 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-yellow-600">{stats.duplicates}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Duplicatas</div>
          </div>
          <div className="bg-red-50 dark:bg-red-900/20 p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-red-600">{stats.frequent}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Frequentes</div>
          </div>
        </div>
      )}

      {/* Status */}
      <div className="mb-4 p-3 rounded-lg bg-gray-50 dark:bg-gray-700">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
            Status: {isMonitoring ? 'üü¢ Monitorando' : 'üî¥ Parado'}
          </span>
          {stats.timestamp && (
            <span className="text-xs text-gray-500 dark:text-gray-400">
              √öltima an√°lise: {new Date(stats.timestamp).toLocaleTimeString()}
            </span>
          )}
        </div>
      </div>

      {/* Log de Debug */}
      <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
        <div className="flex items-center justify-between mb-3">
          <h4 className="font-semibold text-gray-900 dark:text-white">Log de Problemas</h4>
          {debugLog.length > 0 && (
            <button
              onClick={clearDebugLog}
              className="flex items-center gap-2 px-3 py-1 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors"
            >
              <FaTrash className="w-3 h-3" />
              Limpar
            </button>
          )}
        </div>

        {debugLog.length === 0 ? (
          <div className="text-center py-8 text-gray-500 dark:text-gray-400">
            <FaBug className="mx-auto mb-2 text-3xl opacity-50" />
            <p>Nenhum problema detectado</p>
            <p className="text-sm">
              {isMonitoring ? 'Monitoramento ativo...' : 'Inicie o monitoramento para detectar problemas'}
            </p>
          </div>
        ) : (
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {debugLog.map((entry) => (
              <div key={entry.id} className="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                    ‚ö†Ô∏è Problema Detectado
                  </span>
                  <span className="text-xs text-gray-500">
                    {new Date(entry.timestamp).toLocaleTimeString()}
                  </span>
                </div>
                
                {entry.duplicates.length > 0 && (
                  <div className="mb-2">
                    <p className="text-sm text-gray-700 dark:text-gray-300 font-medium">
                      üîÑ Duplicatas encontradas: {entry.duplicates.length}
                    </p>
                    {entry.duplicates.slice(0, 3).map((dup, idx) => (
                      <p key={idx} className="text-xs text-gray-600 dark:text-gray-400 ml-4">
                        ‚Ä¢ "{dup.duplicate.title}" (intervalo: {dup.timeDiff.toFixed(1)}s)
                      </p>
                    ))}
                  </div>
                )}
                
                {entry.frequent.length > 0 && (
                  <div>
                    <p className="text-sm text-gray-700 dark:text-gray-300 font-medium">
                      üö® NotificAÁıes frequentes: {entry.frequent.length} tipos
                    </p>
                    {entry.frequent.slice(0, 3).map((freq, idx) => (
                      <p key={idx} className="text-xs text-gray-600 dark:text-gray-400 ml-4">
                        ‚Ä¢ {freq.key}: {freq.count} vezes
                      </p>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default NotificationDebugger;
import React from 'react';
import { useNotifications } from '../context/NotificationContext';
import { useUserActionNotifications } from '../hooks/useNotificationHelpers';

const NotificationDemo = () => {
  const { addNotification } = useNotifications();
  const { 
    notifyProductAdded, 
    notifyProductUpdated, 
    notifyStockAdjustment,
    notifyTransferCompleted,
    notifyBackupCreated 
  } = useUserActionNotifications();

  const demoNotifications = [
    {
      title: 'NotificAÁ„o de Sucesso',
      action: () => addNotification({
        type: 'success',
        title: 'OperAÁ„o Conclu√≠da',
        message: 'A operAÁ„o foi executada com sucesso!',
        action: {
          label: 'Ver Dashboard',
          href: '/'
        }
      })
    },
    {
      title: 'Alerta de Estoque Baixo',
      action: () => addNotification({
        type: 'warning',
        title: 'Estoque Baixo - Cerveja Heineken',
        message: 'O produto "Cerveja Heineken" est√° com estoque baixo (3 unidades restantes)',
        action: {
          label: 'Ver Produto',
          href: '/stock?search=Cerveja Heineken'
        },
        category: 'stock',
        productId: 'demo_product_1',
        productName: 'Cerveja Heineken'
      })
    },
    {
      title: 'Produto Sem Estoque',
      action: () => addNotification({
        type: 'error',
        title: 'Produto Sem Estoque - Vodka Absolut',
        message: 'Vodka Absolut est√° sem estoque!',
        action: {
          label: 'Repor Estoque',
          href: '/stock?search=Vodka Absolut'
        },
        category: 'stock',
        productId: 'demo_product_2',
        productName: 'Vodka Absolut'
      })
    },
    {
      title: 'MovimentAÁ„o de Estoque',
      action: () => addNotification({
        type: 'info',
        title: 'Transfer√™ncia de Estoque - Whisky',
        message: '15 unidades de Whisky Johnnie Walker transferidas',
        action: {
          label: 'Ver MovimentaÁıes',
          href: '/movements'
        },
        category: 'movement',
        productId: 'demo_product_3',
        productName: 'Whisky Johnnie Walker'
      })
    },
    {
      title: 'Backup do Sistema',
      action: () => addNotification({
        type: 'success',
        title: 'Backup Conclu√≠do',
        message: 'Backup dos dados criado com sucesso! 150 itens salvos.',
        action: {
          label: 'Ver ConfiguraÁıes',
          href: '/settings'
        },
        category: 'system'
      })
    },
    {
      title: 'Novo Relat√≥rio',
      action: () => addNotification({
        type: 'info',
        title: 'Relat√≥rio Dispon√≠vel',
        message: 'Novo relat√≥rio mensal de vendas est√° pronto para visualizAÁ„o',
        action: {
          label: 'Ver RelatÛrios',
          href: '/reports'
        },
        category: 'reports'
      })
    },
    {
      title: 'Erro de SincronizAÁ„o',
      action: () => addNotification({
        type: 'error',
        title: 'Falha na SincronizAÁ„o',
        message: 'n„o foi poss√≠vel sincronizar com o servidor. Verifique sua conex√£o.',
        action: {
          label: 'Tentar Novamente',
          href: '/settings'
        },
        category: 'system'
      })
    },
    {
      title: 'Contagem Finalizada',
      action: () => addNotification({
        type: 'success',
        title: 'Contagem Conclu√≠da',
        message: 'Contagem de estoque "Mensal Janeiro" finalizada com 89 itens',
        action: {
          label: 'Ver Contagem',
          href: '/counting'
        },
        category: 'counting'
      })
    }
  ];

  return (
    <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md">
      <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4">
        üîî DemonstrAÁ„o do Sistema de NotificAÁıes
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
        {demoNotifications.map((demo, index) => (
          <button
            key={index}
            onClick={demo.action}
            className="p-3 text-left bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
          >
            <div className="text-sm font-medium text-blue-900 dark:text-blue-100">
              {demo.title}
            </div>
          </button>
        ))}
      </div>

      <div className="mt-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
        <h4 className="font-semibold text-gray-900 dark:text-white mb-2">
          ‚ú® Funcionalidades Implementadas:
        </h4>
        <ul className="text-sm text-gray-600 dark:text-gray-300 space-y-1">
          <li>‚Ä¢ <strong>NotificAÁıes Autom√°ticas:</strong> Estoque baixo, produtos zerados</li>
          <li>‚Ä¢ <strong>NotificAÁıes de AÁıes:</strong> Produtos adicionados, editados, removidos</li>
          <li>‚Ä¢ <strong>Redirecionamento Inteligente:</strong> Clique para navegar automaticamente</li>
          <li>‚Ä¢ <strong>Persist√™ncia:</strong> NotificAÁıes salvas no localStorage</li>
          <li>‚Ä¢ <strong>InterAÁıes:</strong> Marcar como lida, remover, limpar todas</li>
          <li>‚Ä¢ <strong>IntegrAÁ„o:</strong> Toast para feedback imediato</li>
          <li>‚Ä¢ <strong>Design Responsivo:</strong> Funciona em todos os dispositivos</li>
          <li>‚Ä¢ <strong>Tema Escuro:</strong> Suporte completo ao modo escuro</li>
          <li>‚Ä¢ <strong>CategorizAÁ„o:</strong> Diferentes tipos por contexto (estoque, sistema, etc.)</li>
        </ul>
      </div>
    </div>
  );
};

export default NotificationDemo;
import React, { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { useNotifications } from '../context/NotificationContext';
import { FaHistory, FaFilter, FaCalendarAlt, FaTrash, FaEye, FaDownload, FaExternalLinkAlt } from 'react-icons/fa';
import { formatDistanceToNow, format } from 'date-fns';
import { ptBR } from 'date-fns/locale';

const NotificationHistory = () => {
  const navigate = useNavigate();
  const { notifications, removeNotification, markAsRead } = useNotifications();
  const [filterType, setFilterType] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showDetails, setShowDetails] = useState(null);

  // Filtros aplicados
  const filteredNotifications = useMemo(() => {
    return notifications.filter(notification => {
      // Filtro por tipo
      if (filterType !== 'all' && notification.type !== filterType) return false;
      
      // Filtro por status
      if (filterStatus === 'read' && !notification.read) return false;
      if (filterStatus === 'unread' && notification.read) return false;
      
      // Filtro por busca
      if (searchTerm) {
        const searchLower = searchTerm.toLowerCase();
        return (
          notification.title?.toLowerCase().includes(searchLower) ||
          notification.message?.toLowerCase().includes(searchLower)
        );
      }
      
      return true;
    });
  }, [notifications, filterType, filterStatus, searchTerm]);

  // Estat√≠sticas
  const stats = useMemo(() => {
    const total = notifications.length;
    const unread = notifications.filter(n => !n.read).length;
    const byType = notifications.reduce((acc, n) => {
      acc[n.type] = (acc[n.type] || 0) + 1;
      return acc;
    }, {});

    return { total, unread, read: total - unread, byType };
  }, [notifications]);

  // Exportar hist√≥rico
  const exportHistory = () => {
    const data = {
      exportDate: new Date().toISOString(),
      totalNotifications: notifications.length,
      notifications: notifications.map(n => ({
        id: n.id,
        type: n.type,
        title: n.title,
        message: n.message,
        timestamp: n.timestamp,
        read: n.read,
        category: n.category
      }))
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `notificacoes-historico-${format(new Date(), 'yyyy-MM-dd')}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const handleNotificationClick = (notification) => {
    // Marcar como lida se n„o foi lida ainda
    if (!notification.read) {
      markAsRead(notification.id);
    }
    
    // L√≥gica de redirecionamento
    if (notification.action?.href) {
      if (notification.action.href.startsWith('http')) {
        window.open(notification.action.href, '_blank');
      } else {
        navigate(notification.action.href);
      }
    } else if (notification.category === 'stock' && notification.productName) {
      navigate(`/stock?search=${encodeURIComponent(notification.productName)}`);
    } else if (notification.category === 'movement') {
      navigate('/movements');
    } else if (notification.category === 'system') {
      navigate('/settings');
    } else {
      navigate('/');
    }
  };

  const getTypeIcon = (type) => {
    switch (type) {
      case 'success': return '‚úÖ';
      case 'warning': return '‚ö†Ô∏è';
      case 'error': return '‚ùå';
      case 'info': return '‚ÑπÔ∏è';
      default: return 'üì¢';
    }
  };

  const getTypeColor = (type) => {
    switch (type) {
      case 'success': return 'text-green-600 bg-green-50 dark:bg-green-900/20';
      case 'warning': return 'text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20';
      case 'error': return 'text-red-600 bg-red-50 dark:bg-red-900/20';
      case 'info': return 'text-blue-600 bg-blue-50 dark:bg-blue-900/20';
      default: return 'text-gray-600 bg-gray-50 dark:bg-gray-900/20';
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md">
      {/* Header com estat√≠sticas */}
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center">
            <FaHistory className="text-2xl text-blue-500 mr-3" />
            <h3 className="text-xl font-bold text-gray-900 dark:text-white">
              Hist√≥rico de NotificAÁıes
            </h3>
          </div>
          <button
            onClick={exportHistory}
            className="flex items-center gap-2 px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
          >
            <FaDownload className="w-4 h-4" />
            Exportar
          </button>
        </div>

        {/* Estat√≠sticas */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
          <div className="text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <div className="text-2xl font-bold text-gray-900 dark:text-white">{stats.total}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Total</div>
          </div>
          <div className="text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
            <div className="text-2xl font-bold text-blue-600">{stats.unread}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">n„o Lidas</div>
          </div>
          <div className="text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg">
            <div className="text-2xl font-bold text-green-600">{stats.read}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Lidas</div>
          </div>
          <div className="text-center p-3 bg-purple-50 dark:bg-purple-900/20 rounded-lg">
            <div className="text-2xl font-bold text-purple-600">{Object.keys(stats.byType).length}</div>
            <div className="text-sm text-gray-600 dark:text-gray-400">Tipos</div>
          </div>
        </div>

        {/* Filtros */}
        <div className="flex flex-wrap gap-4">
          <div className="flex-1 min-w-[200px]">
            <input
              type="text"
              placeholder="Buscar notificAÁıes..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
            />
          </div>
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          >
            <option value="all">Todos os tipos</option>
            <option value="success">Sucesso</option>
            <option value="warning">Aviso</option>
            <option value="error">Erro</option>
            <option value="info">InformAÁ„o</option>
          </select>
          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white"
          >
            <option value="all">Todos os status</option>
            <option value="unread">n„o lidas</option>
            <option value="read">Lidas</option>
          </select>
        </div>
      </div>

      {/* Lista de notificAÁıes */}
      <div className="max-h-96 overflow-y-auto">
        {filteredNotifications.length === 0 ? (
          <div className="p-8 text-center text-gray-500 dark:text-gray-400">
            <FaHistory className="mx-auto mb-3 text-3xl opacity-50" />
            <p>Nenhuma notificAÁ„o encontrada</p>
            {searchTerm && (
              <p className="text-sm">Tente ajustar os filtros de busca</p>
            )}
          </div>
        ) : (
          filteredNotifications.map((notification) => (
            <div
              key={notification.id}
              className={`p-4 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors ${
                !notification.read ? 'bg-blue-50 dark:bg-blue-900/10' : ''
              } ${notification.action?.href ? 'cursor-pointer' : ''}`}
              onClick={() => handleNotificationClick(notification)}
              title={notification.action?.href ? 'Clique para navegar' : ''}
            >
              <div className="flex items-start gap-3">
                {/* Tipo/√çcone */}
                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${getTypeColor(notification.type)}`}>
                  <span className="text-sm">{getTypeIcon(notification.type)}</span>
                </div>

                {/* Conte√∫do */}
                <div className="flex-1 min-w-0">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h4 className={`text-sm font-medium ${
                        notification.read 
                          ? 'text-gray-700 dark:text-gray-300' 
                          : 'text-gray-900 dark:text-white'
                      }`}>
                        {notification.title}
                      </h4>
                      <p className={`text-sm mt-1 ${
                        notification.read 
                          ? 'text-gray-500 dark:text-gray-400' 
                          : 'text-gray-600 dark:text-gray-300'
                      }`}>
                        {notification.message}
                      </p>
                      
                      {/* Metadados */}
                      <div className="flex items-center gap-4 mt-2 text-xs text-gray-400">
                        <span>{format(new Date(notification.timestamp), 'dd/MM/yyyy HH:mm', { locale: ptBR })}</span>
                        <span>{formatDistanceToNow(new Date(notification.timestamp), { addSuffix: true, locale: ptBR })}</span>
                        {notification.category && (
                          <span className="px-2 py-1 bg-gray-200 dark:bg-gray-600 rounded text-xs">
                            {notification.category}
                          </span>
                        )}
                      </div>
                    </div>

                    {/* AÁıes */}
                    <div className="flex items-center gap-1 ml-2">
                      <button
                        onClick={() => setShowDetails(showDetails === notification.id ? null : notification.id)}
                        className="p-1 text-gray-400 hover:text-blue-600 dark:hover:text-blue-400"
                        title="Ver detalhes"
                      >
                        <FaEye className="w-3 h-3" />
                      </button>
                      {!notification.read && (
                        <button
                          onClick={() => markAsRead(notification.id)}
                          className="p-1 text-gray-400 hover:text-green-600 dark:hover:text-green-400"
                          title="Marcar como lida"
                        >
                          <FaEye className="w-3 h-3" />
                        </button>
                      )}
                      <button
                        onClick={() => removeNotification(notification.id)}
                        className="p-1 text-gray-400 hover:text-red-600 dark:hover:text-red-400"
                        title="Remover"
                      >
                        <FaTrash className="w-3 h-3" />
                      </button>
                    </div>
                  </div>

                  {/* Detalhes expandidos */}
                  {showDetails === notification.id && (
                    <div className="mt-3 p-3 bg-gray-100 dark:bg-gray-600 rounded-lg text-xs">
                      <div className="grid grid-cols-2 gap-2">
                        <div><strong>ID:</strong> {notification.id}</div>
                        <div><strong>Tipo:</strong> {notification.type}</div>
                        <div><strong>Status:</strong> {notification.read ? 'Lida' : 'n„o lida'}</div>
                        <div><strong>Categoria:</strong> {notification.category || 'N/A'}</div>
                        {notification.productId && (
                          <div><strong>Produto ID:</strong> {notification.productId}</div>
                        )}
                        {notification.action && (
                          <div><strong>AÁ„o:</strong> {notification.action.label}</div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );
};

export default NotificationHistory;
import React, { useState, useEffect } from 'react';
import { FaLightbulb, FaTimes, FaArrowRight, FaArrowLeft } from 'react-icons/fa';

const TourSteps = {
    dashboard: [
        {
            target: '[data-tour="dashboard-charts"]',
            title: 'Gr√°ficos Interativos',
            content: 'Visualize suas MovimentaÁıes de estoque em diferentes formatos de gr√°fico.',
            position: 'bottom'
        },
        {
            target: '[data-tour="dashboard-alerts"]',
            title: 'Alertas de Estoque',
            content: 'Monitore produtos com estoque baixo em tempo real.',
            position: 'left'
        }
    ],
    stock: [
        {
            target: '[data-tour="stock-filters"]',
            title: 'Filtros AvanÁados',
            content: 'Use os filtros para encontrar produtos rapidamente por nome, categoria ou local.',
            position: 'bottom'
        },
        {
            target: '[data-tour="stock-actions"]',
            title: 'AÁıes R√°pidas',
            content: 'Edite, exclua ou visualize detalhes dos produtos com um clique.',
            position: 'left'
        }
    ],
    registers: [
        {
            target: '[data-tour="register-tabs"]',
            title: 'Abas de Cadastro',
            content: 'Organize seus cadastros em abas: Produtos, Categorias e Localidades.',
            position: 'bottom'
        },
        {
            target: '[data-tour="add-product"]',
            title: 'Novo Produto',
            content: 'Adicione produtos com estoque por localidade e informaÁıes completas.',
            position: 'bottom'
        }
    ]
};

const OnboardingTour = ({ page, onComplete }) => {
    const [currentStep, setCurrentStep] = useState(0);
    const [isActive, setIsActive] = useState(false);
    const steps = TourSteps[page] || [];

    useEffect(() => {
        const hasSeenTour = localStorage.getItem(`tour-${page}-completed`);
        if (!hasSeenTour && steps.length > 0) {
            setTimeout(() => setIsActive(true), 1000);
        }
    }, [page, steps.length]);

    const completeTour = () => {
        localStorage.setItem(`tour-${page}-completed`, 'true');
        setIsActive(false);
        onComplete?.();
    };

    const nextStep = () => {
        if (currentStep < steps.length - 1) {
            setCurrentStep(currentStep + 1);
        } else {
            completeTour();
        }
    };

    const prevStep = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
        }
    };

    const skipTour = () => {
        completeTour();
    };

    if (!isActive || steps.length === 0) return null;

    const currentStepData = steps[currentStep];

    return (
        <>
            {/* Overlay */}
            <div className="fixed inset-0 bg-black bg-opacity-50 z-40" />
            
            {/* Tour Popup */}
            <div className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white rounded-lg shadow-xl max-w-md w-full mx-4 z-50">
                <div className="p-6">
                    <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center">
                            <FaLightbulb className="w-5 h-5 text-yellow-500 mr-2" />
                            <h3 className="text-lg font-semibold">{currentStepData.title}</h3>
                        </div>
                        <button
                            onClick={skipTour}
                            className="text-gray-400 hover:text-gray-600"
                        >
                            <FaTimes />
                        </button>
                    </div>
                    
                    <p className="text-gray-600 mb-6">{currentStepData.content}</p>
                    
                    <div className="flex items-center justify-between">
                        <div className="flex space-x-1">
                            {steps.map((_, index) => (
                                <div
                                    key={index}
                                    className={`w-2 h-2 rounded-full ${
                                        index === currentStep ? 'bg-blue-500' : 'bg-gray-300'
                                    }`}
                                />
                            ))}
                        </div>
                        
                        <div className="flex space-x-2">
                            {currentStep > 0 && (
                                <button
                                    onClick={prevStep}
                                    className="flex items-center px-3 py-2 text-gray-600 hover:text-gray-800"
                                >
                                    <FaArrowLeft className="w-4 h-4 mr-1" />
                                    Anterior
                                </button>
                            )}
                            
                            <button
                                onClick={nextStep}
                                className="flex items-center px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
                            >
                                {currentStep === steps.length - 1 ? 'Concluir' : 'PrÛximo'}
                                {currentStep < steps.length - 1 && <FaArrowRight className="w-4 h-4 ml-1" />}
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </>
    );
};

const HelpTooltip = ({ children, content, position = 'top' }) => {
    const [isVisible, setIsVisible] = useState(false);

    return (
        <div className="relative inline-block">
            <div
                onMouseEnter={() => setIsVisible(true)}
                onMouseLeave={() => setIsVisible(false)}
            >
                {children}
            </div>
            
            {isVisible && (
                <div className={`absolute z-10 px-3 py-2 text-sm text-white bg-gray-900 rounded-lg shadow-lg whitespace-nowrap ${
                    position === 'top' ? 'bottom-full mb-2' : 
                    position === 'bottom' ? 'top-full mt-2' :
                    position === 'left' ? 'right-full mr-2' : 'left-full ml-2'
                }`}>
                    {content}
                    <div className={`absolute w-2 h-2 bg-gray-900 transform rotate-45 ${
                        position === 'top' ? 'top-full left-1/2 -translate-x-1/2 -mt-1' :
                        position === 'bottom' ? 'bottom-full left-1/2 -translate-x-1/2 -mb-1' :
                        position === 'left' ? 'left-full top-1/2 -translate-y-1/2 -ml-1' : 'right-full top-1/2 -translate-y-1/2 -mr-1'
                    }`} />
                </div>
            )}
        </div>
    );
};

export { OnboardingTour, HelpTooltip };
import React from 'react';

const Pagination = ({ currentPage, totalPages, onPageChange }) => {
    if (totalPages <= 1) {
        return null;
    }

    const pageNumbers = [];
    for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(i);
    }

    return (
        <div className="flex justify-center items-center mt-6">
            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                <button
                    onClick={() => onPageChange(currentPage - 1)}
                    disabled={currentPage === 1}
                    className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                >
                    <span className="sr-only">Anterior</span>
                    <i className="fas fa-chevron-left h-5 w-5"></i>
                </button>
                
                {/* Placeholder para l√≥gica de paginAÁ„o mais complexa (ex: ... ) */}
                {pageNumbers.map(number => (
                    <button
                        key={number}
                        onClick={() => onPageChange(number)}
                        className={`relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium ${
                            currentPage === number
                                ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                                : 'bg-white text-gray-700 hover:bg-gray-50'
                        }`}
                    >
                        {number}
                    </button>
                ))}

                <button
                    onClick={() => onPageChange(currentPage + 1)}
                    disabled={currentPage === totalPages}
                    className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
                >
                    <span className="sr-only">PrÛximo</span>
                    <i className="fas fa-chevron-right h-5 w-5"></i>
                </button>
            </nav>
        </div>
    );
};

export default Pagination;
import React, { useMemo } from 'react';
import { 
  FaExclamationTriangle, 
  FaBell, 
  FaArrowDown, 
  FaArrowUp,
  FaInfoCircle,
  FaChartLine,
  FaClock,
  FaBoxOpen
} from 'react-icons/fa';

const PredictiveAlerts = ({ products = [], movements = [] }) => {
  // Algoritmos de previs√£o e alertas
  const predictions = useMemo(() => {
    const alerts = [];
    const trends = [];
    const predictions = [];
    
    // 1. An√°lise de TendÍncia de Consumo
    products.forEach(product => {
      const totalQuantity = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + quantity, 0);
      
      // Produtos com estoque cr√≠tico
      if (totalQuantity <= (product.minStock || 5) && totalQuantity > 0) {
        alerts.push({
          type: 'warning',
          priority: 'medium',
          product: product.name,
          message: `Estoque baixo: ${totalQuantity} unidades restantes`,
          action: 'Repor estoque',
          icon: FaExclamationTriangle,
          color: 'orange'
        });
      }
      
      // Produtos sem estoque
      if (totalQuantity === 0) {
        alerts.push({
          type: 'danger',
          priority: 'high',
          product: product.name,
          message: 'Produto sem estoque',
          action: 'ReposiÁ„o urgente necess√°ria',
          icon: FaExclamationTriangle,
          color: 'red'
        });
      }
      
      // Produtos com estoque excessivo (acima de 100 unidades)
      if (totalQuantity > 100) {
        alerts.push({
          type: 'info',
          priority: 'low',
          product: product.name,
          message: `Estoque alto: ${totalQuantity} unidades`,
          action: 'Considerar promo√ß√£o ou redistribui√ß√£o',
          icon: FaInfoCircle,
          color: 'blue'
        });
      }
      
      // An√°lise de valor parado (produtos com alto valor e sem movimento)
      const productValue = totalQuantity * (product.price || 0);
      if (productValue > 1000 && totalQuantity > 50) {
        trends.push({
          type: 'insight',
          product: product.name,
          message: `Alto valor em estoque: R$ ${productValue.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}`,
          suggestion: 'Analisar rotatividade e considerar estrat√©gias de venda',
          icon: FaChartLine,
          color: 'purple'
        });
      }
    });
    
    // 2. Previsıes Simples baseadas em padr√µes
    const lowRotationProducts = products.filter(product => {
      const totalQuantity = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + quantity, 0);
      return totalQuantity > 20 && (product.price || 0) > 0;
    }).slice(0, 5);
    
    lowRotationProducts.forEach(product => {
      const totalQuantity = Object.values(product.locations || {})
        .reduce((sum, quantity) => sum + quantity, 0);
      
      // SimulAÁ„o de previs√£o de consumo (baseada em estoque atual)
      const estimatedDaysToFinish = Math.round(totalQuantity / 2); // Consumo estimado de 2 unidades por dia
      
      if (estimatedDaysToFinish <= 15) {
        predictions.push({
          type: 'prediction',
          product: product.name,
          message: `Previs√£o de esgotamento em ${estimatedDaysToFinish} dias`,
          suggestion: 'Programar ReposiÁ„o',
          icon: FaClock,
          color: 'yellow',
          daysLeft: estimatedDaysToFinish
        });
      }
    });
    
    return {
      alerts: alerts.sort((a, b) => {
        const priority = { high: 3, medium: 2, low: 1 };
        return priority[b.priority] - priority[a.priority];
      }),
      trends,
      predictions
    };
  }, [products, movements]);

  const { alerts, trends, predictions: predictiveData } = predictions;

  // Componente para renderizar um alerta
  const AlertCard = ({ alert }) => {
    const bgColor = {
      red: 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800',
      orange: 'bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800',
      blue: 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800',
      yellow: 'bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800',
      purple: 'bg-purple-50 dark:bg-purple-900/20 border-purple-200 dark:border-purple-800'
    };
    
    const textColor = {
      red: 'text-red-800 dark:text-red-200',
      orange: 'text-orange-800 dark:text-orange-200',
      blue: 'text-blue-800 dark:text-blue-200',
      yellow: 'text-yellow-800 dark:text-yellow-200',
      purple: 'text-purple-800 dark:text-purple-200'
    };
    
    const iconColor = {
      red: 'text-red-600',
      orange: 'text-orange-600',
      blue: 'text-blue-600',
      yellow: 'text-yellow-600',
      purple: 'text-purple-600'
    };

    return (
      <div className={`p-4 rounded-lg border-l-4 ${bgColor[alert.color]}`}>
        <div className="flex items-start">
          <alert.icon className={`mt-1 mr-3 text-lg ${iconColor[alert.color]}`} />
          <div className="flex-1">
            <h4 className={`font-semibold ${textColor[alert.color]}`}>
              {alert.product}
            </h4>
            <p className={`text-sm mt-1 ${textColor[alert.color]}`}>
              {alert.message}
            </p>
            <p className={`text-xs mt-2 font-medium ${textColor[alert.color]}`}>
              üí° {alert.action || alert.suggestion}
            </p>
            {alert.daysLeft && (
              <div className={`text-xs mt-2 font-bold ${textColor[alert.color]}`}>
                ‚è∞ {alert.daysLeft} dias restantes
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  if (alerts.length === 0 && trends.length === 0 && predictiveData.length === 0) {
    return (
      <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
        <div className="text-center text-gray-500 dark:text-gray-400">
          <FaBell className="mx-auto mb-4 text-4xl" />
          <p>Nenhum alerta ou previs√£o no momento</p>
          <p className="text-sm mt-2">Seus estoques est√£o em boas condi√ß√µes!</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Alertas Cr√≠ticos */}
      {alerts.length > 0 && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
            <FaBell className="text-red-600" />
            Alertas de Estoque ({alerts.length})
          </h3>
          <div className="space-y-3">
            {alerts.map((alert, index) => (
              <AlertCard key={index} alert={alert} />
            ))}
          </div>
        </div>
      )}

      {/* Insights e TendÍncias */}
      {trends.length > 0 && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
            <FaChartLine className="text-purple-600" />
            Insights de Neg√≥cio ({trends.length})
          </h3>
          <div className="space-y-3">
            {trends.map((trend, index) => (
              <AlertCard key={index} alert={trend} />
            ))}
          </div>
        </div>
      )}

      {/* Previsıes */}
      {predictiveData.length > 0 && (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
            <FaClock className="text-yellow-600" />
            Previsıes de Consumo ({predictiveData.length})
          </h3>
          <div className="space-y-3">
            {predictiveData.map((prediction, index) => (
              <AlertCard key={index} alert={prediction} />
            ))}
          </div>
        </div>
      )}

      {/* Resumo de RecomendAÁıes */}
      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 p-6 rounded-lg border border-blue-200 dark:border-blue-800">
        <h3 className="text-lg font-semibold text-blue-900 dark:text-blue-100 mb-4 flex items-center gap-2">
          <FaInfoCircle className="text-blue-600" />
          Resumo de AÁıes Recomendadas
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm">
            <div className="flex items-center gap-2 mb-2">
              <FaExclamationTriangle className="text-red-600" />
              <span className="font-medium text-gray-900 dark:text-white">ReposiÁ„o Urgente</span>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {alerts.filter(a => a.priority === 'high').length} produtos necessitam ReposiÁ„o imediata
            </p>
          </div>
          
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm">
            <div className="flex items-center gap-2 mb-2">
              <FaArrowDown className="text-orange-600" />
              <span className="font-medium text-gray-900 dark:text-white">Estoque Baixo</span>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {alerts.filter(a => a.priority === 'medium').length} produtos com estoque baixo
            </p>
          </div>
          
          <div className="bg-white dark:bg-gray-800 p-4 rounded-lg shadow-sm">
            <div className="flex items-center gap-2 mb-2">
              <FaChartLine className="text-purple-600" />
              <span className="font-medium text-gray-900 dark:text-white">Oportunidades</span>
            </div>
            <p className="text-sm text-gray-600 dark:text-gray-400">
              {trends.length} insights para otimizAÁ„o de estoque
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PredictiveAlerts;
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export default function PrivateRoute({ children }) {
    const { currentUser } = useAuth();

    return currentUser ? children : <Navigate to="/auth" />;
}
import React, { useState } from 'react';
import useFirestore from '../hooks/useFirestore';
import { db } from '../services/firebase';
import { collection, addDoc } from 'firebase/firestore';
import Papa from 'papaparse';
import * as XLSX from 'xlsx';
import toast from 'react-hot-toast';
import { FaDownload, FaUpload, FaFileExcel, FaFileCsv, FaFileCode } from 'react-icons/fa';

const ProductBulkImport = () => {
    const { docs: locations } = useFirestore('locations', { orderBy: ['name', 'asc'] });
    const { docs: categories } = useFirestore('categories', { orderBy: ['name', 'asc'] });
    const [isImporting, setIsImporting] = useState(false);

    const handleDownloadTemplate = (format = 'csv') => {
        const headers = [
            'Nome', 
            'Categoria', 
            'Unidade', 
            'EstoqueMinimo', 
            ...(locations && locations.length > 0 ? locations.map(loc => `Estoque_${loc.name.replace(/\s+/g, '_')}`) : ['Estoque_Local'])
        ];
        
        const sampleData = [
            {
                'Nome': 'Exemplo: Monitor 24 Polegadas',
                'Categoria': 'EletrÙnicos',
                'Unidade': 'un',
                'EstoqueMinimo': '5',
                ...(locations || []).reduce((acc, loc) => ({ ...acc, [`Estoque_${loc.name.replace(/\s+/g, '_')}`]: '10' }), {})
            }
        ];

        if (format === 'csv') {
            const csv = Papa.unparse({
                fields: headers,
                data: sampleData
            });

            const blob = new Blob(["\uFEFF" + csv], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', 'modelo_importacao_produtos.csv');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        } else if (format === 'xlsx') {
            const ws = XLSX.utils.json_to_sheet(sampleData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, 'Produtos');
            XLSX.writeFile(wb, 'modelo_importacao_produtos.xlsx');
        } else if (format === 'json') {
            const jsonData = JSON.stringify(sampleData, null, 2);
            const blob = new Blob([jsonData], { type: 'application/json;charset=utf-8;' });
            const link = document.createElement('a');
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', 'modelo_importacao_produtos.json');
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    };

    const parseFileData = (file, callback) => {
        const fileExtension = file.name.split('.').pop().toLowerCase();
        
        switch (fileExtension) {
            case 'csv':
                Papa.parse(file, {
                    header: true,
                    skipEmptyLines: true,
                    complete: callback,
                    error: (error) => {
                        toast.error(`Erro ao ler arquivo CSV: ${error.message}`);
                        setIsImporting(false);
                    }
                });
                break;
            
            case 'xlsx':
            case 'xls':
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, { type: 'array' });
                        const sheetName = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[sheetName];
                        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
                        
                        if (jsonData.length < 2) {
                            toast.error('Arquivo Excel deve conter pelo menos uma linha de cabeÁalho e uma linha de dados.');
                            setIsImporting(false);
                            return;
                        }
                        
                        const headers = jsonData[0];
                        const rows = jsonData.slice(1);
                        const parsedData = rows.map(row => {
                            const obj = {};
                            headers.forEach((header, index) => {
                                obj[header] = row[index] || '';
                            });
                            return obj;
                        });
                        
                        callback({ data: parsedData });
                    } catch (error) {
                        toast.error(`Erro ao ler arquivo Excel: ${error.message}`);
                        setIsImporting(false);
                    }
                };
                reader.onerror = () => {
                    toast.error('Erro ao ler o arquivo Excel.');
                    setIsImporting(false);
                };
                reader.readAsArrayBuffer(file);
                break;
            
            case 'json':
                const jsonReader = new FileReader();
                jsonReader.onload = (e) => {
                    try {
                        const jsonData = JSON.parse(e.target.result);
                        callback({ data: Array.isArray(jsonData) ? jsonData : [jsonData] });
                    } catch (error) {
                        toast.error(`Erro ao ler arquivo JSON: ${error.message}`);
                        setIsImporting(false);
                    }
                };
                jsonReader.onerror = () => {
                    toast.error('Erro ao ler o arquivo JSON.');
                    setIsImporting(false);
                };
                jsonReader.readAsText(file);
                break;
            
            default:
                toast.error(`Tipo de arquivo n„o suportado: .${fileExtension}. Use CSV, Excel (.xlsx/.xls) ou JSON.`);
                setIsImporting(false);
                break;
        }
    };

    // FunÁ„o para criar categoria se n„o existir
    const createCategoryIfNotExists = async (categoryName, categoriesMap) => {
        const normalizedName = categoryName.toLowerCase();
        if (categoriesMap.has(normalizedName)) {
            return categoriesMap.get(normalizedName);
        }

        try {
            const docRef = await addDoc(collection(db, 'categories'), {
                name: categoryName.trim()
            });
            categoriesMap.set(normalizedName, docRef.id);
            toast.success(`Nova categoria criada: "${categoryName}"`);
            return docRef.id;
        } catch (error) {
            toast.error(`Erro ao criar categoria "${categoryName}": ${error.message}`);
            return null;
        }
    };

    // FunÁ„o para criar localidade se n„o existir
    const createLocationIfNotExists = async (locationName, locationsMap) => {
        const fieldName = `Estoque_${locationName.replace(/\s+/g, '_')}`;
        if (locationsMap.has(fieldName)) {
            return locationsMap.get(fieldName);
        }

        try {
            const docRef = await addDoc(collection(db, 'locations'), {
                name: locationName.trim()
            });
            locationsMap.set(fieldName, docRef.id);
            toast.success(`Nova localidade criada: "${locationName}"`);
            return docRef.id;
        } catch (error) {
            toast.error(`Erro ao criar localidade "${locationName}": ${error.message}`);
            return null;
        }
    };

    const handleFileUpload = (event) => {
        const file = event.target.files[0];
        if (!file) {
            return;
        }

        const allowedTypes = ['csv', 'xlsx', 'xls', 'json'];
        const fileExtension = file.name.split('.').pop().toLowerCase();
        
        if (!allowedTypes.includes(fileExtension)) {
            toast.error(`Tipo de arquivo n„o suportado. Use: ${allowedTypes.join(', ')}`);
            return;
        }

        setIsImporting(true);
        
        parseFileData(file, async (results) => {
            const productsToImport = results.data;
            const categoriesMap = new Map((categories || []).map(cat => [cat.name.toLowerCase(), cat.id]));
            const locationsMap = new Map((locations || []).map(loc => [`Estoque_${loc.name.replace(/\s+/g, '_')}`, loc.id]));

            // Identificar todas as categorias e localidades ˙nicas da planilha
            const uniqueCategories = new Set();
            const uniqueLocations = new Set();

            productsToImport.forEach(productRow => {
                const { Categoria, ...stockFields } = productRow;
                if (Categoria) {
                    uniqueCategories.add(Categoria.trim());
                }
                
                // Extrair nomes de localidades dos campos de estoque
                Object.keys(stockFields).forEach(field => {
                    if (field.startsWith('Estoque_') && stockFields[field]) {
                        const locationName = field.replace('Estoque_', '').replace(/_/g, ' ');
                        uniqueLocations.add(locationName);
                    }
                });
            });

            // Criar categorias e localidades que n„o existem
            toast.loading('Verificando e criando categorias e localidades...', { id: 'creating-entities' });
            
            for (const categoryName of uniqueCategories) {
                await createCategoryIfNotExists(categoryName, categoriesMap);
            }

            for (const locationName of uniqueLocations) {
                await createLocationIfNotExists(locationName, locationsMap);
            }

            toast.dismiss('creating-entities');
            toast.loading('Importando produtos...', { id: 'importing-products' });

            const promises = (productsToImport || []).map(async (productRow) => {
                const { Nome, Categoria, Unidade, EstoqueMinimo, ...stockFields } = productRow;

                if (!Nome || !Categoria) {
                    toast.error(`Produto "${Nome || 'Sem nome'}" ignorado: Nome e Categoria s„o obrigatÛrios.`);
                    return Promise.resolve();
                }

                const categoryId = categoriesMap.get(Categoria.toLowerCase());
                if (!categoryId) {
                    toast.error(`Produto "${Nome}" ignorado: Erro ao obter categoria "${Categoria}".`);
                    return Promise.resolve();
                }

                const locationQuantities = {};
                for (const [field, value] of Object.entries(stockFields)) {
                    if (field.startsWith('Estoque_') && value) {
                        const locationId = locationsMap.get(field);
                        if (locationId) {
                            locationQuantities[locationId] = Number(value) || 0;
                        }
                    }
                }

                const newProduct = {
                    name: Nome,
                    categoryId,
                    unit: Unidade || 'un',
                    minStock: Number(EstoqueMinimo) || 0,
                    locations: locationQuantities
                };

                return addDoc(collection(db, 'products'), newProduct);
            });

            try {
                const results = await Promise.allSettled(promises);
                const successCount = results.filter(r => r.status === 'fulfilled').length;
                toast.dismiss('importing-products');
                toast.success(`${successCount} de ${productsToImport.length} produtos foram importados com sucesso!`);
            } catch (error) {
                toast.dismiss('importing-products');
                toast.error(`Ocorreu um erro durante a importaÁ„o: ${error.message}`);
            } finally {
                setIsImporting(false);
                event.target.value = null;
            }
        });
    };

    return (
        <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-bold text-gray-800 mb-4">ImportaÁ„o em Massa de Produtos</h3>
            <p className="text-gray-600 mb-6">
                Para adicionar m˙ltiplos produtos de uma vez, baixe uma planilha modelo, preencha com os dados e importe o arquivo aqui.
                Formatos suportados: <strong>CSV, Excel (.xlsx/.xls) e JSON</strong>.
                <br />
                <span className="text-green-600 font-medium"> Novo:</span> Categorias e localidades que n„o existirem ser„o criadas automaticamente durante a importaÁ„o!
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="border border-gray-200 rounded-lg p-4 text-center">
                    <FaFileCsv className="mx-auto text-3xl text-green-600 mb-2" />
                    <h4 className="font-semibold text-gray-800 mb-2">CSV</h4>
                    <p className="text-sm text-gray-600 mb-3">Formato simples e compatÌvel</p>
                    <button
                        onClick={() => handleDownloadTemplate('csv')}
                        className="w-full bg-green-600 text-white font-semibold py-2 px-4 rounded hover:bg-green-700 transition duration-300 text-sm"
                    >
                        <FaDownload className="inline mr-1" />
                        Baixar CSV
                    </button>
                </div>
                
                <div className="border border-gray-200 rounded-lg p-4 text-center">
                    <FaFileExcel className="mx-auto text-3xl text-blue-600 mb-2" />
                    <h4 className="font-semibold text-gray-800 mb-2">Excel</h4>
                    <p className="text-sm text-gray-600 mb-3">Planilha com formataÁ„o</p>
                    <button
                        onClick={() => handleDownloadTemplate('xlsx')}
                        className="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded hover:bg-blue-700 transition duration-300 text-sm"
                    >
                        <FaDownload className="inline mr-1" />
                        Baixar Excel
                    </button>
                </div>
                
                <div className="border border-gray-200 rounded-lg p-4 text-center">
                    <FaFileCode className="mx-auto text-3xl text-purple-600 mb-2" />
                    <h4 className="font-semibold text-gray-800 mb-2">JSON</h4>
                    <p className="text-sm text-gray-600 mb-3">Formato para desenvolvedores</p>
                    <button
                        onClick={() => handleDownloadTemplate('json')}
                        className="w-full bg-purple-600 text-white font-semibold py-2 px-4 rounded hover:bg-purple-700 transition duration-300 text-sm"
                    >
                        <FaDownload className="inline mr-1" />
                        Baixar JSON
                    </button>
                </div>
            </div>
            
            <div className="border-t border-gray-200 pt-6">
                <label htmlFor="file-upload" className="flex items-center justify-center bg-orange-500 text-white font-semibold py-3 px-6 sm:py-4 sm:px-8 rounded-lg hover:bg-orange-600 transition duration-300 cursor-pointer min-h-[44px] sm:min-h-[48px] text-sm sm:text-base">
                    <FaUpload className="mr-2 w-4 h-4 sm:w-5 sm:h-5" />
                    {isImporting ? 'Importando...' : 'Importar Arquivo'}
                </label>
                <input
                    type="file"
                    id="file-upload"
                    className="hidden"
                    accept=".csv,.xlsx,.xls,.json"
                    onChange={handleFileUpload}
                    disabled={isImporting}
                />
                <p className="text-xs text-gray-500 mt-2 text-center">
                    Tipos aceitos: CSV, Excel (.xlsx, .xls), JSON
                </p>
            </div>
        </div>
    );
};

export default ProductBulkImport;
import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { db } from '../services/firebase';
import { collection, addDoc, doc, updateDoc } from 'firebase/firestore';
import Modal from './Modal';
import useFirestore from '../hooks/useFirestore';

export default function ProductFormModal({ isOpen, onClose, productToEdit }) {
    const { docs: categories } = useFirestore('categories');
    const [formData, setFormData] = useState({});
    const [loading, setLoading] = useState(false);

    const isEditing = !!productToEdit;

    useEffect(() => {
        if (isEditing) {
            setFormData({
                name: productToEdit.name || '',
                categoryId: productToEdit.categoryId || '',
                price: productToEdit.price || 0,
                description: productToEdit.description || '',
                minStock: productToEdit.minStock || 0,
            });
        } else {
            // Reset form for new product
            setFormData({
                name: '',
                categoryId: '',
                price: 0,
                description: '',
                minStock: 0,
            });
        }
    }, [productToEdit, isOpen]); // Reset form when modal opens or product changes

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setLoading(true);

        const promise = new Promise(async (resolve, reject) => {
            try {
                const dataToSave = {
                    ...formData,
                    price: Number(formData.price),
                    minStock: Number(formData.minStock),
                };

                if (isEditing) {
                    const productRef = doc(db, 'products', productToEdit.id);
                    await updateDoc(productRef, dataToSave);
                } else {
                    await addDoc(collection(db, 'products'), {
                        ...dataToSave,
                        totalQuantity: 0, // New products start with 0 quantity
                        createdAt: new Date(),
                    });
                }
                resolve();
            } catch (err) {
                console.error('Error saving product:', err);
                reject(err);
            }
        });

        toast.promise(promise, {
            loading: 'Salvando produto...',
            success: 'Produto salvo com sucesso!',
            error: 'Falha ao salvar o produto.',
        }).then(() => {
            onClose();
        }).finally(() => {
            setLoading(false);
        });
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={isEditing ? 'Editar Produto' : 'Adicionar Novo Produto'}>
            <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700">Nome do Produto</label>
                    <input type="text" name="name" id="name" value={formData.name || ''} onChange={handleChange} required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="categoryId" className="block text-sm font-medium text-gray-700">Categoria</label>
                    <select name="categoryId" id="categoryId" value={formData.categoryId || ''} onChange={handleChange} required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm bg-white">
                        <option value="" disabled>Selecione uma categoria</option>
                        {categories && categories.length > 0 ? (
                            categories.map(cat => <option key={cat.id} value={cat.id}>{cat.name}</option>)
                        ) : (
                            <option value="" disabled>Carregando categorias...</option>
                        )}
                    </select>
                </div>

                <div>
                    <label htmlFor="price" className="block text-sm font-medium text-gray-700">Pre√ßo (R$)</label>
                    <input type="number" name="price" id="price" value={formData.price || ''} onChange={handleChange} required min="0" step="0.01" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="minStock" className="block text-sm font-medium text-gray-700">Estoque M√≠nimo</label>
                    <input type="number" name="minStock" id="minStock" value={formData.minStock || ''} onChange={handleChange} required min="0" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="description" className="block text-sm font-medium text-gray-700">Descri√ß√£o</label>
                    <textarea name="description" id="description" value={formData.description || ''} onChange={handleChange} rows="3" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"></textarea>
                </div>

                <div className="flex justify-end pt-4 space-x-2">
                    <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancelar</button>
                    <button type="submit" disabled={loading} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300">
                        {loading ? 'Salvando...' : 'Salvar Produto'}
                    </button>
                </div>
            </form>
        </Modal>
    );
}
import React from 'react';
import ProductModal from './ProductModal';
import { FaPlus } from 'react-icons/fa';
import { useStockManagement } from '../hooks/useStockManagement';
import { useAuth } from '../context/AuthContext';
import { useAutoNotifications } from '../hooks/useNotificationHelpers';

const ProductManager = () => {
    const { userData } = useAuth();
    const {
        locations,
        isModalOpen,
        selectedProduct,
        handleOpenModal,
        handleCloseModal,
    } = useStockManagement();
    
    // Ativar notificAÁıes autom√°ticas
    useAutoNotifications();

    return (
        <>
            <div className="bg-white p-6 rounded-lg shadow-md">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-4">
                    <h3 className="text-xl font-bold text-gray-800">Cadastro de Produtos</h3>
                    <button 
                        onClick={() => handleOpenModal()}
                        className="flex items-center justify-center bg-blue-500 text-white font-semibold py-3 px-6 sm:py-4 sm:px-8 rounded-lg hover:bg-blue-600 transition duration-300 min-h-[44px] sm:min-h-[48px] text-sm sm:text-base w-full sm:w-auto"
                    >
                        <FaPlus className="mr-2 w-4 h-4 sm:w-5 sm:h-5" />
                        Adicionar Produto
                    </button>
                </div>
                <p className="text-gray-600">
                    Clique no bot√£o para adicionar um novo item ao seu invent√°rio. VocÍ poder√° definir nome, categoria, estoque m√≠nimo e as quantidades em cada local de armazenamento.
                </p>
            </div>

            <ProductModal 
                isOpen={isModalOpen} 
                onClose={handleCloseModal} 
                productToEdit={selectedProduct}
                locations={locations}
                userData={userData}
            />
        </>
    );
};

export default ProductManager;
import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, addDoc, doc, updateDoc, serverTimestamp, writeBatch } from 'firebase/firestore';
import toast from 'react-hot-toast';
import useFirestore from '../hooks/useFirestore';
import { ensureArray } from '../utils/arrayHelpers';
import { useUserActionNotifications } from '../hooks/useNotificationHelpers';

const ProductModal = ({ isOpen, onClose, productToEdit, locations, userData }) => {
    const [name, setName] = useState('');
    const [categoryId, setCategoryId] = useState('');
    const [unit, setUnit] = useState('un');
        const [minStock, setMinStock] = useState('');
    const [cost, setCost] = useState('');
    const [stockQuantities, setStockQuantities] = useState({});

    const { docs: categories } = useFirestore('categories');
    const { notifyProductAdded, notifyProductUpdated } = useUserActionNotifications();

    useEffect(() => {
        if (isOpen) {
            if (productToEdit) {
                setName(productToEdit.name || '');
                setCategoryId(productToEdit.categoryId || '');
                setUnit(productToEdit.unit || 'un');
                                setMinStock(productToEdit.minStock || '');
                setCost(productToEdit.cost || '');
                setStockQuantities(productToEdit.locations || {});
            } else {
                // Reset for new product
                setName('');
                setCategoryId('');
                setUnit('un');
                                setMinStock('');
                setCost('');
                setStockQuantities({});
            }
        } 
    }, [productToEdit, isOpen]);

    const handleQuantityChange = (locationId, value) => {
        // Allow empty string to clear input, but store as 0 if needed
        const numericValue = value === '' ? '' : Number(value);
        if (numericValue < 0) return; // Prevent negative stock
        setStockQuantities(prev => ({ ...prev, [locationId]: numericValue }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!name || !categoryId || !unit) {
            toast.error('Por favor, preencha todos os campos obrigat√≥rios.');
            return;
        }

        // Create a clean version of stockQuantities with numbers
        const finalStockQuantities = Object.entries(stockQuantities).reduce((acc, [key, value]) => {
            acc[key] = Number(value) || 0;
            return acc;
        }, {});

        const productData = {
            name,
            categoryId,
            unit,
                        minStock: Number(minStock) || 0,
            cost: Number(cost) || 0,
            locations: finalStockQuantities,
            updatedAt: serverTimestamp(),
        };

        const promise = async () => {
            let productId = productToEdit?.id;

            if (productToEdit) {
                const productRef = doc(db, 'products', productId);
                await updateDoc(productRef, productData);
            } else {
                const docRef = await addDoc(collection(db, 'products'), {
                    ...productData,
                    createdAt: serverTimestamp(),
                });
                productId = docRef.id;
            }

            // --- Kardex Movement Logging ---
            const batch = writeBatch(db);
            const movementsRef = collection(db, 'movements');
            const oldQuantities = productToEdit?.locations || {};
            const locationMap = ensureArray(locations, 'locations').reduce((acc, loc) => {
                acc[loc.id] = loc.name;
                return acc;
            }, {});

            const allLocationIds = new Set([...Object.keys(oldQuantities), ...Object.keys(finalStockQuantities)]);

            allLocationIds.forEach(locationId => {
                const oldQty = Number(oldQuantities[locationId] || 0);
                const newQty = Number(finalStockQuantities[locationId] || 0);

                if (oldQty !== newQty) {
                    const movementDoc = doc(movementsRef);
                    batch.set(movementDoc, {
                        productId,
                        productName: name,
                        locationId,
                        locationName: locationMap[locationId] || 'N/A',
                        quantityBefore: oldQty,
                        quantityAfter: newQty,
                        quantityChanged: newQty - oldQty,
                        type: productToEdit ? 'Ajuste Manual' : 'Entrada Inicial',
                        userId: userData?.uid || 'unknown',
                        userName: userData?.displayName || userData?.email || 'unknown',
                        timestamp: serverTimestamp(),
                    });
                }
            });
            
            await batch.commit();
        };

        toast.promise(promise(), {
            loading: 'Salvando produto...',
            success: (result) => {
                // Adicionar notificAÁ„o baseada na AÁ„o
                if (productToEdit) {
                    notifyProductUpdated(name);
                } else {
                    notifyProductAdded(name);
                }
                return `Produto "${name}" salvo com sucesso!`;
            },
            error: (err) => `Falha ao salvar: ${err.message}`,
        });

        onClose();
    };

    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
            <div className="bg-white p-8 rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
                <h2 className="text-2xl font-bold mb-6 text-gray-800">{productToEdit ? 'Editar Produto' : 'Adicionar Produto'}</h2>
                <form onSubmit={handleSubmit}>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="md:col-span-2">
                            <label htmlFor="productName" className="block text-sm font-medium text-gray-700 mb-1">Nome do Produto</label>
                            <input
                                type="text"
                                id="productName"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                required
                            />
                        </div>

                        <div>
                            <label htmlFor="category" className="block text-sm font-medium text-gray-700 mb-1">Categoria</label>
                            <select
                                id="category"
                                value={categoryId}
                                onChange={(e) => setCategoryId(e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                                <option value="" disabled>Selecione...</option>
                                {ensureArray(categories, 'categories').length > 0 ? (
                                    ensureArray(categories, 'categories').map(cat => (
                                        <option key={cat.id} value={cat.id}>{cat.name}</option>
                                    ))
                                ) : (
                                    <option value="" disabled>Carregando categorias...</option>
                                )}
                            </select>
                        </div>

                        <div>
                            <label htmlFor="unit" className="block text-sm font-medium text-gray-700 mb-1">Unidade</label>
                            <select
                                id="unit"
                                value={unit}
                                onChange={(e) => setUnit(e.target.value)}
                                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                required
                            >
                                <option value="un">Unidade (un)</option>
                                <option value="kg">Quilograma (kg)</option>
                                <option value="g">Grama (g)</option>
                                <option value="m">Metro (m)</option>
                                <option value="l">Litro (l)</option>
                                <option value="caixa">Caixa (cx)</option>
                            </select>
                        </div>

                        <div className="md:col-span-2">
                            <label htmlFor="minStock" className="block text-sm font-medium text-gray-700 mb-1">Estoque M√≠nimo (Total)</label>
                            <input
                                type="number"
                                id="minStock"
                                value={minStock}
                                onChange={(e) => setMinStock(e.target.value)}
                                placeholder="Ex: 10"
                                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>

                        <div className="md:col-span-2">
                            <label htmlFor="cost" className="block text-sm font-medium text-gray-700 mb-1">Custo por Unidade (R$)</label>
                            <input
                                type="number"
                                id="cost"
                                value={cost}
                                onChange={(e) => setCost(e.target.value)}
                                placeholder="Ex: 25.50"
                                step="0.01"
                                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                            />
                        </div>
                    </div>

                    <div className="mt-8">
                        <h3 className="text-lg font-semibold text-gray-800 mb-4 border-b pb-2">Estoque por Localidade</h3>
                        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                            {ensureArray(locations, 'locations').length > 0 ? (
                                ensureArray(locations, 'locations').map(location => (
                                    <div key={location.id}>
                                        <label htmlFor={`loc-${location.id}`} className="block text-sm font-medium text-gray-700 mb-1">{location.name}</label>
                                        <input
                                            type="number"
                                            id={`loc-${location.id}`}
                                        value={stockQuantities[location.id] || ''}
                                        onChange={(e) => handleQuantityChange(location.id, e.target.value)}
                                        placeholder="0"
                                        min="0"
                                        className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                    />
                                </div>
                            ))
                            ) : (
                                <div className="col-span-full text-center text-gray-500">
                                    Carregando localidades...
                                </div>
                            )}
                        </div>
                    </div>

                    <div className="flex justify-end gap-4 mt-8 pt-6 border-t">
                        <button type="button" onClick={onClose} className="bg-gray-200 text-gray-800 font-bold py-2 px-6 rounded-lg hover:bg-gray-300 transition duration-300">
                            Cancelar
                        </button>
                        <button type="submit" className="bg-blue-600 text-white font-bold py-2 px-6 rounded-lg hover:bg-blue-700 transition duration-300">
                            {productToEdit ? 'Salvar AlterAÁıes' : 'Adicionar Produto'}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

export default ProductModal;
import React, { useState, useMemo, useRef, useEffect } from 'react';
import { FaSearch, FaTimes, FaChevronDown, FaBox } from 'react-icons/fa';
import useFirestore from '../hooks/useFirestore';

const ProductSelector = ({ onProductSelect, selectedProductId, placeholder = "Selecione um produto" }) => {
    const { docs: products, loading } = useFirestore('products', { field: 'name', direction: 'asc' });
    const { docs: categories } = useFirestore('categories');
    
    const [isOpen, setIsOpen] = useState(false);
    const [searchTerm, setSearchTerm] = useState('');
    const [selectedCategory, setSelectedCategory] = useState('');
    const [selectedProduct, setSelectedProduct] = useState(null);
    
    const dropdownRef = useRef(null);
    const searchInputRef = useRef(null);

    // Encontrar produto selecionado
    useEffect(() => {
        if (selectedProductId && products) {
            const product = products.find(p => p.id === selectedProductId);
            setSelectedProduct(product || null);
        } else {
            setSelectedProduct(null);
        }
    }, [selectedProductId, products]);

    // Fechar dropdown ao clicar fora
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    // Focar no input de busca quando abrir
    useEffect(() => {
        if (isOpen && searchInputRef.current) {
            searchInputRef.current.focus();
        }
    }, [isOpen]);

    // Filtrar produtos
    const filteredProducts = useMemo(() => {
        if (!products) return [];

        return products.filter(product => {
            // Filtro por nome
            const matchesName = product.name.toLowerCase().includes(searchTerm.toLowerCase());
            
            // Filtro por CÛdigo (se existir)
            const matchesCode = product.code ? 
                product.code.toLowerCase().includes(searchTerm.toLowerCase()) : false;
            
            // Filtro por categoria
            const matchesCategory = selectedCategory === '' || product.categoryId === selectedCategory;
            
            return (matchesName || matchesCode) && matchesCategory;
        });
    }, [products, searchTerm, selectedCategory]);

    const handleProductSelect = (product) => {
        setSelectedProduct(product);
        onProductSelect(product);
        setIsOpen(false);
        setSearchTerm('');
    };

    const clearSelection = () => {
        setSelectedProduct(null);
        onProductSelect(null);
        setSearchTerm('');
    };

    const openDropdown = () => {
        setIsOpen(true);
        setSearchTerm('');
    };

    if (loading) {
        return (
            <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Produto
                </label>
                <div className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-100 dark:bg-gray-700 animate-pulse">
                    <span className="text-gray-500 dark:text-gray-400">Carregando produtos...</span>
                </div>
            </div>
        );
    }

    return (
        <div className="space-y-2" ref={dropdownRef}>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                Produto
            </label>
            
            {/* Input Principal */}
            <div className="relative">
                <div
                    onClick={openDropdown}
                    className={`w-full p-3 border rounded-lg cursor-pointer transition-colors duration-200 flex items-center justify-between ${
                        isOpen 
                            ? 'border-blue-500 ring-2 ring-blue-200 dark:ring-blue-800' 
                            : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'
                    } bg-white dark:bg-gray-700`}
                >
                    <div className="flex items-center gap-2 flex-1">
                        <FaBox className="text-gray-400 dark:text-gray-500" />
                        <span className={`${selectedProduct ? 'text-gray-900 dark:text-white' : 'text-gray-500 dark:text-gray-400'}`}>
                            {selectedProduct ? selectedProduct.name : placeholder}
                        </span>
                    </div>
                    
                    <div className="flex items-center gap-2">
                        {selectedProduct && (
                            <button
                                onClick={(e) => {
                                    e.stopPropagation();
                                    clearSelection();
                                }}
                                className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
                            >
                                <FaTimes />
                            </button>
                        )}
                        <FaChevronDown 
                            className={`text-gray-400 transition-transform duration-200 ${isOpen ? 'rotate-180' : ''}`} 
                        />
                    </div>
                </div>

                {/* Dropdown */}
                {isOpen && (
                    <div className="absolute z-50 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-96 overflow-hidden">
                        {/* Header com filtros */}
                        <div className="p-3 border-b border-gray-200 dark:border-gray-600 space-y-3">
                            {/* Busca por nome/CÛdigo */}
                            <div className="relative">
                                <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                                <input
                                    ref={searchInputRef}
                                    type="text"
                                    placeholder="Buscar por nome ou CÛdigo..."
                                    value={searchTerm}
                                    onChange={(e) => setSearchTerm(e.target.value)}
                                    className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                />
                            </div>

                            {/* Filtro por categoria */}
                            <select
                                value={selectedCategory}
                                onChange={(e) => setSelectedCategory(e.target.value)}
                                className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                            >
                                <option value="">Todas as categorias</option>
                                {categories && categories.map(category => (
                                    <option key={category.id} value={category.id}>
                                        {category.name}
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Lista de produtos */}
                        <div className="max-h-64 overflow-y-auto">
                            {filteredProducts.length === 0 ? (
                                <div className="p-4 text-center text-gray-500 dark:text-gray-400">
                                    <FaBox className="mx-auto mb-2 text-2xl" />
                                    <p>Nenhum produto encontrado</p>
                                    <p className="text-sm">Tente ajustar os filtros</p>
                                </div>
                            ) : (
                                filteredProducts.map(product => {
                                    const category = categories?.find(cat => cat.id === product.categoryId);
                                    const totalStock = Object.values(product.locations || {})
                                        .reduce((sum, quantity) => sum + quantity, 0);
                                    
                                    return (
                                        <div
                                            key={product.id}
                                            onClick={() => handleProductSelect(product)}
                                            className={`p-3 cursor-pointer transition-colors duration-150 border-b border-gray-100 dark:border-gray-700 last:border-b-0 ${
                                                selectedProduct?.id === product.id
                                                    ? 'bg-blue-50 dark:bg-blue-900/20'
                                                    : 'hover:bg-gray-50 dark:hover:bg-gray-700'
                                            }`}
                                        >
                                            <div className="flex items-center justify-between">
                                                <div className="flex-1">
                                                    <h4 className="font-medium text-gray-900 dark:text-white">
                                                        {product.name}
                                                    </h4>
                                                    <div className="flex items-center gap-3 mt-1 text-sm text-gray-500 dark:text-gray-400">
                                                        {product.code && (
                                                            <span>CÛdigo: {product.code}</span>
                                                        )}
                                                        {category && (
                                                            <span>Categoria: {category.name}</span>
                                                        )}
                                                    </div>
                                                </div>
                                                <div className="text-right">
                                                    <div className={`text-sm font-medium ${
                                                        totalStock <= (product.minStock || 5)
                                                            ? 'text-red-600 dark:text-red-400'
                                                            : 'text-green-600 dark:text-green-400'
                                                    }`}>
                                                        {totalStock} unid.
                                                    </div>
                                                    {product.price && (
                                                        <div className="text-xs text-gray-500 dark:text-gray-400">
                                                            R$ {product.price.toFixed(2)}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    );
                                })
                            )}
                        </div>

                        {/* Footer com informaÁıes */}
                        {filteredProducts.length > 0 && (
                            <div className="p-2 border-t border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700">
                                <p className="text-xs text-gray-500 dark:text-gray-400 text-center">
                                    {filteredProducts.length} produto(s) encontrado(s)
                                </p>
                            </div>
                        )}
                    </div>
                )}
            </div>

            {/* informaÁıes do produto selecionado */}
            {selectedProduct && (
                <div className="mt-2 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                    <div className="flex items-center justify-between">
                        <div>
                            <h4 className="font-medium text-blue-900 dark:text-blue-100">
                                {selectedProduct.name}
                            </h4>
                            <div className="flex items-center gap-3 mt-1 text-sm text-blue-700 dark:text-blue-300">
                                {selectedProduct.code && (
                                    <span>CÛdigo: {selectedProduct.code}</span>
                                )}
                                <span>
                                    Estoque: {Object.values(selectedProduct.locations || {})
                                        .reduce((sum, quantity) => sum + quantity, 0)} unid.
                                </span>
                            </div>
                        </div>
                        {selectedProduct.price && (
                            <div className="text-right">
                                <div className="text-sm font-medium text-blue-900 dark:text-blue-100">
                                    R$ {selectedProduct.price.toFixed(2)}
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

export default ProductSelector;
import React, { useState } from 'react';
import { 
  FaTimes, 
  FaDownload, 
  FaFileExcel, 
  FaFilePdf,
  FaShoppingCart,
  FaDollarSign,
  FaExclamationTriangle,
  FaBox,
  FaUser,
  FaCalendarAlt
} from 'react-icons/fa';
import { PURCHASE_LIST_STATUS } from '../utils/replenishmentPermissions';

const PurchaseListModal = ({ isOpen, onClose, list, onExport, canExport }) => {
  const [exportFormat, setExportFormat] = useState('excel');
  const [exporting, setExporting] = useState(false);

  if (!isOpen || !list) return null;

  const handleExport = async (format) => {
    setExporting(true);
    try {
      await onExport(list, format);
    } catch (error) {
      console.error('Erro ao exportar:', error);
    } finally {
      setExporting(false);
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      [PURCHASE_LIST_STATUS.GENERATED]: 'bg-blue-100 text-blue-800',
      [PURCHASE_LIST_STATUS.REVIEWED]: 'bg-yellow-100 text-yellow-800',
      [PURCHASE_LIST_STATUS.SENT_TO_SUPPLIER]: 'bg-purple-100 text-purple-800',
      [PURCHASE_LIST_STATUS.RECEIVED]: 'bg-green-100 text-green-800',
      [PURCHASE_LIST_STATUS.COMPLETED]: 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  const getPriorityColor = (priority) => {
    const colors = {
      critical: 'bg-red-100 text-red-800',
      high: 'bg-orange-100 text-orange-800',
      medium: 'bg-yellow-100 text-yellow-800',
      low: 'bg-green-100 text-green-800'
    };
    return colors[priority] || 'bg-gray-100 text-gray-800';
  };

  const groupedBySupplier = list.items?.reduce((groups, item) => {
    const supplier = item.supplierName || 'Sem fornecedor';
    if (!groups[supplier]) {
      groups[supplier] = [];
    }
    groups[supplier].push(item);
    return groups;
  }, {}) || {};

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">
              {list.title}
            </h2>
            <div className="flex items-center space-x-4 mt-2">
              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(list.status)}`}>
                {list.status}
              </span>
              <div className="flex items-center text-sm text-gray-600">
                <FaUser className="w-3 h-3 mr-1" />
                {list.createdByName}
              </div>
              <div className="flex items-center text-sm text-gray-600">
                <FaCalendarAlt className="w-3 h-3 mr-1" />
                {new Date(list.createdAt).toLocaleDateString()}
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-3">
            {canExport && (
              <div className="flex items-center space-x-2">
                <select
                  value={exportFormat}
                  onChange={(e) => setExportFormat(e.target.value)}
                  className="px-3 py-1 border border-gray-300 rounded text-sm"
                >
                  <option value="excel">Excel</option>
                  <option value="pdf">PDF</option>
                  <option value="csv">CSV</option>
                </select>
                <button
                  onClick={() => handleExport(exportFormat)}
                  disabled={exporting}
                  className="flex items-center space-x-1 px-3 py-1 bg-green-600 text-white rounded hover:bg-green-700 disabled:opacity-50"
                >
                  <FaDownload className="w-3 h-3" />
                  <span>{exporting ? 'Exportando...' : 'Exportar'}</span>
                </button>
              </div>
            )}
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <FaTimes className="w-5 h-5" />
            </button>
          </div>
        </div>

        {/* Resumo */}
        <div className="p-6 bg-gray-50 border-b">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Resumo da Lista</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaBox className="w-6 h-6 text-blue-600 mr-3" />
                <div>
                  <p className="text-sm text-gray-600">Total de Itens</p>
                  <p className="text-2xl font-bold text-blue-600">
                    {list.summary?.totalItems || list.items?.length || 0}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaExclamationTriangle className="w-6 h-6 text-red-600 mr-3" />
                <div>
                  <p className="text-sm text-gray-600">Itens Cr√≠ticos</p>
                  <p className="text-2xl font-bold text-red-600">
                    {list.summary?.criticalItems || 0}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaDollarSign className="w-6 h-6 text-green-600 mr-3" />
                <div>
                  <p className="text-sm text-gray-600">Custo Total</p>
                  <p className="text-2xl font-bold text-green-600">
                    R$ {(list.summary?.totalCost || 0).toFixed(2)}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaShoppingCart className="w-6 h-6 text-purple-600 mr-3" />
                <div>
                  <p className="text-sm text-gray-600">Fornecedores</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {Object.keys(groupedBySupplier).length}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Itens por Fornecedor */}
        <div className="flex-1 overflow-y-auto p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            Itens Agrupados por Fornecedor
          </h3>
          
          <div className="space-y-6">
            {Object.entries(groupedBySupplier).map(([supplier, items]) => {
              const supplierTotal = items.reduce((sum, item) => sum + (item.totalCost || 0), 0);
              
              return (
                <div key={supplier} className="border border-gray-200 rounded-lg overflow-hidden">
                  <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium text-gray-900">
                        {supplier}
                      </h4>
                      <div className="flex items-center space-x-4">
                        <span className="text-sm text-gray-600">
                          {items.length} {items.length === 1 ? 'item' : 'itens'}
                        </span>
                        <span className="text-sm font-semibold text-gray-900">
                          R$ {supplierTotal.toFixed(2)}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="overflow-x-auto">
                    <table className="w-full">
                      <thead className="bg-gray-50">
                        <tr>
                          <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">
                            Produto
                          </th>
                          <th className="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                            Estoque Atual
                          </th>
                          <th className="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                            Qtd. Sugerida
                          </th>
                          <th className="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                            Pre√ßo Unit.
                          </th>
                          <th className="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                            Total
                          </th>
                          <th className="px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase">
                            Prioridade
                          </th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200">
                        {items.map((item, index) => (
                          <tr key={index} className="hover:bg-gray-50">
                            <td className="px-4 py-3">
                              <div>
                                <div className="text-sm font-medium text-gray-900">
                                  {item.productName}
                                </div>
                                <div className="text-xs text-gray-500">
                                  Min: {item.minStock} | Max: {item.maxStock}
                                </div>
                              </div>
                            </td>
                            
                            <td className="px-4 py-3 text-center">
                              <span className={`text-sm ${
                                item.currentStock <= item.minStock 
                                  ? 'text-red-600 font-semibold' 
                                  : 'text-gray-900'
                              }`}>
                                {item.currentStock}
                              </span>
                            </td>
                            
                            <td className="px-4 py-3 text-center text-sm text-gray-900">
                              {item.suggestedQuantity}
                            </td>
                            
                            <td className="px-4 py-3 text-center text-sm text-gray-900">
                              R$ {(item.unitCost || 0).toFixed(2)}
                            </td>
                            
                            <td className="px-4 py-3 text-center text-sm font-semibold text-gray-900">
                              R$ {(item.totalCost || 0).toFixed(2)}
                            </td>
                            
                            <td className="px-4 py-3 text-center">
                              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(item.priority)}`}>
                                {item.priority === 'critical' ? 'Cr√≠tico' :
                                 item.priority === 'high' ? 'Alto' :
                                 item.priority === 'medium' ? 'M√©dio' : 'Baixo'}
                              </span>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              );
            })}
          </div>

          {list.items?.length === 0 && (
            <div className="text-center py-8">
              <FaBox className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h4 className="text-lg font-medium text-gray-900 mb-2">
                Lista vazia
              </h4>
              <p className="text-gray-600">
                Esta lista n„o cont√©m itens.
              </p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              Lista criada em {new Date(list.createdAt).toLocaleString()}
            </div>
            <div className="flex items-center space-x-3">
              <div className="text-lg font-semibold text-gray-900">
                Total Geral: R$ {(list.summary?.totalCost || 0).toFixed(2)}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PurchaseListModal;
import React, { useState, useEffect } from 'react';
import { FaDownload, FaTimes, FaMobile, FaDesktop } from 'react-icons/fa';

const PWAInstallPrompt = () => {
  const [showPrompt, setShowPrompt] = useState(false);
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [isStandalone, setIsStandalone] = useState(false);

  useEffect(() => {
    // Verificar se j·° est√° instalado
    const checkStandalone = () => {
      const isStandaloneMode = window.matchMedia('(display-mode: standalone)').matches ||
                              window.navigator.standalone ||
                              document.referrer.includes('android-app://');
      setIsStandalone(isStandaloneMode);
    };

    checkStandalone();

    // Listener para o evento beforeinstallprompt
    const handleBeforeInstallPrompt = (e) => {
      // Prevenir que o prompt apare√ßa automaticamente
      e.preventDefault();
      
      // Salvar o evento para usar depois
      setDeferredPrompt(e);
      
      // Mostrar nosso prompt customizado se n„o estiver instalado
      if (!isStandalone) {
        // Verificar se j·° foi dismissado recentemente
        const lastDismissed = localStorage.getItem('pwa-prompt-dismissed');
        const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
        
        if (!lastDismissed || parseInt(lastDismissed) < oneDayAgo) {
          setTimeout(() => setShowPrompt(true), 3000); // Mostrar apÛs 3 segundos
        }
      }
    };

    // Listener para quando o app for instalado
    const handleAppInstalled = () => {
      console.log('PWA foi instalado');
      setShowPrompt(false);
      setDeferredPrompt(null);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, [isStandalone]);

  const handleInstallClick = async () => {
    if (!deferredPrompt) return;

    // Mostrar o prompt de instalAÁ„o
    deferredPrompt.prompt();

    // Aguardar a escolha do usu√°rio
    const { outcome } = await deferredPrompt.userChoice;
    
    if (outcome === 'accepted') {
      console.log('Usu√°rio aceitou instalar o PWA');
    } else {
      console.log('Usu√°rio rejeitou instalar o PWA');
    }

    // Limpar o deferredPrompt
    setDeferredPrompt(null);
    setShowPrompt(false);
  };

  const handleDismiss = () => {
    setShowPrompt(false);
    // Salvar timestamp do dismiss
    localStorage.setItem('pwa-prompt-dismissed', Date.now().toString());
  };

  const getDeviceIcon = () => {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    return isMobile ? <FaMobile /> : <FaDesktop />;
  };

  const getInstallText = () => {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    
    if (isIOS) {
      return {
        title: 'Adicionar √† Tela de In√≠cio',
        description: 'Toque no √≠cone de compartilhar e selecione "Adicionar √† Tela de In√≠cio"',
        buttonText: 'Instru√ß√µes iOS'
      };
    }
    
    if (isMobile) {
      return {
        title: 'Instalar Aplicativo',
        description: 'Instale o Estoque HCM em seu dispositivo para acesso r√°pido e modo offline',
        buttonText: 'Instalar App'
      };
    }
    
    return {
      title: 'Instalar Aplicativo',
      description: 'Instale o Estoque HCM em seu computador para uma experi√™ncia melhor',
      buttonText: 'Instalar App'
    };
  };

  const handleIOSInstructions = () => {
    const instructions = `
Para instalar no iOS:
1. Toque no √≠cone de compartilhar (üì§) na parte inferior da tela
2. Role para baixo e toque em "Adicionar √† Tela de In√≠cio"
3. Toque em "Adicionar" no canto superior direito
4. O app ser√° adicionado √† sua tela de in√≠cio
    `;
    
    alert(instructions.trim());
    setShowPrompt(false);
  };

  if (!showPrompt || isStandalone) {
    return null;
  }

  const { title, description, buttonText } = getInstallText();
  const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);

  return (
    <div className="fixed bottom-0 left-0 right-0 bg-white border-t-2 border-blue-500 shadow-lg z-50 p-4">
      <div className="max-w-md mx-auto">
        <div className="flex items-start justify-between">
          <div className="flex items-center space-x-3 flex-1">
            <div className="flex-shrink-0 text-blue-600 text-xl">
              {getDeviceIcon()}
            </div>
            <div className="flex-1">
              <h3 className="font-semibold text-gray-900 text-sm">
                {title}
              </h3>
              <p className="text-gray-600 text-xs mt-1">
                {description}
              </p>
            </div>
          </div>
          
          <button
            onClick={handleDismiss}
            className="flex-shrink-0 text-gray-400 hover:text-gray-600 p-1"
            aria-label="Fechar"
          >
            <FaTimes size={14} />
          </button>
        </div>
        
        <div className="flex space-x-2 mt-3">
          <button
            onClick={isIOS ? handleIOSInstructions : handleInstallClick}
            className="flex-1 bg-blue-600 text-white text-sm font-medium py-2 px-4 rounded-md hover:bg-blue-700 transition-colors flex items-center justify-center space-x-2"
          >
            <FaDownload size={12} />
            <span>{buttonText}</span>
          </button>
          
          <button
            onClick={handleDismiss}
            className="px-4 py-2 text-gray-600 text-sm font-medium hover:text-gray-800 transition-colors"
          >
            Agora n„o
          </button>
        </div>
      </div>
    </div>
  );
};

export default PWAInstallPrompt;
import React, { useState } from 'react';
import { 
  FaTimes, 
  FaCheck, 
  FaTimesCircle, 
  FaExclamationTriangle, 
  FaUser,
  FaCalendarAlt,
  FaBoxes,
  FaClock
} from 'react-icons/fa';
import { useReplenishmentManagement } from '../hooks/useReplenishmentManagement';
import { 
  REPLENISHMENT_STATUS, 
  REPLENISHMENT_PRIORITY,
  STATUS_DESCRIPTIONS 
} from '../utils/replenishmentPermissions';

const ReplenishmentApprovalModal = ({ isOpen, onClose, request, onSuccess }) => {
  const { approveRequest, rejectRequest, loading } = useReplenishmentManagement();
  const [action, setAction] = useState(''); // 'approve' or 'reject'
  const [formData, setFormData] = useState({
    notes: '',
    reason: '',
    adjustments: []
  });
  const [showConfirmation, setShowConfirmation] = useState(false);

  const handleApprove = () => {
    setAction('approve');
    setShowConfirmation(true);
  };

  const handleReject = () => {
    setAction('reject');
    setShowConfirmation(true);
  };

  const handleConfirm = async () => {
    try {
      if (action === 'approve') {
        await approveRequest(request.id, {
          notes: formData.notes
        });
      } else {
        await rejectRequest(request.id, {
          reason: formData.reason,
          notes: formData.notes
        });
      }
      
      setShowConfirmation(false);
      setAction('');
      setFormData({ notes: '', reason: '', adjustments: [] });
      onSuccess?.();
      onClose();
    } catch (error) {
      console.error('Erro ao processar solicitAÁ„o:', error);
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case REPLENISHMENT_PRIORITY.CRITICAL:
        return 'bg-red-100 text-red-800';
      case REPLENISHMENT_PRIORITY.HIGH:
        return 'bg-orange-100 text-orange-800';
      case REPLENISHMENT_PRIORITY.MEDIUM:
        return 'bg-yellow-100 text-yellow-800';
      case REPLENISHMENT_PRIORITY.LOW:
        return 'bg-green-100 text-green-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return 'N/A';
    return timestamp.toDate ? timestamp.toDate().toLocaleDateString('pt-BR') : 'N/A';
  };

  const calculateTotalItems = () => {
    return request?.items?.reduce((total, item) => total + (item.requestedQuantity || 0), 0) || 0;
  };

  if (!isOpen || !request) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center space-x-3">
            <FaBoxes className="text-blue-600" />
            <div>
              <h2 className="text-xl font-semibold">An√°lise de SolicitAÁ„o</h2>
              <p className="text-sm text-gray-600">#{request.id}</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <FaTimes size={20} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* informaÁıes da SolicitAÁ„o */}
          <div className="bg-gray-50 rounded-lg p-4 mb-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">informaÁıes da SolicitAÁ„o</h3>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <FaUser className="text-gray-400" size={16} />
                  <span className="text-sm text-gray-600">Solicitante:</span>
                  <span className="font-medium">{request.requestedByName}</span>
                </div>
                
                <div className="flex items-center space-x-2">
                  <FaCalendarAlt className="text-gray-400" size={16} />
                  <span className="text-sm text-gray-600">Data:</span>
                  <span className="font-medium">{formatDate(request.requestDate)}</span>
                </div>
                
                <div className="flex items-center space-x-2">
                  <FaClock className="text-gray-400" size={16} />
                  <span className="text-sm text-gray-600">Status:</span>
                  <span className="font-medium">{STATUS_DESCRIPTIONS[request.status]}</span>
                </div>
              </div>
              
              <div className="space-y-3">
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-600">Prioridade:</span>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(request.priority)}`}>
                    {request.priority === REPLENISHMENT_PRIORITY.CRITICAL && <FaExclamationTriangle className="mr-1" />}
                    {request.priority?.charAt(0).toUpperCase() + request.priority?.slice(1)}
                  </span>
                </div>
                
                <div className="flex items-center space-x-2">
                  <FaBoxes className="text-gray-400" size={16} />
                  <span className="text-sm text-gray-600">Total de Itens:</span>
                  <span className="font-medium">{calculateTotalItems()} unidades</span>
                </div>
                
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-gray-600">Produtos:</span>
                  <span className="font-medium">{request.items?.length || 0} diferentes</span>
                </div>
              </div>
            </div>
          </div>

          {/* T√≠tulo e Descri√ß√£o */}
          <div className="mb-6">
            <h4 className="text-lg font-medium text-gray-900 mb-2">{request.title}</h4>
            {request.description && (
              <p className="text-gray-700 bg-gray-50 p-3 rounded-lg">{request.description}</p>
            )}
          </div>

          {/* Lista de Itens */}
          <div className="mb-6">
            <h4 className="text-lg font-medium text-gray-900 mb-3">Itens Solicitados</h4>
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200 border border-gray-200 rounded-lg">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Produto
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Estoque Atual
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      quantidade Solicitada
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Prioridade
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Motivo
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {request.items?.map((item, index) => (
                    <tr key={index} className="hover:bg-gray-50">
                      <td className="px-4 py-3">
                        <div>
                          <div className="text-sm font-medium text-gray-900">{item.productName}</div>
                          {item.productSku && (
                            <div className="text-sm text-gray-500">SKU: {item.productSku}</div>
                          )}
                        </div>
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-900">
                        <div className="flex flex-col">
                          <span className="font-medium">{item.currentStock}</span>
                          <span className="text-xs text-gray-500">M√≠n: {item.minStock}</span>
                        </div>
                      </td>
                      <td className="px-4 py-3 text-sm font-medium text-gray-900">
                        {item.requestedQuantity}
                      </td>
                      <td className="px-4 py-3">
                        <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getPriorityColor(item.priority)}`}>
                          {item.priority?.charAt(0).toUpperCase() + item.priority?.slice(1)}
                        </span>
                      </td>
                      <td className="px-4 py-3 text-sm text-gray-700">
                        {item.reason || 'n„o informado'}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Formul√°rio de AprovAÁ„o/RejeiÁ„o */}
          {!showConfirmation && (
            <div className="space-y-4">
              <h4 className="text-lg font-medium text-gray-900">An√°lise da SolicitAÁ„o</h4>
              
              {action === 'reject' && (
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Motivo da RejeiÁ„o *
                  </label>
                  <select
                    value={formData.reason}
                    onChange={(e) => setFormData(prev => ({ ...prev, reason: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500"
                    required
                  >
                    <option value="">Selecione o motivo</option>
                    <option value="Or√ßamento insuficiente">Or√ßamento insuficiente</option>
                    <option value="Produto descontinuado">Produto descontinuado</option>
                    <option value="quantidade excessiva">quantidade excessiva</option>
                    <option value="Fornecedor indispon√≠vel">Fornecedor indispon√≠vel</option>
                    <option value="Pol√≠tica da empresa">Pol√≠tica da empresa</option>
                    <option value="Outros">Outros</option>
                  </select>
                </div>
              )}

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  ObservAÁıes {action === 'reject' ? '(Obrigat√≥rio)' : '(Opcional)'}
                </label>
                <textarea
                  value={formData.notes}
                  onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
                  rows={4}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder={
                    action === 'approve' 
                      ? "Adicione observAÁıes sobre a aprovAÁ„o (opcional)..."
                      : "Explique detalhadamente o motivo da RejeiÁ„o..."
                  }
                />
              </div>
            </div>
          )}

          {/* ConfirmAÁ„o */}
          {showConfirmation && (
            <div className="bg-gray-50 border border-gray-200 rounded-lg p-4">
              <div className="flex items-start space-x-3">
                <div className={`flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center ${
                  action === 'approve' ? 'bg-green-100' : 'bg-red-100'
                }`}>
                  {action === 'approve' ? (
                    <FaCheck className="text-green-600" />
                  ) : (
                    <FaTimesCircle className="text-red-600" />
                  )}
                </div>
                <div className="flex-1">
                  <h5 className="text-lg font-medium text-gray-900">
                    Confirmar {action === 'approve' ? 'AprovAÁ„o' : 'RejeiÁ„o'}
                  </h5>
                  <p className="text-gray-700 mt-1">
                    Tem certeza que deseja {action === 'approve' ? 'aprovar' : 'rejeitar'} esta solicitAÁ„o?
                  </p>
                  
                  {action === 'approve' && (
                    <div className="mt-3 p-3 bg-green-50 rounded-lg">
                      <p className="text-sm text-green-800">
                        <strong>apÛs a aprovAÁ„o:</strong><br />
                        ‚Ä¢ O solicitante ser√° notificado<br />
                        ‚Ä¢ A solicitAÁ„o ficar√° dispon√≠vel para execuÁ„o<br />
                        ‚Ä¢ Um documento de ReposiÁ„o ser√° gerado
                      </p>
                    </div>
                  )}

                  {action === 'reject' && (
                    <div className="mt-3 p-3 bg-red-50 rounded-lg">
                      <p className="text-sm text-red-800">
                        <strong>Motivo:</strong> {formData.reason}<br />
                        {formData.notes && (
                          <>
                            <strong>ObservAÁıes:</strong> {formData.notes}
                          </>
                        )}
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="flex items-center justify-end space-x-3 p-6 border-t bg-gray-50">
          {!showConfirmation ? (
            <>
              <button
                onClick={onClose}
                disabled={loading}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
              >
                Cancelar
              </button>
              
              <button
                onClick={handleReject}
                disabled={loading}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50 flex items-center space-x-2"
              >
                <FaTimesCircle />
                <span>Rejeitar</span>
              </button>
              
              <button
                onClick={handleApprove}
                disabled={loading}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 disabled:opacity-50 flex items-center space-x-2"
              >
                <FaCheck />
                <span>Aprovar</span>
              </button>
            </>
          ) : (
            <>
              <button
                onClick={() => {
                  setShowConfirmation(false);
                  setAction('');
                }}
                disabled={loading}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
              >
                Voltar
              </button>
              
              <button
                onClick={handleConfirm}
                disabled={loading || (action === 'reject' && (!formData.reason || !formData.notes))}
                className={`px-4 py-2 text-white rounded-md focus:outline-none focus:ring-2 disabled:opacity-50 flex items-center space-x-2 ${
                  action === 'approve' 
                    ? 'bg-green-600 hover:bg-green-700 focus:ring-green-500' 
                    : 'bg-red-600 hover:bg-red-700 focus:ring-red-500'
                }`}
              >
                {action === 'approve' ? <FaCheck /> : <FaTimesCircle />}
                <span>
                  {loading ? 'Processando...' : `Confirmar ${action === 'approve' ? 'AprovAÁ„o' : 'RejeiÁ„o'}`}
                </span>
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default ReplenishmentApprovalModal;
import React, { useState, useEffect } from 'react';
import { 
  FaTimes, 
  FaBox, 
  FaMapMarkerAlt, 
  FaPlus, 
  FaMinus, 
  FaExclamationTriangle, 
  FaCheckCircle 
} from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';
import useFirestore from '../hooks/useFirestore';
import { useReplenishmentManagement } from '../hooks/useReplenishmentManagement';
import { REPLENISHMENT_STATUS } from '../utils/replenishmentPermissions';

const ReplenishmentExecutionModal = ({ isOpen, onClose, request }) => {
  const { user } = useAuth();
  const { docs: locations } = useFirestore('locations');
  const { updateReplenishmentRequest } = useReplenishmentManagement();
  
  const [executionData, setExecutionData] = useState({
    items: [],
    notes: '',
    executedBy: user?.displayName || user?.email,
    executionDate: new Date().toISOString()
  });
  
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  useEffect(() => {
    if (isOpen && request) {
      // Inicializar itens com dados da solicitAÁ„o
      const initialItems = request.items.map(item => ({
        ...item,
        selectedQuantity: item.quantity,
        selectedLocationId: '',
        selectedLocationName: '',
        executed: false
      }));
      
      setExecutionData(prev => ({
        ...prev,
        items: initialItems
      }));
    }
  }, [isOpen, request]);

  const handleItemUpdate = (index, field, value) => {
    setExecutionData(prev => ({
      ...prev,
      items: prev.items.map((item, i) => 
        i === index ? { ...item, [field]: value } : item
      )
    }));
    
    // Limpar erro espec√≠fico do item
    if (errors[`item_${index}`]) {
      setErrors(prev => ({
        ...prev,
        [`item_${index}`]: null
      }));
    }
  };

  const handleLocationSelect = (index, locationId) => {
    const selectedLocation = locations.find(loc => loc.id === locationId);
    handleItemUpdate(index, 'selectedLocationId', locationId);
    handleItemUpdate(index, 'selectedLocationName', selectedLocation?.name || '');
  };

  const handleQuantityChange = (index, delta) => {
    const currentQuantity = executionData.items[index].selectedQuantity;
    const maxQuantity = executionData.items[index].quantity;
    const newQuantity = Math.max(0, Math.min(maxQuantity, currentQuantity + delta));
    handleItemUpdate(index, 'selectedQuantity', newQuantity);
  };

  const toggleItemExecution = (index) => {
    handleItemUpdate(index, 'executed', !executionData.items[index].executed);
  };

  const validateExecution = () => {
    const newErrors = {};
    
    executionData.items.forEach((item, index) => {
      if (item.executed) {
        if (!item.selectedLocationId) {
          newErrors[`item_${index}`] = 'Selecione um local de destino';
        }
        if (item.selectedQuantity <= 0) {
          newErrors[`item_${index}`] = 'quantidade deve ser maior que zero';
        }
      }
    });

    const hasExecutedItems = executionData.items.some(item => item.executed);
    if (!hasExecutedItems) {
      newErrors.general = 'Selecione pelo menos um item para executar';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleExecute = async () => {
    if (!validateExecution()) return;

    setLoading(true);
    try {
      const executedItems = executionData.items.filter(item => item.executed);
      const partialExecution = executedItems.length < executionData.items.length;
      
      const updateData = {
        status: partialExecution ? REPLENISHMENT_STATUS.IN_PROGRESS : REPLENISHMENT_STATUS.COMPLETED,
        executionData: {
          ...executionData,
          items: executedItems,
          partialExecution,
          totalItems: executionData.items.length,
          executedItems: executedItems.length
        },
        executedAt: new Date().toISOString(),
        executedBy: user.uid
      };

      await updateReplenishmentRequest(request.id, updateData);
      onClose();
    } catch (error) {
      console.error('Erro ao executar ReposiÁ„o:', error);
      setErrors({ general: 'Erro ao executar ReposiÁ„o. Tente novamente.' });
    } finally {
      setLoading(false);
    }
  };

  if (!isOpen) return null;

  const totalItems = executionData.items.length;
  const executedItemsCount = executionData.items.filter(item => item.executed).length;
  const totalValue = executionData.items
    .filter(item => item.executed)
    .reduce((sum, item) => sum + (item.selectedQuantity * (item.unitCost || 0)), 0);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-xl font-semibold text-gray-900">
              Executar ReposiÁ„o
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              SolicitAÁ„o #{request?.id?.slice(-8)} - {request?.requestedBy}
            </p>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <FaTimes className="w-5 h-5" />
          </button>
        </div>

        {/* Summary */}
        <div className="p-6 bg-gray-50 border-b">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaBox className="w-5 h-5 text-blue-600 mr-2" />
                <div>
                  <p className="text-sm text-gray-600">Itens Selecionados</p>
                  <p className="text-lg font-semibold">{executedItemsCount}/{totalItems}</p>
                </div>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaMapMarkerAlt className="w-5 h-5 text-green-600 mr-2" />
                <div>
                  <p className="text-sm text-gray-600">Locais √önicos</p>
                  <p className="text-lg font-semibold">
                    {new Set(executionData.items
                      .filter(item => item.executed && item.selectedLocationId)
                      .map(item => item.selectedLocationId)
                    ).size}
                  </p>
                </div>
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow-sm">
              <div className="flex items-center">
                <FaCheckCircle className="w-5 h-5 text-purple-600 mr-2" />
                <div>
                  <p className="text-sm text-gray-600">Valor Total</p>
                  <p className="text-lg font-semibold">R$ {totalValue.toFixed(2)}</p>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Items List */}
        <div className="flex-1 overflow-y-auto p-6">
          <div className="space-y-4">
            {executionData.items.map((item, index) => (
              <div 
                key={index}
                className={`border rounded-lg p-4 transition-all ${
                  item.executed 
                    ? 'border-green-300 bg-green-50' 
                    : 'border-gray-200 bg-white'
                }`}
              >
                <div className="flex items-start justify-between mb-3">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      checked={item.executed}
                      onChange={() => toggleItemExecution(index)}
                      className="mr-3 w-4 h-4 text-green-600 rounded"
                    />
                    <div>
                      <h4 className="font-medium text-gray-900">{item.name}</h4>
                      <p className="text-sm text-gray-600">
                        SKU: {item.sku} | quantidade solicitada: {item.quantity}
                      </p>
                    </div>
                  </div>
                  {item.executed && (
                    <FaCheckCircle className="w-5 h-5 text-green-600" />
                  )}
                </div>

                {item.executed && (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 ml-7">
                    {/* Local de Destino */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Local de Destino *
                      </label>
                      <select
                        value={item.selectedLocationId}
                        onChange={(e) => handleLocationSelect(index, e.target.value)}
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      >
                        <option value="">Selecione um local</option>
                        {locations.map(location => (
                          <option key={location.id} value={location.id}>
                            {location.name} - {location.address}
                          </option>
                        ))}
                      </select>
                    </div>

                    {/* quantidade */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        quantidade a Executar
                      </label>
                      <div className="flex items-center space-x-2">
                        <button
                          type="button"
                          onClick={() => handleQuantityChange(index, -1)}
                          className="p-1 bg-gray-200 rounded hover:bg-gray-300"
                        >
                          <FaMinus className="w-4 h-4" />
                        </button>
                        <input
                          type="number"
                          value={item.selectedQuantity}
                          onChange={(e) => handleItemUpdate(index, 'selectedQuantity', parseInt(e.target.value) || 0)}
                          min="0"
                          max={item.quantity}
                          className="w-20 px-2 py-1 border border-gray-300 rounded text-center"
                        />
                        <button
                          type="button"
                          onClick={() => handleQuantityChange(index, 1)}
                          className="p-1 bg-gray-200 rounded hover:bg-gray-300"
                        >
                          <FaPlus className="w-4 h-4" />
                        </button>
                        <span className="text-sm text-gray-600">
                          de {item.quantity}
                        </span>
                      </div>
                    </div>
                  </div>
                )}

                {errors[`item_${index}`] && (
                  <div className="ml-7 mt-2 flex items-center text-red-600">
                    <FaExclamationTriangle className="w-4 h-4 mr-1" />
                    <span className="text-sm">{errors[`item_${index}`]}</span>
                  </div>
                )}
              </div>
            ))}
          </div>

          {/* ObservAÁıes */}
          <div className="mt-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ObservAÁıes da execuÁ„o
            </label>
            <textarea
              value={executionData.notes}
              onChange={(e) => setExecutionData(prev => ({ ...prev, notes: e.target.value }))}
              rows="3"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Adicione observAÁıes sobre a execuÁ„o..."
            />
          </div>

          {errors.general && (
            <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded-md">
              <div className="flex items-center text-red-600">
                <FaExclamationTriangle className="w-4 h-4 mr-2" />
                <span className="text-sm">{errors.general}</span>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-200 bg-gray-50">
          <div className="flex items-center justify-between">
            <div className="text-sm text-gray-600">
              {executedItemsCount > 0 && executedItemsCount < totalItems && (
                <span className="text-yellow-600 font-medium">
                  ‚ö†Ô∏è execuÁ„o parcial: {executedItemsCount} de {totalItems} itens
                </span>
              )}
            </div>
            <div className="flex space-x-3">
              <button
                onClick={onClose}
                className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
              >
                Cancelar
              </button>
              <button
                onClick={handleExecute}
                disabled={loading}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
              >
                {loading ? 'Executando...' : 'Executar ReposiÁ„o'}
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ReplenishmentExecutionModal;
import React, { useState, useEffect } from 'react';
import { FaTimes, FaBoxes, FaExclamationTriangle, FaPlus, FaTrash, FaSearch } from 'react-icons/fa';
import { useReplenishmentManagement } from '../hooks/useReplenishmentManagement';
import { 
  collection, 
  getDocs, 
  query
} from 'firebase/firestore';
import { db } from '../services/firebase';
import { REPLENISHMENT_PRIORITY } from '../utils/replenishmentPermissions';

const ReplenishmentRequestModal = ({ isOpen, onClose, onSuccess }) => {
  const { createReplenishmentRequest, loading } = useReplenishmentManagement();
  
  const [products, setProducts] = useState([]);
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    priority: REPLENISHMENT_PRIORITY.MEDIUM,
    items: []
  });
  const [errors, setErrors] = useState({});

  // Buscar produtos dispon√≠veis
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const productsQuery = query(collection(db, 'products'));
        const productsSnapshot = await getDocs(productsQuery);
        const productsData = productsSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        const stockQuery = query(collection(db, 'stock'));
        const stockSnapshot = await getDocs(stockQuery);
        const stockData = stockSnapshot.docs.map(doc => ({
          id: doc.id,
          ...doc.data()
        }));
        
        // Calcular estoque atual para cada produto
        const stockByProduct = {};
        stockData.forEach(stock => {
          if (!stockByProduct[stock.productId]) {
            stockByProduct[stock.productId] = 0;
          }
          stockByProduct[stock.productId] += stock.quantity || 0;
        });

        // Adicionar informaÁıes de estoque aos produtos
        const productsWithStock = productsData
          .filter(product => product.isActive !== false)
          .map(product => ({
            ...product,
            currentStock: stockByProduct[product.id] || 0,
            isLowStock: (stockByProduct[product.id] || 0) <= (product.minStock || 0)
          }));

        setProducts(productsWithStock);
        setFilteredProducts(productsWithStock);
      } catch (error) {
        console.error('Erro ao buscar produtos:', error);
      }
    };

    if (isOpen) {
      fetchProducts();
    }
  }, [isOpen]);

  // Filtrar produtos por termo de busca
  useEffect(() => {
    if (searchTerm.trim() === '') {
      setFilteredProducts(products);
    } else {
      const filtered = products.filter(product =>
        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.sku?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        product.category?.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setFilteredProducts(filtered);
    }
  }, [searchTerm, products]);

  const handleAddItem = (product) => {
    const existingItem = formData.items.find(item => item.productId === product.id);
    
    if (existingItem) {
      // Se j·° existe, aumenta a quantidade
      setFormData(prev => ({
        ...prev,
        items: prev.items.map(item =>
          item.productId === product.id
            ? { ...item, requestedQuantity: item.requestedQuantity + 1 }
            : item
        )
      }));
    } else {
      // Adiciona novo item
      const newItem = {
        productId: product.id,
        productName: product.name,
        productSku: product.sku || '',
        currentStock: product.currentStock,
        minStock: product.minStock || 0,
        requestedQuantity: 1,
        reason: product.isLowStock ? 'Estoque baixo' : '',
        priority: product.isLowStock ? REPLENISHMENT_PRIORITY.HIGH : REPLENISHMENT_PRIORITY.MEDIUM
      };
      
      setFormData(prev => ({
        ...prev,
        items: [...prev.items, newItem]
      }));
    }
  };

  const handleRemoveItem = (productId) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.filter(item => item.productId !== productId)
    }));
  };

  const handleItemChange = (productId, field, value) => {
    setFormData(prev => ({
      ...prev,
      items: prev.items.map(item =>
        item.productId === productId
          ? { ...item, [field]: value }
          : item
      )
    }));
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.title.trim()) {
      newErrors.title = 'T√≠tulo √© obrigat√≥rio';
    }

    if (formData.items.length === 0) {
      newErrors.items = 'Adicione pelo menos um item √† solicitAÁ„o';
    }

    formData.items.forEach((item, index) => {
      if (!item.requestedQuantity || item.requestedQuantity <= 0) {
        newErrors[`item_${index}_quantity`] = 'quantidade deve ser maior que zero';
      }
    });

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      await createReplenishmentRequest(formData);
      
      // Limpar formul√°rio
      setFormData({
        title: '',
        description: '',
        priority: REPLENISHMENT_PRIORITY.MEDIUM,
        items: []
      });
      setSearchTerm('');
      setErrors({});
      
      onSuccess?.();
      onClose();
    } catch (error) {
      console.error('Erro ao criar solicitAÁ„o:', error);
    }
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case REPLENISHMENT_PRIORITY.CRITICAL:
        return 'text-red-600 bg-red-100';
      case REPLENISHMENT_PRIORITY.HIGH:
        return 'text-orange-600 bg-orange-100';
      case REPLENISHMENT_PRIORITY.MEDIUM:
        return 'text-yellow-600 bg-yellow-100';
      case REPLENISHMENT_PRIORITY.LOW:
        return 'text-green-600 bg-green-100';
      default:
        return 'text-gray-600 bg-gray-100';
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center space-x-3">
            <FaBoxes className="text-blue-600" />
            <div>
              <h2 className="text-xl font-semibold">Nova SolicitAÁ„o de ReposiÁ„o</h2>
              <p className="text-sm text-gray-600">Solicite ReposiÁ„o de produtos com estoque baixo</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <FaTimes size={20} />
          </button>
        </div>

        <form onSubmit={handleSubmit}>
          {/* Content */}
          <div className="p-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* informaÁıes da SolicitAÁ„o */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900">informaÁıes da SolicitAÁ„o</h3>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    T√≠tulo da SolicitAÁ„o *
                  </label>
                  <input
                    type="text"
                    value={formData.title}
                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                    className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 ${
                      errors.title ? 'border-red-500' : 'border-gray-300'
                    }`}
                    placeholder="Ex: ReposiÁ„o urgente de materiais de escrit√≥rio"
                  />
                  {errors.title && <p className="text-red-500 text-xs mt-1">{errors.title}</p>}
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Prioridade
                  </label>
                  <select
                    value={formData.priority}
                    onChange={(e) => setFormData(prev => ({ ...prev, priority: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value={REPLENISHMENT_PRIORITY.LOW}>Baixa</option>
                    <option value={REPLENISHMENT_PRIORITY.MEDIUM}>M√©dia</option>
                    <option value={REPLENISHMENT_PRIORITY.HIGH}>Alta</option>
                    <option value={REPLENISHMENT_PRIORITY.CRITICAL}>Cr√≠tica</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Descri√ß√£o / Justificativa
                  </label>
                  <textarea
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    rows={4}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Descreva o motivo da solicitAÁ„o e qualquer informAÁ„o adicional relevante..."
                  />
                </div>

                {/* Itens Selecionados */}
                <div>
                  <h4 className="text-md font-medium text-gray-900 mb-3">
                    Itens Selecionados ({formData.items.length})
                  </h4>
                  
                  {errors.items && <p className="text-red-500 text-xs mb-2">{errors.items}</p>}
                  
                  <div className="space-y-2 max-h-64 overflow-y-auto">
                    {formData.items.map((item, index) => (
                      <div key={item.productId} className="border border-gray-200 rounded-lg p-3">
                        <div className="flex items-start justify-between">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center space-x-2 mb-2">
                              <h5 className="font-medium text-sm truncate">{item.productName}</h5>
                              {item.productSku && (
                                <span className="text-xs text-gray-500">({item.productSku})</span>
                              )}
                            </div>
                            
                            <div className="grid grid-cols-2 gap-2 text-xs text-gray-600 mb-2">
                              <span>Estoque atual: {item.currentStock}</span>
                              <span>Estoque m√≠nimo: {item.minStock}</span>
                            </div>

                            <div className="grid grid-cols-2 gap-2">
                              <div>
                                <label className="block text-xs text-gray-700 mb-1">quantidade</label>
                                <input
                                  type="number"
                                  min="1"
                                  value={item.requestedQuantity}
                                  onChange={(e) => handleItemChange(item.productId, 'requestedQuantity', parseInt(e.target.value) || 0)}
                                  className={`w-full px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-blue-500 ${
                                    errors[`item_${index}_quantity`] ? 'border-red-500' : 'border-gray-300'
                                  }`}
                                />
                              </div>
                              
                              <div>
                                <label className="block text-xs text-gray-700 mb-1">Prioridade</label>
                                <select
                                  value={item.priority}
                                  onChange={(e) => handleItemChange(item.productId, 'priority', e.target.value)}
                                  className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                >
                                  <option value={REPLENISHMENT_PRIORITY.LOW}>Baixa</option>
                                  <option value={REPLENISHMENT_PRIORITY.MEDIUM}>M√©dia</option>
                                  <option value={REPLENISHMENT_PRIORITY.HIGH}>Alta</option>
                                  <option value={REPLENISHMENT_PRIORITY.CRITICAL}>Cr√≠tica</option>
                                </select>
                              </div>
                            </div>

                            <div className="mt-2">
                              <label className="block text-xs text-gray-700 mb-1">Motivo</label>
                              <input
                                type="text"
                                value={item.reason}
                                onChange={(e) => handleItemChange(item.productId, 'reason', e.target.value)}
                                className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                                placeholder="Motivo da solicitAÁ„o..."
                              />
                            </div>
                          </div>
                          
                          <button
                            type="button"
                            onClick={() => handleRemoveItem(item.productId)}
                            className="ml-2 text-red-500 hover:text-red-700"
                          >
                            <FaTrash size={14} />
                          </button>
                        </div>
                      </div>
                    ))}
                    
                    {formData.items.length === 0 && (
                      <div className="text-center py-8 text-gray-500">
                        <FaBoxes size={24} className="mx-auto mb-2 opacity-50" />
                        <p className="text-sm">Nenhum item selecionado</p>
                        <p className="text-xs">Use a busca ao lado para adicionar produtos</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>

              {/* SeleÁ„o de Produtos */}
              <div className="space-y-4">
                <h3 className="text-lg font-medium text-gray-900">Selecionar Produtos</h3>
                
                {/* Busca de Produtos */}
                <div className="relative">
                  <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Buscar produtos por nome, SKU ou categoria..."
                  />
                </div>

                {/* Lista de Produtos */}
                <div className="max-h-96 overflow-y-auto border border-gray-200 rounded-lg">
                  {filteredProducts.map(product => {
                    const isSelected = formData.items.some(item => item.productId === product.id);
                    
                    return (
                      <div
                        key={product.id}
                        className={`p-3 border-b border-gray-100 hover:bg-gray-50 cursor-pointer ${
                          isSelected ? 'bg-blue-50 border-blue-200' : ''
                        }`}
                        onClick={() => handleAddItem(product)}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center space-x-2 mb-1">
                              <h4 className="font-medium text-sm truncate">{product.name}</h4>
                              {product.sku && (
                                <span className="text-xs text-gray-500">({product.sku})</span>
                              )}
                              {product.isLowStock && (
                                <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-red-100 text-red-600">
                                  <FaExclamationTriangle className="mr-1" size={10} />
                                  Estoque Baixo
                                </span>
                              )}
                            </div>
                            
                            <div className="flex items-center space-x-4 text-xs text-gray-600">
                              <span>Estoque: {product.currentStock}</span>
                              <span>M√≠nimo: {product.minStock || 'N/A'}</span>
                              {product.category && <span>Categoria: {product.category}</span>}
                            </div>
                          </div>
                          
                          <div className="flex items-center space-x-2">
                            {isSelected && (
                              <span className="text-blue-600 text-xs font-medium">Selecionado</span>
                            )}
                            <button
                              type="button"
                              className="flex items-center justify-center w-8 h-8 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors"
                            >
                              <FaPlus size={12} />
                            </button>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                  
                  {filteredProducts.length === 0 && (
                    <div className="text-center py-8 text-gray-500">
                      <p className="text-sm">Nenhum produto encontrado</p>
                      {searchTerm && (
                        <p className="text-xs">Tente ajustar os termos de busca</p>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-end space-x-3 p-6 border-t bg-gray-50">
            <button
              type="button"
              onClick={onClose}
              disabled={loading}
              className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            >
              Cancelar
            </button>
            <button
              type="submit"
              disabled={loading}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Criando...' : 'Criar SolicitAÁ„o'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ReplenishmentRequestModal;
import React from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { 
    FaHome, FaBoxOpen, FaPlusCircle, 
    FaExchangeAlt, FaClipboardCheck, FaHistory, FaFileAlt, FaCog, FaSignOutAlt, FaBoxes 
} from 'react-icons/fa';

// Links de navegAÁ„o principais
const mainNavLinks = [
    { to: '/', text: 'In√≠cio', icon: FaHome },
    { to: '/stock', text: 'Estoque', icon: FaBoxOpen },
    { to: '/registers', text: 'Cadastros', icon: FaPlusCircle },
    { to: '/movements', text: 'MovimentaÁıes', icon: FaExchangeAlt },
    { to: '/counting', text: 'Contagem', icon: FaClipboardCheck },
    { to: '/replenishment', text: 'ReposiÁ„o', icon: FaBoxes },
    { to: '/audit', text: 'Auditoria', icon: FaHistory },
    { to: '/reports', text: 'Analytics & RelatÛrios', icon: FaFileAlt },
];

// Componente de item de navegAÁ„o reutiliz√°vel
const NavItem = ({ to, text, icon: Icon, onClick, onNavigate }) => (
    <li>
        <NavLink
            to={to}
            end
            className={({ isActive }) =>
                `flex items-center py-2.5 px-4 rounded-lg transition-colors font-medium ${
                    isActive 
                        ? 'bg-blue-100 text-blue-600 dark:bg-blue-900 dark:text-blue-300' 
                        : 'text-slate-700 hover:bg-slate-100 dark:text-slate-300 dark:hover:bg-slate-700'
                }`
            }
            onClick={(e) => {
                if (onClick) {
                    onClick(e);
                }
                if (onNavigate) {
                    onNavigate();
                }
            }}
        >
            <Icon className="w-5 h-5 mr-3 text-slate-500 dark:text-slate-400" />
            {text}
        </NavLink>
    </li>
);

export default function Sidebar({ isOpen, onClose }) {
    const { logout } = useAuth();
    const navigate = useNavigate();

    const handleLogout = async () => {
        await logout();
        navigate('/auth');
    };

    // FunÁ„o para fechar o sidebar apÛs navegar (principalmente para mobile)
    const handleNavigate = () => {
        // Fecha o sidebar em telas menores quando uma opÁ„o √© selecionada
        if (window.innerWidth < 1024) { // lg breakpoint do Tailwind
            onClose();
        }
    };

    return (
        <>
            {/* Overlay para fechar o menu em telas menores */}
            <div 
                className={`fixed inset-0 bg-black bg-opacity-50 z-40 transition-opacity lg:hidden ${isOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}
                onClick={onClose}
            ></div>

            {/* Sidebar */}
            <aside className={`fixed top-0 left-0 h-full w-64 bg-white dark:bg-slate-800 z-50 transform transition-transform duration-300 ease-in-out flex flex-col ${isOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0`}>
                <div className="p-4 border-b border-slate-200 dark:border-slate-700">
                    <h2 className="text-2xl font-bold text-slate-800 dark:text-slate-200">Menu</h2>
                </div>

                <div className="flex flex-col justify-between flex-grow p-2">
                    {/* Links Principais */}
                    <nav>
                        <ul className="space-y-1">
                            {mainNavLinks.map(link => 
                                <NavItem 
                                    key={link.to} 
                                    {...link} 
                                    onNavigate={handleNavigate}
                                />
                            )}
                        </ul>
                    </nav>
                    
                    {/* Links Inferiores (ConfiguraÁıes e Sair) */}
                    <nav>
                        <ul className="pt-2 mt-2 space-y-1 border-t border-slate-200 dark:border-slate-700">
                            <NavItem 
                                to="/settings" 
                                icon={FaCog} 
                                text="ConfiguraÁıes" 
                                onNavigate={handleNavigate}
                            />
                            <NavItem 
                                to="/auth" 
                                icon={FaSignOutAlt} 
                                text="Sair" 
                                onClick={handleLogout}
                                onNavigate={handleNavigate}
                            />
                        </ul>
                    </nav>
                </div>
            </aside>
        </>
    );
}
import React from 'react';

const SkeletonLoader = ({ count = 5, type = 'list', columns = 5 }) => {
    const renderSkeletons = () => {
        const skeletons = [];
        for (let i = 0; i < count; i++) {
            if (type === 'list') {
                skeletons.push(
                    <div key={i} className="flex items-center justify-between p-3 bg-gray-100 rounded-md animate-pulse">
                        <div className="h-4 bg-gray-300 rounded w-3/4"></div>
                        <div className="flex gap-2">
                            <div className="h-6 w-6 bg-gray-300 rounded"></div>
                            <div className="h-6 w-6 bg-gray-300 rounded"></div>
                        </div>
                    </div>
                );
            } else if (type === 'table') {
                skeletons.push(
                    <tr key={i} className="animate-pulse">
                        {/* Checkbox skeleton */}
                        <td className="p-4">
                            <div className="h-5 w-5 bg-gray-300 rounded"></div>
                        </td>
                        {/* Column skeletons */}
                        {[...Array(columns)].map((_, colIndex) => (
                            <td key={colIndex} className="py-3 px-4">
                                <div className="h-4 bg-gray-300 rounded"></div>
                            </td>
                        ))}
                        {/* Actions skeleton */}
                        <td className="py-3 px-4">
                            <div className="h-6 w-16 bg-gray-300 rounded"></div>
                        </td>
                    </tr>
                );
            }
        }
        return skeletons;
    };

    // If the type is 'table', return the rows directly inside a fragment
    // so they can be valid children of a <tbody> element.
    if (type === 'table') {
        return <>{renderSkeletons()}</>;
    }

    // For other types, wrap them in a div as before.
    return (
        <div className="space-y-3">
            {renderSkeletons()}
        </div>
    );
};

export default SkeletonLoader;
import React, { useState, useEffect } from 'react';
import { 
  FaShoppingCart, 
  FaFileExport, 
  FaFilter, 
  FaSearch, 
  FaPlus,
  FaEye,
  FaDownload,
  FaDollarSign,
  FaExclamationTriangle,
  FaClock,
  FaCheckCircle,
  FaEdit,
  FaTrash
} from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';
import { usePurchaseListManagement } from '../hooks/usePurchaseListManagement';
import useFirestore from '../hooks/useFirestore';
import { hasPermission } from '../utils/permissions';
import { PERMISSIONS } from '../utils/permissions';
import { 
  PURCHASE_LIST_STATUS,
  REPLENISHMENT_CONFIG 
} from '../utils/replenishmentPermissions';
import PurchaseListModal from './PurchaseListModal';
import SkeletonLoader from './SkeletonLoader';

const SmartPurchaseListDashboard = () => {
  const { userData } = useAuth();
  const { 
    purchaseLists, 
    loading, 
    analyzeLowStock,
    generatePurchaseList,
    exportPurchaseList,
    deletePurchaseList
  } = usePurchaseListManagement();
  
  const { docs: products } = useFirestore('products');
  const { docs: suppliers } = useFirestore('suppliers');
  
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [lowStockAnalysis, setLowStockAnalysis] = useState(null);
  const [selectedList, setSelectedList] = useState(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [generatingList, setGeneratingList] = useState(false);
  const [analysisLoading, setAnalysisLoading] = useState(false);

  // Verificar permissıes
  const canGenerate = hasPermission(userData?.role, PERMISSIONS.GENERATE_PURCHASE_LIST);
  const canExport = hasPermission(userData?.role, PERMISSIONS.EXPORT_PURCHASE_LIST);

  useEffect(() => {
    if (canGenerate) {
      loadLowStockAnalysis();
    }
  }, [canGenerate, products]);

  const loadLowStockAnalysis = async () => {
    if (products.length === 0) return;
    
    setAnalysisLoading(true);
    try {
      const analysis = await analyzeLowStock();
      setLowStockAnalysis(analysis);
    } catch (error) {
      console.error('Erro ao analisar estoque baixo:', error);
    } finally {
      setAnalysisLoading(false);
    }
  };

  const handleGenerateList = async () => {
    if (!lowStockAnalysis || !lowStockAnalysis.items || lowStockAnalysis.items.length === 0) return;

    setGeneratingList(true);
    try {
      const listData = {
        title: `Lista de Compras - ${new Date().toLocaleDateString()}`,
        items: (lowStockAnalysis.items || []).map(item => ({
          productId: item.id,
          productName: item.name,
          currentStock: item.currentStock,
          minStock: item.minStock,
          maxStock: item.maxStock,
          suggestedQuantity: item.suggestedQuantity,
          unitCost: item.unitCost || 0,
          totalCost: (item.suggestedQuantity || 0) * (item.unitCost || 0),
          supplierId: item.supplierId,
          supplierName: item.supplierName,
          priority: item.stockPercentage < REPLENISHMENT_CONFIG.CRITICAL_STOCK_PERCENTAGE 
            ? 'critical' 
            : item.stockPercentage < REPLENISHMENT_CONFIG.DEFAULT_MIN_STOCK_PERCENTAGE 
            ? 'high' 
            : 'medium'
        })),
        summary: {
          totalItems: lowStockAnalysis.items?.length || 0,
          totalCost: lowStockAnalysis.summary?.totalEstimatedCost || 0,
          criticalItems: (lowStockAnalysis.items || []).filter(item => 
            item.stockPercentage < REPLENISHMENT_CONFIG.CRITICAL_STOCK_PERCENTAGE
          ).length,
          suppliers: [...new Set((lowStockAnalysis.items || []).map(item => item.supplierId).filter(Boolean))].length
        },
        createdBy: userData.uid,
        createdByName: userData.displayName || userData.email
      };

      await generatePurchaseList(listData);
      await loadLowStockAnalysis(); // Recarregar an√°lise
    } catch (error) {
      console.error('Erro ao gerar lista de compras:', error);
    } finally {
      setGeneratingList(false);
    }
  };

  const handleExport = async (list, format = 'excel') => {
    try {
      await exportPurchaseList(list, format);
    } catch (error) {
      console.error('Erro ao exportar lista:', error);
    }
  };

  const handleView = (list) => {
    setSelectedList(list);
    setModalOpen(true);
  };

  const handleDelete = async (listId) => {
    if (window.confirm('Tem certeza que deseja excluir esta lista de compras?')) {
      try {
        await deletePurchaseList(listId);
      } catch (error) {
        console.error('Erro ao excluir lista:', error);
      }
    }
  };

  const filteredLists = (purchaseLists || []).filter(list => {
    const matchesSearch = 
      list.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      list.createdByName?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || list.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  const getStatusColor = (status) => {
    const colors = {
      [PURCHASE_LIST_STATUS.GENERATED]: 'bg-blue-100 text-blue-800',
      [PURCHASE_LIST_STATUS.REVIEWED]: 'bg-yellow-100 text-yellow-800',
      [PURCHASE_LIST_STATUS.SENT_TO_SUPPLIER]: 'bg-purple-100 text-purple-800',
      [PURCHASE_LIST_STATUS.RECEIVED]: 'bg-green-100 text-green-800',
      [PURCHASE_LIST_STATUS.COMPLETED]: 'bg-gray-100 text-gray-800'
    };
    return colors[status] || 'bg-gray-100 text-gray-800';
  };

  const getStatusIcon = (status) => {
    const icons = {
      [PURCHASE_LIST_STATUS.GENERATED]: <FaClock className="w-4 h-4" />,
      [PURCHASE_LIST_STATUS.REVIEWED]: <FaEye className="w-4 h-4" />,
      [PURCHASE_LIST_STATUS.SENT_TO_SUPPLIER]: <FaShoppingCart className="w-4 h-4" />,
      [PURCHASE_LIST_STATUS.RECEIVED]: <FaCheckCircle className="w-4 h-4" />,
      [PURCHASE_LIST_STATUS.COMPLETED]: <FaCheckCircle className="w-4 h-4" />
    };
    return icons[status] || <FaClock className="w-4 h-4" />;
  };

  if (loading || analysisLoading) {
    return <SkeletonLoader />;
  }

  return (
    <div className="p-6">
      {/* CabeÁalho */}
      <div className="flex items-center justify-between mb-6">
        <div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            Lista de Compras Inteligente
          </h2>
          <p className="text-gray-600">
            GerAÁ„o autom√°tica baseada em an√°lise de estoque baixo
          </p>
        </div>
        
        {canGenerate && (
          <button
            onClick={handleGenerateList}
            disabled={!lowStockAnalysis || !lowStockAnalysis.items || lowStockAnalysis.items.length === 0 || generatingList}
            className="flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <FaPlus />
            <span>{generatingList ? 'Gerando...' : 'Gerar Nova Lista'}</span>
          </button>
        )}
      </div>

      {/* An√°lise de Estoque Baixo */}
      {lowStockAnalysis && (
        <div className="bg-white rounded-lg shadow-sm border mb-6 p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">
            An√°lise de Estoque Atual
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="bg-red-50 p-4 rounded-lg border border-red-200">
              <div className="flex items-center">
                <FaExclamationTriangle className="w-6 h-6 text-red-600 mr-3" />
                <div>
                  <p className="text-sm text-red-600">Itens Cr√≠ticos</p>
                  <p className="text-2xl font-bold text-red-600">
                    {lowStockAnalysis.summary.criticalItems}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-orange-50 p-4 rounded-lg border border-orange-200">
              <div className="flex items-center">
                <FaShoppingCart className="w-6 h-6 text-orange-600 mr-3" />
                <div>
                  <p className="text-sm text-orange-600">Total de Itens</p>
                  <p className="text-2xl font-bold text-orange-600">
                    {lowStockAnalysis.summary?.totalItems || 0}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <div className="flex items-center">
                <FaDollarSign className="w-6 h-6 text-blue-600 mr-3" />
                <div>
                  <p className="text-sm text-blue-600">Custo Estimado</p>
                  <p className="text-2xl font-bold text-blue-600">
                    R$ {(lowStockAnalysis.summary?.totalEstimatedCost || 0).toFixed(2)}
                  </p>
                </div>
              </div>
            </div>

            <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
              <div className="flex items-center">
                <FaShoppingCart className="w-6 h-6 text-purple-600 mr-3" />
                <div>
                  <p className="text-sm text-purple-600">Fornecedores</p>
                  <p className="text-2xl font-bold text-purple-600">
                    {[...new Set((lowStockAnalysis.items || []).map(item => item.supplierId).filter(Boolean))].length}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {(lowStockAnalysis.items || []).length === 0 ? (
            <div className="text-center py-8">
              <FaCheckCircle className="w-12 h-12 text-green-500 mx-auto mb-4" />
              <h4 className="text-lg font-medium text-gray-900 mb-2">
                Estoque em n√≠veis adequados
              </h4>
              <p className="text-gray-600">
                Nenhum produto est√° com estoque abaixo do m√≠nimo configurado.
              </p>
            </div>
          ) : (
            <div className="mt-4">
              <p className="text-sm text-gray-600 mb-2">
                <strong>PrÛximos itens cr√≠ticos:</strong>
              </p>
              <div className="flex flex-wrap gap-2">
                {(lowStockAnalysis.items || []).slice(0, 5).map(item => (
                  <span 
                    key={item.id}
                    className="px-2 py-1 bg-red-100 text-red-800 rounded text-xs"
                  >
                    {item.name} ({Math.round(item.stockPercentage || 0)}%)
                  </span>
                ))}
                {(lowStockAnalysis.items || []).length > 5 && (
                  <span className="px-2 py-1 bg-gray-100 text-gray-600 rounded text-xs">
                    +{(lowStockAnalysis.items || []).length - 5} mais
                  </span>
                )}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow-sm border mb-6">
        <div className="flex flex-col md:flex-row gap-4">
          <div className="flex-1">
            <div className="relative">
              <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Buscar listas por t√≠tulo ou criador..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          
          <div className="md:w-48">
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="all">Todos os Status</option>
              <option value={PURCHASE_LIST_STATUS.GENERATED}>Gerada</option>
              <option value={PURCHASE_LIST_STATUS.REVIEWED}>Revisada</option>
              <option value={PURCHASE_LIST_STATUS.SENT_TO_SUPPLIER}>Enviada</option>
              <option value={PURCHASE_LIST_STATUS.RECEIVED}>Recebida</option>
              <option value={PURCHASE_LIST_STATUS.COMPLETED}>Conclu√≠da</option>
            </select>
          </div>
        </div>
      </div>

      {/* Lista de Compras */}
      <div className="bg-white rounded-lg shadow-sm border">
        {filteredLists.length === 0 ? (
          <div className="p-8 text-center">
            <FaShoppingCart className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              Nenhuma lista de compras encontrada
            </h3>
            <p className="text-gray-600">
              {purchaseLists.length === 0 
                ? 'Gere sua primeira lista baseada na an√°lise de estoque.'
                : 'Nenhuma lista corresponde aos filtros aplicados.'
              }
            </p>
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Lista
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Itens
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Custo Total
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Data
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    AÁıes
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredLists.map((list) => (
                  <tr key={list.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          {list.title}
                        </div>
                        <div className="text-sm text-gray-500">
                          Por: {list.createdByName}
                        </div>
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-gray-900">
                        {list.summary?.totalItems || list.items?.length || 0} itens
                      </div>
                      <div className="text-sm text-gray-500">
                        {list.summary?.criticalItems || 0} cr√≠ticos
                      </div>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(list.status)}`}>
                        {getStatusIcon(list.status)}
                        <span className="ml-1 capitalize">{list.status}</span>
                      </span>
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      R$ {(list.summary?.totalCost || 0).toFixed(2)}
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(list.createdAt).toLocaleDateString()}
                    </td>
                    
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => handleView(list)}
                          className="text-blue-600 hover:text-blue-900"
                          title="Ver detalhes"
                        >
                          <FaEye className="w-4 h-4" />
                        </button>
                        
                        {canExport && (
                          <button
                            onClick={() => handleExport(list)}
                            className="text-green-600 hover:text-green-900"
                            title="Exportar"
                          >
                            <FaDownload className="w-4 h-4" />
                          </button>
                        )}
                        
                        <button
                          onClick={() => handleDelete(list.id)}
                          className="text-red-600 hover:text-red-900"
                          title="Excluir"
                        >
                          <FaTrash className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Modal */}
      {modalOpen && (
        <PurchaseListModal
          isOpen={modalOpen}
          onClose={() => {
            setModalOpen(false);
            setSelectedList(null);
          }}
          list={selectedList}
          onExport={handleExport}
          canExport={canExport}
        />
      )}
    </div>
  );
};

export default SmartPurchaseListDashboard;
import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { db } from '../services/firebase';
import { runTransaction, doc, collection, serverTimestamp } from 'firebase/firestore';
import { useAuth } from '../context/AuthContext';
import ProductSelector from './ProductSelector';
import useFirestore from '../hooks/useFirestore';
import { FaArrowCircleDown } from 'react-icons/fa';

const StockExitForm = () => {
    const { user, userData } = useAuth();
    const { docs: locations } = useFirestore('locations', { field: 'name', direction: 'asc' });
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [fromLocationId, setFromLocationId] = useState('');
    const [quantity, setQuantity] = useState('');
    const [reason, setReason] = useState('');

    const availableStock = selectedProduct && fromLocationId ? selectedProduct.locations?.[fromLocationId] || 0 : 0;

    useEffect(() => {
        // Reset form when product changes
        setFromLocationId('');
        setQuantity('');
        setReason('');
    }, [selectedProduct]);

        const handleSubmit = async (e) => {
        e.preventDefault();
        if (!selectedProduct || !fromLocationId || !quantity) {
            toast.error("Por favor, preencha todos os campos obrigat√≥rios.");
            return;
        }
        if (Number(quantity) <= 0) {
            toast.error("A quantidade deve ser maior que zero.");
            return;
        }
        if (Number(quantity) > availableStock) {
            toast.error(`Estoque insuficiente. Dispon√≠vel: ${availableStock}`);
            return;
        }
        
        const exitQuantity = Number(quantity);
        const toastId = toast.loading('Processando sa√≠da de estoque...');

        try {
            await runTransaction(db, async (transaction) => {
                const productRef = doc(db, 'products', selectedProduct.id);
                const productDoc = await transaction.get(productRef);

                if (!productDoc.exists()) {
                    throw new Error("Produto n„o encontrado!");
                }

                const productData = productDoc.data();
                const currentStock = productData.locations?.[fromLocationId] || 0;

                if (currentStock < exitQuantity) {
                    throw new Error(`Estoque insuficiente. Dispon√≠vel: ${currentStock}`);
                }

                const newStock = currentStock - exitQuantity;
                const newTotalStock = productData.totalStock - exitQuantity;

                // 1. Atualizar o estoque do produto
                transaction.update(productRef, {
                    [`locations.${fromLocationId}`]: newStock,
                    totalStock: newTotalStock,
                });

                // 2. Registrar movimento de SA√çDA no Kardex
                const kardexRef = doc(collection(db, 'kardex'));
                transaction.set(kardexRef, {
                    productId: selectedProduct.id,
                    productName: productData.name,
                    locationId: fromLocationId,
                    type: 'saida',
                    quantity: exitQuantity,
                    previousStock: currentStock,
                    newStock: newStock,
                    timestamp: serverTimestamp(),
                    userId: user.uid,
                    userEmail: userData?.email,
                    details: reason || 'Sa√≠da manual'
                });
            });

            toast.success('Sa√≠da de estoque registrada com sucesso!', { id: toastId });
            // Resetar o formul√°rio
            setSelectedProduct(null);
            setFromLocationId('');
            setQuantity('');
            setReason('');

        } catch (error) {
            console.error("Erro na sa√≠da de estoque: ", error);
            toast.error(error.message || 'Falha ao registrar a sa√≠da.', { id: toastId });
        }
    };

    return (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-4">Sa√≠da de Estoque</h3>
            <form onSubmit={handleSubmit} className="space-y-4">
                <ProductSelector 
                    onProductSelect={setSelectedProduct} 
                    selectedProductId={selectedProduct?.id}
                    placeholder="Buscar produto para sa√≠da..." 
                />

                {selectedProduct && (
                    <>
                        <div>
                            <label htmlFor="from-location-exit" className="block text-sm font-medium text-gray-700 mb-1">Local de Origem</label>
                            <select id="from-location-exit" value={fromLocationId} onChange={e => setFromLocationId(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                <option value="">Selecione a origem</option>
                                {locations && locations.length > 0 ? (
                                    locations.map(loc => (
                                        <option key={loc.id} value={loc.id}>
                                            {`${loc.name} (Disp: ${selectedProduct.locations?.[loc.id] || 0})`}
                                        </option>
                                    ))
                                ) : (
                                    <option value="" disabled>Carregando localidades...</option>
                                )}
                            </select>
                        </div>

                        <div>
                            <label htmlFor="quantity-exit" className="block text-sm font-medium text-gray-700 mb-1">quantidade</label>
                            <input type="number" id="quantity-exit" value={quantity} onChange={e => setQuantity(e.target.value)} min="1" max={availableStock > 0 ? availableStock : undefined} placeholder={`M√°x: ${availableStock}`} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" />
                        </div>

                        <div>
                            <label htmlFor="reason-exit" className="block text-sm font-medium text-gray-700 mb-1">Motivo da Sa√≠da</label>
                            <input type="text" id="reason-exit" value={reason} onChange={e => setReason(e.target.value)} placeholder="Ex: Venda, Perda, Uso interno" className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" />
                        </div>

                        <div className="flex justify-end pt-2">
                            <button type="submit" disabled={!selectedProduct || !fromLocationId || !quantity} className="flex items-center gap-2 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300 disabled:bg-red-300">
                                <FaArrowCircleDown />
                                Confirmar Sa√≠da
                            </button>
                        </div>
                    </>
                )}
            </form>
        </div>
    );
};

export default StockExitForm;
import React, { useMemo } from 'react';
import useFirestore from '../hooks/useFirestore';

export default function StockReport() {
    const { docs: products, loading: loadingProducts } = useFirestore('products', { field: 'name', direction: 'asc' });
    const { docs: categories, loading: loadingCategories } = useFirestore('categories');

    const loading = loadingProducts || loadingCategories;

    const getCategoryName = (categoryId) => {
        const category = categories.find(c => c.id === categoryId);
        return category ? category.name : 'Sem Categoria';
    };

    const totalStockValue = useMemo(() => {
        return (products || []).reduce((acc, product) => {
            const value = (product.price || 0) * (product.totalQuantity || 0);
            return acc + value;
        }, 0);
    }, [products]);

    const handlePrint = () => {
        window.print();
    };

    return (
        <div className="bg-white p-6 rounded-lg shadow-sm">
            <div className="flex justify-between items-center mb-4 print:hidden">
                <h3 className="text-xl font-semibold text-gray-800">Relat√≥rio de Posi√ß√£o de Estoque</h3>
                <button onClick={handlePrint} className="bg-gray-700 hover:bg-gray-800 text-white font-bold py-2 px-4 rounded-lg flex items-center">
                    <i className="fas fa-print mr-2"></i>
                    Imprimir
                </button>
            </div>

            <div className="print:block">
                <h2 className="text-2xl font-bold text-center mb-2 hidden print:block">Relat√≥rio de Estoque</h2>
                <p className="text-center text-sm text-gray-500 mb-6 hidden print:block">Gerado em: {new Date().toLocaleString('pt-BR')}</p>

                {loading ? (
                    <p className="text-center text-gray-500 py-4">Carregando dados do relat√≥rio...</p>
                ) : (
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Produto</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoria</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Qtd. em Estoque</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Pre√ßo Unit.</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Valor Total</th>
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {(products || []).map(product => (
                                    <tr key={product.id}>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{product.name}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{getCategoryName(product.categoryId)}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 font-bold">{product.totalQuantity || 0}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{`R$ ${product.price?.toFixed(2) || '0.00'}`}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{`R$ ${((product.price || 0) * (product.totalQuantity || 0)).toFixed(2)}`}</td>
                                    </tr>
                                ))}
                            </tbody>
                            <tfoot className="bg-gray-50">
                                <tr>
                                    <td colSpan="4" className="px-6 py-3 text-right text-sm font-bold text-gray-700 uppercase">Valor Total em Estoque:</td>
                                    <td className="px-6 py-3 text-left text-sm font-bold text-gray-900">{`R$ ${totalStockValue.toFixed(2)}`}</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                )}
            </div>
        </div>
    );
}
import React, { useState, useEffect } from 'react';
import toast from 'react-hot-toast';
import { db } from '../services/firebase';
import { runTransaction, doc, collection, serverTimestamp } from 'firebase/firestore';
import { useAuth } from '../context/AuthContext';
import ProductSelector from './ProductSelector';
import useFirestore from '../hooks/useFirestore';
import { FaExchangeAlt } from 'react-icons/fa';

const StockTransferForm = () => {
    const { user, userData } = useAuth();
    const { docs: locations } = useFirestore('locations', { field: 'name', direction: 'asc' });
    const [selectedProduct, setSelectedProduct] = useState(null);
    const [fromLocationId, setFromLocationId] = useState('');
    const [toLocationId, setToLocationId] = useState('');
    const [quantity, setQuantity] = useState('');

    const availableStock = selectedProduct && fromLocationId ? selectedProduct.locations?.[fromLocationId] || 0 : 0;

    useEffect(() => {
        // Reset form when product changes
        setFromLocationId('');
        setToLocationId('');
        setQuantity('');
    }, [selectedProduct]);

        const handleSubmit = async (e) => {
        e.preventDefault();
        if (!selectedProduct || !fromLocationId || !toLocationId || !quantity) {
            toast.error("Por favor, preencha todos os campos.");
            return;
        }
        if (fromLocationId === toLocationId) {
            toast.error("A localidade de origem e destino n„o podem ser iguais.");
            return;
        }
        if (Number(quantity) <= 0) {
            toast.error("A quantidade deve ser maior que zero.");
            return;
        }
        if (Number(quantity) > availableStock) {
            toast.error(`Estoque insuficiente na origem. Dispon√≠vel: ${availableStock}`);
            return;
        }
        
        const transferQuantity = Number(quantity);
        const toastId = toast.loading('Processando transfer√™ncia...');

        try {
            await runTransaction(db, async (transaction) => {
                const productRef = doc(db, 'products', selectedProduct.id);
                const productDoc = await transaction.get(productRef);

                if (!productDoc.exists()) {
                    throw new Error("Produto n„o encontrado!");
                }

                const productData = productDoc.data();
                const currentFromStock = productData.locations?.[fromLocationId] || 0;

                if (currentFromStock < transferQuantity) {
                    throw new Error(`Estoque insuficiente na origem. Dispon√≠vel: ${currentFromStock}`);
                }

                const newFromStock = currentFromStock - transferQuantity;
                const newToStock = (productData.locations?.[toLocationId] || 0) + transferQuantity;

                // 1. Atualizar o estoque do produto
                transaction.update(productRef, {
                    [`locations.${fromLocationId}`]: newFromStock,
                    [`locations.${toLocationId}`]: newToStock,
                    // O totalStock n„o muda na transfer√™ncia
                });

                // 2. Registrar movimento de SA√çDA no Kardex
                const kardexExitRef = doc(collection(db, 'kardex'));
                transaction.set(kardexExitRef, {
                    productId: selectedProduct.id,
                    productName: productData.name,
                    locationId: fromLocationId,
                    type: 'transfer_out',
                    quantity: transferQuantity,
                    previousStock: currentFromStock,
                    newStock: newFromStock,
                    timestamp: serverTimestamp(),
                    userId: user.uid,
                    userEmail: userData?.email,
                    details: `Transfer√™ncia para local ${toLocationId}`
                });

                // 3. Registrar movimento de ENTRADA no Kardex
                const kardexEntryRef = doc(collection(db, 'kardex'));
                transaction.set(kardexEntryRef, {
                    productId: selectedProduct.id,
                    productName: productData.name,
                    locationId: toLocationId,
                    type: 'transfer_in',
                    quantity: transferQuantity,
                    previousStock: (productData.locations?.[toLocationId] || 0),
                    newStock: newToStock,
                    timestamp: serverTimestamp(),
                    userId: user.uid,
                    userEmail: userData?.email,
                    details: `Transfer√™ncia de local ${fromLocationId}`
                });
            });

            toast.success('Transfer√™ncia realizada com sucesso!', { id: toastId });
            // Resetar o formul√°rio
            setSelectedProduct(null);
            setFromLocationId('');
            setToLocationId('');
            setQuantity('');

        } catch (error) {
            console.error("Erro na transfer√™ncia: ", error);
            toast.error(error.message || 'Falha ao realizar a transfer√™ncia.', { id: toastId });
        }
    };

    return (
        <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-bold text-gray-800 dark:text-white mb-4">Transfer√™ncia de Estoque</h3>
            <form onSubmit={handleSubmit} className="space-y-4">
                <ProductSelector 
                    onProductSelect={setSelectedProduct} 
                    selectedProductId={selectedProduct?.id}
                    placeholder="Buscar produto para transferir..." 
                />

                {selectedProduct && (
                    <>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 items-end">
                            <div>
                                <label htmlFor="from-location-transfer" className="block text-sm font-medium text-gray-700 mb-1">De</label>
                                <select id="from-location-transfer" value={fromLocationId} onChange={e => setFromLocationId(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                    <option value="">Selecione a origem</option>
                                    {locations && locations.length > 0 ? (
                                        locations.map(loc => (
                                            <option key={loc.id} value={loc.id}>
                                                {`${loc.name} (Disp: ${selectedProduct.locations?.[loc.id] || 0})`}
                                            </option>
                                        ))
                                    ) : (
                                        <option value="" disabled>Carregando localidades...</option>
                                    )}
                                </select>
                            </div>
                            <div>
                                <label htmlFor="to-location-transfer" className="block text-sm font-medium text-gray-700 mb-1">Para</label>
                                <select id="to-location-transfer" value={toLocationId} onChange={e => setToLocationId(e.target.value)} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500">
                                    <option value="">Selecione o destino</option>
                                    {locations && locations.length > 0 ? (
                                        locations.filter(l => l.id !== fromLocationId).map(loc => (
                                            <option key={loc.id} value={loc.id}>
                                                {loc.name}
                                            </option>
                                        ))
                                    ) : (
                                        <option value="" disabled>Carregando localidades...</option>
                                    )}
                                </select>
                            </div>
                        </div>

                        <div>
                            <label htmlFor="quantity-transfer" className="block text-sm font-medium text-gray-700 mb-1">quantidade a Transferir</label>
                            <input type="number" id="quantity-transfer" value={quantity} onChange={e => setQuantity(e.target.value)} min="1" max={availableStock > 0 ? availableStock : undefined} placeholder={`M√°x: ${availableStock}`} className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500" />
                        </div>

                        <div className="flex justify-end pt-2">
                            <button type="submit" disabled={!selectedProduct || !fromLocationId || !toLocationId || !quantity} className="flex items-center gap-2 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition duration-300 disabled:bg-blue-300">
                                <FaExchangeAlt />
                                Confirmar Transfer√™ncia
                            </button>
                        </div>
                    </>
                )}
            </form>
        </div>
    );
};

export default StockTransferForm;
import React, { useState, useEffect } from 'react';
import { db } from '../services/firebase';
import { collection, addDoc, doc, updateDoc } from 'firebase/firestore';
import Modal from './Modal';

const INITIAL_STATE = {
    name: '',
    contactPerson: '',
    phone: '',
    email: '',
};

export default function SupplierFormModal({ isOpen, onClose, supplierToEdit }) {
    const [formData, setFormData] = useState(INITIAL_STATE);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState('');

    const isEditing = !!supplierToEdit;

    useEffect(() => {
        if (isOpen) {
            if (isEditing) {
                setFormData({
                    name: supplierToEdit.name || '',
                    contactPerson: supplierToEdit.contactPerson || '',
                    phone: supplierToEdit.phone || '',
                    email: supplierToEdit.email || '',
                });
            } else {
                setFormData(INITIAL_STATE);
            }
            setError('');
        }
    }, [supplierToEdit, isOpen]);

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!formData.name.trim() || !formData.email.trim()) {
            setError('O nome e o e-mail do fornecedor s√£o obrigat√≥rios.');
            return;
        }
        setLoading(true);
        setError('');

        try {
            if (isEditing) {
                const supplierRef = doc(db, 'suppliers', supplierToEdit.id);
                await updateDoc(supplierRef, formData);
            } else {
                await addDoc(collection(db, 'suppliers'), formData);
            }
            onClose();
        } catch (err) {
            console.error('Error saving supplier:', err);
            setError('Falha ao salvar o fornecedor. Tente novamente.');
        }
        setLoading(false);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={isEditing ? 'Editar Fornecedor' : 'Adicionar Novo Fornecedor'}>
            <form onSubmit={handleSubmit} className="space-y-4">
                {error && <p className="bg-red-100 text-red-700 p-3 rounded-lg">{error}</p>}
                
                <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700">Nome do Fornecedor</label>
                    <input type="text" name="name" id="name" value={formData.name} onChange={handleChange} required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="contactPerson" className="block text-sm font-medium text-gray-700">Pessoa de Contato (Opcional)</label>
                    <input type="text" name="contactPerson" id="contactPerson" value={formData.contactPerson} onChange={handleChange} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="phone" className="block text-sm font-medium text-gray-700">Telefone (Opcional)</label>
                    <input type="tel" name="phone" id="phone" value={formData.phone} onChange={handleChange} className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700">E-mail</label>
                    <input type="email" name="email" id="email" value={formData.email} onChange={handleChange} required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm" />
                </div>

                <div className="flex justify-end pt-4 space-x-2">
                    <button type="button" onClick={onClose} className="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300">Cancelar</button>
                    <button type="submit" disabled={loading} className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:bg-blue-300">
                        {loading ? 'Salvando...' : 'Salvar Fornecedor'}
                    </button>
                </div>
            </form>
        </Modal>
    );
}
import React, { useState } from 'react';
import toast from 'react-hot-toast';
import { useAuth } from '../context/AuthContext';
import { db } from '../services/firebase';
import { doc, deleteDoc } from 'firebase/firestore';
import useFirestore from '../hooks/useFirestore';
import SupplierFormModal from './SupplierFormModal';

export default function SuppliersManager() {
    const { userData } = useAuth();
    const { docs: suppliers, loading } = useFirestore('suppliers');
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [supplierToEdit, setSupplierToEdit] = useState(null);

    const canEdit = userData?.role === 'admin' || userData?.role === 'editor';

    const handleOpenModal = (supplier = null) => {
        setSupplierToEdit(supplier);
        setIsModalOpen(true);
    };

    const handleCloseModal = () => {
        setSupplierToEdit(null);
        setIsModalOpen(false);
    };

    const handleDeleteSupplier = async (supplierId) => {
        if (window.confirm('Tem certeza que deseja excluir este fornecedor?')) {
            const promise = deleteDoc(doc(db, 'suppliers', supplierId));
            toast.promise(promise, {
                loading: 'Excluindo fornecedor...',
                success: 'Fornecedor exclu√≠do com sucesso!',
                error: 'Falha ao excluir o fornecedor.',
            });
        }
    };

    return (
        <>
            <div className="bg-white p-6 rounded-lg shadow-sm">
                <div className="flex justify-between items-center mb-4">
                    <h3 className="text-xl font-semibold text-gray-800">gerenciar Fornecedores</h3>
                    {canEdit && (
                        <button onClick={() => handleOpenModal()} className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg flex items-center">
                            <i className="fas fa-plus mr-2"></i>
                            Novo Fornecedor
                        </button>
                    )}
                </div>
                
                {loading ? (
                    <p className="text-center text-gray-500 py-4">Carregando fornecedores...</p>
                ) : (
                    <div className="overflow-x-auto">
                        <table className="min-w-full divide-y divide-gray-200">
                            <thead className="bg-gray-50">
                                <tr>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Nome</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Contato</th>
                                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Telefone</th>
                                    {canEdit && <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">AÁıes</th>}
                                </tr>
                            </thead>
                            <tbody className="bg-white divide-y divide-gray-200">
                                {suppliers && suppliers.length > 0 ? suppliers.map(sup => (
                                    <tr key={sup.id}>
                                        <td className="px-6 py-4 whitespace-nowrap">
                                            <div className="text-sm font-medium text-gray-900">{sup.name}</div>
                                            <div className="text-sm text-gray-500">{sup.email}</div>
                                        </td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{sup.contactPerson || '-'}</td>
                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{sup.phone || '-'}</td>
                                        {canEdit && (
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                                <button onClick={() => handleOpenModal(sup)} className="text-indigo-600 hover:text-indigo-900 mr-3">Editar</button>
                                                <button onClick={() => handleDeleteSupplier(sup.id)} className="text-red-600 hover:text-red-900">Excluir</button>
                                            </td>
                                        )}
                                    </tr>
                                )) : (
                                    <tr>
                                        <td colSpan={canEdit ? "4" : "3"} className="text-center text-gray-500 py-4">Nenhum fornecedor cadastrado.</td>
                                    </tr>
                                )}
                            </tbody>
                        </table>
                    </div>
                )}
            </div>

            {canEdit && (
                <SupplierFormModal 
                    isOpen={isModalOpen} 
                    onClose={handleCloseModal} 
                    supplierToEdit={supplierToEdit} 
                />
            )}
        </>
    );
}
import React, { useState, useEffect } from 'react';
import { FaTimes, FaUser, FaShieldAlt, FaCheck, FaTimes as FaTimesIcon, FaTrash, FaExclamationTriangle } from 'react-icons/fa';
import { ROLES, PERMISSIONS, ROLE_PERMISSIONS, ROLE_DESCRIPTIONS, getRolePermissions, hasPermission } from '../utils/permissions';
import { useAuth } from '../context/AuthContext';

const UserEditModal = ({ isOpen, onClose, user, onSave, onDelete }) => {
  const { userData, currentUser } = useAuth();
  const [formData, setFormData] = useState({
    displayName: '',
    email: '',
    role: ROLES.VIEWER,
    isActive: true,
    customPermissions: []
  });
  const [showCustomPermissions, setShowCustomPermissions] = useState(false);
  const [loading, setSaving] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);

  useEffect(() => {
    if (user) {
      setFormData({
        displayName: user.displayName || '',
        email: user.email || '',
        role: user.role || ROLES.VIEWER,
        isActive: user.isActive !== false,
        customPermissions: user.customPermissions || []
      });
      setShowCustomPermissions(user.customPermissions && user.customPermissions.length > 0);
    }
  }, [user]);

  const handleSave = async () => {
    setSaving(true);
    try {
      await onSave(user.id, formData);
      onClose();
    } catch (error) {
      console.error('Erro ao salvar usu√°rio:', error);
    }
    setSaving(false);
  };

  const handleDelete = () => {
    if (user.id === currentUser?.uid) {
      alert('VocÍ n„o pode excluir sua prÛpria conta');
      return;
    }
    setShowDeleteConfirm(true);
  };

  const handleConfirmDelete = async () => {
    setIsDeleting(true);
    try {
      await onDelete(user.id);
      setShowDeleteConfirm(false);
      onClose();
    } catch (error) {
      console.error('Erro ao excluir usu√°rio:', error);
    }
    setIsDeleting(false);
  };

  const canDeleteUser = hasPermission(userData?.role, PERMISSIONS.DELETE_USERS) && user?.id !== currentUser?.uid;

  const handlePermissionToggle = (permission) => {
    const currentPermissions = formData.customPermissions || [];
    const hasPermission = currentPermissions.includes(permission);
    
    let newPermissions;
    if (hasPermission) {
      newPermissions = currentPermissions.filter(p => p !== permission);
    } else {
      newPermissions = [...currentPermissions, permission];
    }
    
    setFormData(prev => ({ ...prev, customPermissions: newPermissions }));
  };

  const getRolePermissionsList = () => {
    return getRolePermissions(formData.role);
  };

  const hasRolePermission = (permission) => {
    return getRolePermissionsList().includes(permission);
  };

  const hasCustomPermission = (permission) => {
    return formData.customPermissions?.includes(permission) || false;
  };

  const getPermissionStatus = (permission) => {
    const roleHas = hasRolePermission(permission);
    const customHas = hasCustomPermission(permission);
    
    if (roleHas && customHas) return 'both';
    if (roleHas) return 'role';
    if (customHas) return 'custom';
    return 'none';
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b">
          <div className="flex items-center space-x-3">
            <FaUser className="text-blue-600" />
            <div>
              <h2 className="text-xl font-semibold">Editar Usu√°rio</h2>
              <p className="text-sm text-gray-600">{user?.email}</p>
            </div>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <FaTimes size={20} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* informaÁıes B√°sicas */}
            <div className="space-y-4">
              <h3 className="text-lg font-medium text-gray-900">informaÁıes B√°sicas</h3>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Nome de Exibi√ß√£o
                </label>
                <input
                  type="text"
                  value={formData.displayName}
                  onChange={(e) => setFormData(prev => ({ ...prev, displayName: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Nome do usu√°rio"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Email
                </label>
                <input
                  type="email"
                  value={formData.email}
                  disabled
                  className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-gray-500"
                />
                <p className="text-xs text-gray-500 mt-1">O email n„o pode ser alterado</p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Role do Sistema
                </label>
                <select
                  value={formData.role}
                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  {Object.entries(ROLES).map(([key, value]) => (
                    <option key={key} value={value}>
                      {value.charAt(0).toUpperCase() + value.slice(1)}
                    </option>
                  ))}
                </select>
                <p className="text-xs text-gray-600 mt-1">
                  {ROLE_DESCRIPTIONS[formData.role]}
                </p>
              </div>

              <div>
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={formData.isActive}
                    onChange={(e) => setFormData(prev => ({ ...prev, isActive: e.target.checked }))}
                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">Usu√°rio Ativo</span>
                </label>
                <p className="text-xs text-gray-600 ml-6">
                  Desmarque para desativar o acesso do usu√°rio
                </p>
              </div>

              <div>
                <label className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    checked={showCustomPermissions}
                    onChange={(e) => setShowCustomPermissions(e.target.checked)}
                    className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
                  />
                  <span className="text-sm font-medium text-gray-700">permissıes customizadas</span>
                </label>
                <p className="text-xs text-gray-600 ml-6">
                  Adicione ou remova permissıes espec√≠ficas al√©m do role padr√£o
                </p>
              </div>
            </div>

            {/* permissıes */}
            <div className="space-y-4">
              <div className="flex items-center space-x-2">
                <FaShieldAlt className="text-green-600" />
                <h3 className="text-lg font-medium text-gray-900">Sistema de permissıes</h3>
              </div>

              {/* Legenda */}
              <div className="bg-gray-50 p-3 rounded-md">
                <h4 className="text-sm font-medium text-gray-700 mb-2">Legenda:</h4>
                <div className="grid grid-cols-2 gap-2 text-xs">
                  <div className="flex items-center space-x-1">
                    <FaCheck className="text-blue-600" />
                    <span>permiss„o do Role</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <FaCheck className="text-green-600" />
                    <span>permiss„o Customizada</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <FaCheck className="text-purple-600" />
                    <span>Role + Custom</span>
                  </div>
                  <div className="flex items-center space-x-1">
                    <FaTimesIcon className="text-gray-400" />
                    <span>Sem permiss„o</span>
                  </div>
                </div>
              </div>

              {/* Lista de permissıes */}
              <div className="max-h-64 overflow-y-auto border border-gray-200 rounded-md">
                {Object.entries(PERMISSIONS).map(([key, permission]) => {
                  const status = getPermissionStatus(permission);
                  
                  return (
                    <div key={permission} className="flex items-center justify-between p-3 border-b border-gray-100 hover:bg-gray-50">
                      <div className="flex-1">
                        <span className="text-sm text-gray-900">
                          {permission.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}
                        </span>
                      </div>
                      
                      <div className="flex items-center space-x-2">
                        {/* Status do Role */}
                        <div className="text-xs text-gray-600 w-16 text-center">
                          {hasRolePermission(permission) ? (
                            <FaCheck className="text-blue-600 mx-auto" />
                          ) : (
                            <FaTimesIcon className="text-gray-300 mx-auto" />
                          )}
                        </div>
                        
                        {/* Toggle permiss„o Customizada */}
                        {showCustomPermissions && (
                          <button
                            onClick={() => handlePermissionToggle(permission)}
                            className={`w-6 h-6 rounded flex items-center justify-center transition-colors ${
                              hasCustomPermission(permission)
                                ? 'bg-green-100 text-green-600 hover:bg-green-200'
                                : 'bg-gray-100 text-gray-400 hover:bg-gray-200'
                            }`}
                          >
                            {hasCustomPermission(permission) ? <FaCheck size={12} /> : <FaTimesIcon size={12} />}
                          </button>
                        )}
                        
                        {/* Status Final */}
                        <div className="w-6 flex justify-center">
                          {status !== 'none' && (
                            <FaCheck 
                              className={
                                status === 'both' ? 'text-purple-600' :
                                status === 'role' ? 'text-blue-600' :
                                'text-green-600'
                              } 
                              size={14}
                            />
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="flex items-center justify-between p-6 border-t bg-gray-50">
          {/* Bot√£o de Exclus„o (esquerda) */}
          <div>
            {canDeleteUser && (
              <button
                onClick={handleDelete}
                disabled={loading || isDeleting}
                className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50 flex items-center space-x-2"
                title="Excluir usu√°rio"
              >
                <FaTrash className="text-sm" />
                <span>Excluir Usu√°rio</span>
              </button>
            )}
          </div>

          {/* Bot√µes principais (direita) */}
          <div className="flex items-center space-x-3">
            <button
              onClick={onClose}
              disabled={loading || isDeleting}
              className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            >
              Cancelar
            </button>
            <button
              onClick={handleSave}
              disabled={loading || isDeleting}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {loading ? 'Salvando...' : 'Salvar AlterAÁıes'}
            </button>
          </div>
        </div>

        {/* Modal de ConfirmAÁ„o de Exclus„o */}
        {showDeleteConfirm && (
          <div className="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center z-10">
            <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
              {/* Header do modal de confirmAÁ„o */}
              <div className="flex items-center justify-between p-4 border-b border-gray-200">
                <div className="flex items-center space-x-3">
                  <div className="flex-shrink-0 w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
                    <FaExclamationTriangle className="text-red-600" />
                  </div>
                  <div>
                    <h3 className="text-lg font-medium text-gray-900">Confirmar Exclus„o</h3>
                    <p className="text-sm text-gray-500">Esta AÁ„o n„o pode ser desfeita</p>
                  </div>
                </div>
              </div>

              {/* Content do modal de confirmAÁ„o */}
              <div className="p-4">
                <p className="text-gray-700 mb-4">
                  Tem certeza que deseja excluir o usu√°rio <strong>{user?.displayName || user?.email}</strong>?
                </p>
                
                <div className="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
                  <div className="flex items-start space-x-2">
                    <FaExclamationTriangle className="text-red-500 mt-0.5 flex-shrink-0" />
                    <div className="text-sm text-red-700">
                      <p className="font-medium mb-1">Aten√ß√£o:</p>
                      <ul className="list-disc list-inside space-y-1">
                        <li>O usu√°rio ser√° permanentemente removido</li>
                        <li>Todos os dados associados ser√£o perdidos</li>
                        <li>Esta AÁ„o n„o pode ser desfeita</li>
                      </ul>
                    </div>
                  </div>
                </div>
              </div>

              {/* Footer do modal de confirmAÁ„o */}
              <div className="flex items-center justify-end space-x-3 p-4 border-t border-gray-200">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  disabled={isDeleting}
                  className="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50"
                >
                  Cancelar
                </button>
                <button
                  onClick={handleConfirmDelete}
                  disabled={isDeleting}
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 disabled:opacity-50 flex items-center space-x-2"
                >
                  <FaTrash className="text-sm" />
                  <span>{isDeleting ? 'Excluindo...' : 'Confirmar Exclus„o'}</span>
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default UserEditModal;
import React, { useState } from 'react';
import { 
  FaUsers, 
  FaSearch, 
  FaEdit, 
  FaToggleOn, 
  FaToggleOff, 
  FaShieldAlt,
  FaCrown,
  FaUserEdit,
  FaUser,
  FaEye,
  FaChartBar,
  FaTrash
} from 'react-icons/fa';
import { useUserManagement } from '../hooks/useUserManagement';
import { useAuth } from '../context/AuthContext';
import { ROLES, ROLE_DESCRIPTIONS, hasPermission, PERMISSIONS } from '../utils/permissions';
import UserEditModal from './UserEditModal';
import DeleteUserModal from './DeleteUserModal';
import SkeletonLoader from './SkeletonLoader';
import toast from 'react-hot-toast';

const UserRoleManager = () => {
  const { userData, currentUser } = useAuth();
  const { 
    users, 
    loading, 
    updateUserRole, 
    updateUserPermissions, 
    toggleUserStatus,
    deleteUser,
    searchUsers,
    getUserStats
  } = useUserManagement();
  
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [selectedRole, setSelectedRole] = useState('');
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [userToDelete, setUserToDelete] = useState(null);
  const [isDeleting, setIsDeleting] = useState(false);

  // Verificar se o usu√°rio atual pode gerenciar usu√°rios
  const canManageUsers = hasPermission(userData?.role, PERMISSIONS.MANAGE_USERS);
  const canDeleteUsers = hasPermission(userData?.role, PERMISSIONS.DELETE_USERS);

  // Filtrar usu√°rios baseado na busca e role
  React.useEffect(() => {
    let filtered = users;
    
    if (searchTerm) {
      filtered = filtered.filter(user => 
        user.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.displayName?.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    
    if (selectedRole) {
      filtered = filtered.filter(user => user.role === selectedRole);
    }
    
    setFilteredUsers(filtered);
  }, [users, searchTerm, selectedRole]);

  const handleEditUser = (user) => {
    setSelectedUser(user);
    setIsEditModalOpen(true);
  };

  const handleSaveUser = async (userId, userData) => {
    // Atualizar role
    await updateUserRole(userId, userData.role);
    
    // Atualizar permissıes customizadas se houver
    if (userData.customPermissions) {
      await updateUserPermissions(userId, userData.customPermissions);
    }
    
    // Atualizar status ativo/inativo
    await toggleUserStatus(userId, userData.isActive);
  };

  const handleDeleteUserFromModal = async (userId) => {
    const success = await deleteUser(userId);
    if (success) {
      setIsEditModalOpen(false);
      setSelectedUser(null);
    }
    return success;
  };

  const handleDeleteUser = (user) => {
    // Verificar se n„o √© o pr√≥prio usu√°rio
    if (user.id === currentUser?.uid) {
      toast.error('VocÍ n„o pode excluir sua prÛpria conta');
      return;
    }
    
    setUserToDelete(user);
    setIsDeleteModalOpen(true);
  };

  const handleConfirmDelete = async (userId) => {
    setIsDeleting(true);
    const success = await deleteUser(userId);
    
    if (success) {
      setIsDeleteModalOpen(false);
      setUserToDelete(null);
    }
    
    setIsDeleting(false);
  };

  const getRoleIcon = (role) => {
    switch (role) {
      case ROLES.ADMIN: return <FaCrown className="text-purple-600" />;
      case ROLES.MANAGER: return <FaShieldAlt className="text-blue-600" />;
      case ROLES.EDITOR: return <FaUserEdit className="text-green-600" />;
      case ROLES.USER: return <FaUser className="text-yellow-600" />;
      case ROLES.VIEWER: return <FaEye className="text-gray-600" />;
      default: return <FaUser className="text-gray-400" />;
    }
  };

  const getRoleBadgeColor = (role) => {
    switch (role) {
      case ROLES.ADMIN: return 'bg-purple-100 text-purple-800';
      case ROLES.MANAGER: return 'bg-blue-100 text-blue-800';
      case ROLES.EDITOR: return 'bg-green-100 text-green-800';
      case ROLES.USER: return 'bg-yellow-100 text-yellow-800';
      case ROLES.VIEWER: return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const stats = getUserStats();

  if (!canManageUsers) {
    return (
      <div className="bg-red-50 border-l-4 border-red-400 p-4">
        <div className="flex">
          <div className="ml-3">
            <h3 className="text-sm font-medium text-red-800">
              Acesso Negado
            </h3>
            <p className="text-sm text-red-700 mt-1">
              VocÍ n„o tem permiss„o para gerenciar usu√°rios do sistema.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <FaUsers className="text-2xl text-blue-600" />
          <div>
            <h2 className="text-2xl font-bold text-gray-900">Gerenciamento de Usu√°rios</h2>
            <p className="text-gray-600">Gerencie roles e permissıes dos usu√°rios do sistema</p>
          </div>
        </div>
      </div>

      {/* Estat√≠sticas */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-white p-4 rounded-lg shadow border-l-4 border-blue-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total de Usu√°rios</p>
              <p className="text-2xl font-bold text-blue-600">{stats.total}</p>
            </div>
            <FaUsers className="text-3xl text-blue-500" />
          </div>
        </div>
        
        <div className="bg-white p-4 rounded-lg shadow border-l-4 border-green-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Usu√°rios Ativos</p>
              <p className="text-2xl font-bold text-green-600">{stats.active}</p>
            </div>
            <FaToggleOn className="text-3xl text-green-500" />
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg shadow border-l-4 border-red-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Usu√°rios Inativos</p>
              <p className="text-2xl font-bold text-red-600">{stats.inactive}</p>
            </div>
            <FaToggleOff className="text-3xl text-red-500" />
          </div>
        </div>

        <div className="bg-white p-4 rounded-lg shadow border-l-4 border-purple-500">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Administradores</p>
              <p className="text-2xl font-bold text-purple-600">{stats.byRole[ROLES.ADMIN] || 0}</p>
            </div>
            <FaCrown className="text-3xl text-purple-500" />
          </div>
        </div>
      </div>

      {/* Filtros */}
      <div className="bg-white p-4 rounded-lg shadow">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="relative">
            <FaSearch className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
            <input
              type="text"
              placeholder="Buscar por email ou nome..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          
          <select
            value={selectedRole}
            onChange={(e) => setSelectedRole(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Todos os Roles</option>
            {Object.entries(ROLES).map(([key, value]) => (
              <option key={key} value={value}>
                {value.charAt(0).toUpperCase() + value.slice(1)}
              </option>
            ))}
          </select>
        </div>
      </div>

      {/* Lista de Usu√°rios */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        {loading ? (
          <div className="p-4">
            <SkeletonLoader rows={5} />
          </div>
        ) : (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Usu√°rio
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Role
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    √öltimo Login
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Criado em
                  </th>
                  <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                    AÁıes
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredUsers.map((user) => (
                  <tr key={user.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10">
                          <div className="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <FaUser className="text-gray-600" />
                          </div>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">
                            {user.displayName || 'Nome n„o definido'}
                          </div>
                          <div className="text-sm text-gray-500">{user.email}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-2">
                        {getRoleIcon(user.role)}
                        <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getRoleBadgeColor(user.role)}`}>
                          {user.role?.charAt(0).toUpperCase() + user.role?.slice(1)}
                        </span>
                      </div>
                      {user.customPermissions && user.customPermissions.length > 0 && (
                        <div className="text-xs text-blue-600 mt-1">
                          +{user.customPermissions.length} permissıes customizadas
                        </div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        user.isActive !== false 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {user.isActive !== false ? 'Ativo' : 'Inativo'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.lastLoginFormatted}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.createdAtFormatted}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <div className="flex items-center justify-end space-x-2">
                        <button
                          onClick={() => handleEditUser(user)}
                          className="text-blue-600 hover:text-blue-900 p-2 rounded-full hover:bg-blue-100 transition-colors"
                          title="Editar usu√°rio"
                        >
                          <FaEdit />
                        </button>
                        <button
                          onClick={() => toggleUserStatus(user.id, !user.isActive)}
                          className={`p-2 rounded-full transition-colors ${
                            user.isActive !== false
                              ? 'text-red-600 hover:text-red-900 hover:bg-red-100'
                              : 'text-green-600 hover:text-green-900 hover:bg-green-100'
                          }`}
                          title={user.isActive !== false ? 'Desativar usu√°rio' : 'Ativar usu√°rio'}
                        >
                          {user.isActive !== false ? <FaToggleOff /> : <FaToggleOn />}
                        </button>
                        {user.id !== currentUser?.uid && canDeleteUsers && (
                          <button
                            onClick={() => handleDeleteUser(user)}
                            className="text-red-600 hover:text-red-900 p-2 rounded-full hover:bg-red-100 transition-colors"
                            title="Excluir usu√°rio"
                          >
                            <FaTrash />
                          </button>
                        )}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            {filteredUsers.length === 0 && !loading && (
              <div className="text-center py-12">
                <FaUsers className="text-6xl text-gray-300 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  Nenhum usu√°rio encontrado
                </h3>
                <p className="text-gray-500">
                  {searchTerm || selectedRole 
                    ? 'Tente ajustar os filtros de busca' 
                    : 'n„o h√° usu√°rios cadastrados no sistema'
                  }
                </p>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Modal de EdiÁ„o */}
      <UserEditModal
        isOpen={isEditModalOpen}
        onClose={() => setIsEditModalOpen(false)}
        user={selectedUser}
        onSave={handleSaveUser}
        onDelete={handleDeleteUserFromModal}
      />

      {/* Modal de Exclus„o */}
      <DeleteUserModal
        isOpen={isDeleteModalOpen}
        onClose={() => setIsDeleteModalOpen(false)}
        user={userToDelete}
        onConfirm={handleConfirmDelete}
        isDeleting={isDeleting}
      />
    </div>
  );
};

export default UserRoleManager;
